   1               		.file	"ConfigDescriptor.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.USB_GetNextDescriptorOfType,"ax",@progbits
  14               	.global	USB_GetNextDescriptorOfType
  16               	USB_GetNextDescriptorOfType:
  17               	.LFB71:
  18               		.file 1 "../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c"
   1:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** /*
   2:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****              LUFA Library
   3:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
   5:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** */
   8:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
   9:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** /*
  10:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  12:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  21:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****   this software.
  29:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** */
  30:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  31:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** #include "ConfigDescriptor.h"
  33:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  34:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** #if defined(USB_CAN_BE_HOST)
  35:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
  36:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****                                            void* BufferPtr, uint16_t BufferSize)
  37:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** {
  38:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	uint8_t ErrorCode;
  39:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];
  40:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  41:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	USB_ControlRequest = (USB_Request_Header_t)
  42:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		{
  43:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
  44:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			.bRequest      = REQ_GetDescriptor,
  45:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
  46:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			.wIndex        = 0,
  47:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
  48:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		};
  49:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  50:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	Pipe_SelectPipe(PIPE_CONTROLPIPE);
  51:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  52:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
  53:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	  return ErrorCode;
  54:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  55:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfi
  56:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  57:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	if (*ConfigSizePtr > BufferSize)
  58:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	  return HOST_GETCONFIG_BuffOverflow;
  59:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  60:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	USB_ControlRequest.wLength = *ConfigSizePtr;
  61:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  62:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
  63:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	  return ErrorCode;
  64:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  65:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
  66:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	  return HOST_GETCONFIG_InvalidData;
  67:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  68:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	return HOST_GETCONFIG_Successful;
  69:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** }
  70:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** #endif
  71:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  72:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** void USB_GetNextDescriptorOfType(uint16_t* const BytesRem,
  73:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****                                  void** const CurrConfigLoc,
  74:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****                                  const uint8_t Type)
  75:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** {
  19               		.loc 1 75 0
  20               		.cfi_startproc
  21               	.LVL0:
  22 0000 CF93      		push r28
  23               	.LCFI0:
  24               		.cfi_def_cfa_offset 3
  25               		.cfi_offset 28, -2
  26 0002 DF93      		push r29
  27               	.LCFI1:
  28               		.cfi_def_cfa_offset 4
  29               		.cfi_offset 29, -3
  30               	/* prologue: function */
  31               	/* frame size = 0 */
  32               	/* stack size = 2 */
  33               	.L__stack_usage = 2
  34 0004 EC01      		movw r28,r24
  35 0006 FB01      		movw r30,r22
  76:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	while (*BytesRem)
  36               		.loc 1 76 0
  37 0008 00C0      		rjmp .L2
  38               	.LVL1:
  39               	.L4:
  40               	.LBB9:
  41               	.LBB10:
  42               		.file 2 "../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h"
   1:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** /*
   2:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
   5:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** */
   8:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
   9:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** /*
  10:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  12:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  21:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****   this software.
  29:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** */
  30:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  31:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** /** \file
  32:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *  \brief Configuration descriptor parser API.
  33:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *
  34:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *  This section of the library gives a friendly API which can be used in host applications to easi
  35:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *  parse an attached device's configuration descriptor so that endpoint, interface and other descr
  36:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *  data can be extracted and used as needed.
  37:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *
  38:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  39:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  40:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  */
  41:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  42:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** /** \ingroup Group_Descriptors
  43:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *  @defgroup Group_ConfigDescriptorParser Configuration Descriptor Parser
  44:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *
  45:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *  Functions, macros, variables, enums and types related to the parsing of Configuration Descripto
  46:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *
  47:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  *  @{
  48:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h ****  */
  49:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  50:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** #ifndef __CONFIGDESCRIPTOR_H__
  51:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** #define __CONFIGDESCRIPTOR_H__
  52:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  53:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 	/* Includes: */
  54:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		#include <stdint.h>
  55:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  56:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		#include "../../../Common/Common.h"
  57:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		#include "HostStandardReq.h"
  58:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		#include "USBMode.h"
  59:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		#include "StdDescriptors.h"
  60:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  61:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 	/* Enable C linkage for C++ Compilers: */
  62:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		#if defined(__cplusplus)
  63:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			extern "C" {
  64:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		#endif
  65:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  66:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 	/* Preprocessor Checks: */
  67:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  68:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  69:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		#endif
  70:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  71:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 	/* Public Interface - May be used in end-application: */
  72:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		/* Macros: */
  73:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Mask for determining the type of an endpoint from an endpoint descriptor. This should then b
  74:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  with the EP_TYPE_* masks to determine the exact type of the endpoint.
  75:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 */
  76:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			#define EP_TYPE_MASK                       0x03
  77:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  78:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Casts a pointer to a descriptor inside the configuration descriptor into a pointer to the gi
  79:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  descriptor type.
  80:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
  81:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  Usage Example:
  82:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \code
  83:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  uint8_t* CurrDescriptor = &ConfigDescriptor[0]; // Pointing to the configuration header
  84:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  USB_Descriptor_Configuration_Header_t* ConfigHeaderPtr = DESCRIPTOR_PCAST(CurrDescriptor,
  85:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *                                                           USB_Descriptor_Configuration_Header
  86:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
  87:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  // Can now access elements of the configuration header struct using the -> indirection opera
  88:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \endcode
  89:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 */
  90:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			#define DESCRIPTOR_PCAST(DescriptorPtr, Type) ((Type*)(DescriptorPtr))
  91:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
  92:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Casts a pointer to a descriptor inside the configuration descriptor into the given descripto
  93:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  type (as an actual struct instance rather than a pointer to a struct).
  94:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
  95:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  Usage Example:
  96:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \code
  97:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  uint8_t* CurrDescriptor = &ConfigDescriptor[0]; // Pointing to the configuration header
  98:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  USB_Descriptor_Configuration_Header_t ConfigHeader = DESCRIPTOR_CAST(CurrDescriptor,
  99:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *                                                       USB_Descriptor_Configuration_Header_t);
 100:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 101:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  // Can now access elements of the configuration header struct using the . operator
 102:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \endcode
 103:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 */
 104:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			#define DESCRIPTOR_CAST(DescriptorPtr, Type)  (*DESCRIPTOR_PCAST(DescriptorPtr, Type))
 105:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 106:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Returns the descriptor's type, expressed as the 8-bit type value in the header of the descri
 107:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  This value's meaning depends on the descriptor's placement in the descriptor, but standard t
 108:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  values can be accessed in the \ref USB_DescriptorTypes_t enum.
 109:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 */
 110:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			#define DESCRIPTOR_TYPE(DescriptorPtr)    DESCRIPTOR_CAST(DescriptorPtr, USB_Descriptor_Header_t
 111:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 112:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Returns the descriptor's size, expressed as the 8-bit value indicating the number of bytes. 
 113:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			#define DESCRIPTOR_SIZE(DescriptorPtr)    DESCRIPTOR_CAST(DescriptorPtr, USB_Descriptor_Header_t
 114:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 115:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		/* Type Defines: */
 116:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Type define for a Configuration Descriptor comparator function (function taking a pointer to
 117:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  of type void, returning a uint8_t value).
 118:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 119:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \see \ref USB_GetNextDescriptorComp function for more details.
 120:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 */
 121:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			typedef uint8_t (* ConfigComparatorPtr_t)(void*);
 122:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 123:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		/* Enums: */
 124:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Enum for the possible return codes of the \ref USB_Host_GetDeviceConfigDescriptor() function
 125:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			enum USB_Host_GetConfigDescriptor_ErrorCodes_t
 126:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			{
 127:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				HOST_GETCONFIG_Successful       = 0, /**< No error occurred while retrieving the configuration 
 128:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				HOST_GETCONFIG_DeviceDisconnect = 1, /**< The attached device was disconnected while retrieving
 129:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				                                        * descriptor.
 130:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				                                        */
 131:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				HOST_GETCONFIG_PipeError        = 2, /**< An error occurred in the pipe while sending the reque
 132:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				HOST_GETCONFIG_SetupStalled     = 3, /**< The attached device stalled the request to retrieve t
 133:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				                                        * descriptor.
 134:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				                                        */
 135:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				HOST_GETCONFIG_SoftwareTimeOut  = 4, /**< The request or data transfer timed out. */
 136:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				HOST_GETCONFIG_BuffOverflow     = 5, /**< The device's configuration descriptor is too large to
 137:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				                                        * buffer.
 138:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				                                        */
 139:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				HOST_GETCONFIG_InvalidData      = 6, /**< The device returned invalid configuration descriptor 
 140:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			};
 141:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 142:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Enum for return values of a descriptor comparator function. */
 143:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			enum DSearch_Return_ErrorCodes_t
 144:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			{
 145:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_Found                = 0, /**< Current descriptor matches comparator criteria
 146:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_Fail                 = 1, /**< No further descriptor could possibly match cri
 147:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_NotFound             = 2, /**< Current descriptor does not match comparator c
 148:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			};
 149:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 150:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Enum for return values of \ref USB_GetNextDescriptorComp(). */
 151:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			enum DSearch_Comp_Return_ErrorCodes_t
 152:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			{
 153:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_COMP_Found           = 0, /**< Configuration descriptor now points to descrip
 154:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				                                             *   search criteria of the given comparator functi
 155:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_COMP_Fail            = 1, /**< Comparator function returned Descriptor_Search
 156:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_COMP_EndOfDescriptor = 2, /**< End of configuration descriptor reached before
 157:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			};
 158:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 159:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		/* Function Prototypes: */
 160:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Retrieves the configuration descriptor data from an attached device via a standard request i
 161:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  including validity and size checking to prevent a buffer overflow.
 162:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 163:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \param[in]     ConfigNumber   Device configuration descriptor number to fetch from the devic
 164:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *                                single configuration devices).
 165:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \param[in,out] ConfigSizePtr  Pointer to a uint16_t for storing the retrieved configuration 
 166:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \param[out]    BufferPtr      Pointer to the buffer for storing the configuration descriptor
 167:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \param[out]    BufferSize     Size of the allocated buffer where the configuration descripto
 168:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 169:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \return A value from the \ref USB_Host_GetConfigDescriptor_ErrorCodes_t enum.
 170:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 */
 171:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr, 
 172:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                           uint16_t BufferSize) ATTR_NON_NULL_PTR_ARG(2) ATTR_NO
 173:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 174:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Skips to the next sub-descriptor inside the configuration descriptor of the specified type v
 175:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  The bytes remaining value is automatically decremented.
 176:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 177:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 178:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 179:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in]     Type           Descriptor type value to search for.
 180:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 */
 181:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			void USB_GetNextDescriptorOfType(uint16_t* const BytesRem,
 182:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                 void** const CurrConfigLoc,
 183:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                 const uint8_t Type)
 184:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                 ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
 185:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 186:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Skips to the next sub-descriptor inside the configuration descriptor of the specified type v
 187:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  which must come before a descriptor of the second given type value. If the BeforeType type
 188:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  descriptor is reached first, the number of bytes remaining to process is set to zero and the
 189:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  function exits. The bytes remaining value is automatically decremented.
 190:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 191:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 192:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 193:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in]     Type           Descriptor type value to search for.
 194:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in]     BeforeType     Descriptor type value which must not be reached before the give
 195:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 */
 196:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			void USB_GetNextDescriptorOfTypeBefore(uint16_t* const BytesRem,
 197:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                       void** const CurrConfigLoc,
 198:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                       const uint8_t Type,
 199:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                       const uint8_t BeforeType)
 200:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                       ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
 201:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 202:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Skips to the next sub-descriptor inside the configuration descriptor of the specified type v
 203:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  which must come after a descriptor of the second given type value. The bytes remaining value
 204:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  automatically decremented.
 205:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 206:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 207:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 208:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in]     Type           Descriptor type value to search for.
 209:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in]     AfterType      Descriptor type value which must be reached before the given Ty
 210:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 */
 211:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			void USB_GetNextDescriptorOfTypeAfter(uint16_t* const BytesRem,
 212:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                      void** const CurrConfigLoc,
 213:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                      const uint8_t Type,
 214:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                      const uint8_t AfterType)
 215:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                      ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
 216:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 217:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Searches for the next descriptor in the given configuration descriptor using a pre-made comp
 218:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  function. The routine updates the position and remaining configuration descriptor bytes valu
 219:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  automatically. If a comparator routine fails a search, the descriptor pointer is retreated b
 220:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  so that the next descriptor search invocation will start from the descriptor which first cau
 221:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  original search to fail. This behaviour allows for one comparator to be used immediately aft
 222:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  has failed, starting the second search from the descriptor which failed the first.
 223:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 224:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  Comparator functions should be standard functions which accept a pointer to the header of th
 225:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  descriptor inside the configuration descriptor which is being compared, and should return a 
 226:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  the \ref DSearch_Return_ErrorCodes_t enum as a uint8_t value.
 227:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 228:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \note This function is available in USB Host mode only.
 229:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 230:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \param[in,out] BytesRem           Pointer to an int storing the remaining bytes in the confi
 231:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \param[in,out] CurrConfigLoc      Pointer to the current position in the configuration descr
 232:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \param[in]     ComparatorRoutine  Name of the comparator search function to use on the confi
 233:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 234:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \return Value of one of the members of the \ref DSearch_Comp_Return_ErrorCodes_t enum.
 235:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 236:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  Usage Example:
 237:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \code
 238:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  uint8_t EndpointSearcher(void* CurrentDescriptor); // Comparator Prototype
 239:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 240:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  uint8_t EndpointSearcher(void* CurrentDescriptor)
 241:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  {
 242:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *     if (DESCRIPTOR_TYPE(CurrentDescriptor) == DTYPE_Endpoint)
 243:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *         return DESCRIPTOR_SEARCH_Found;
 244:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *     else
 245:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *         return DESCRIPTOR_SEARCH_NotFound;
 246:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  }
 247:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 248:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  //...
 249:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  // After retrieving configuration descriptor:
 250:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  if (USB_Host_GetNextDescriptorComp(&BytesRemaining, &CurrentConfigLoc, EndpointSearcher) ==
 251:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *      Descriptor_Search_Comp_Found)
 252:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  {
 253:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *      // Do something with the endpoint descriptor
 254:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  }
 255:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *  \endcode
 256:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 */
 257:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
 258:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                  void** const CurrConfigLoc,
 259:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                  ConfigComparatorPtr_t const ComparatorRoutine);
 260:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 261:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 		/* Inline Functions: */
 262:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			/** Skips over the current sub-descriptor inside the configuration descriptor, so that the point
 263:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			    points to the next sub-descriptor. The bytes remaining value is automatically decremented.
 264:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 *
 265:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 266:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 267:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			 */
 268:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
 269:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON
 270:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
 271:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			                                         void** CurrConfigLoc)
 272:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 			{
 273:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
  43               		.loc 2 273 0
  44 000a A081      		ld r26,Z
  45 000c B181      		ldd r27,Z+1
  46 000e 2C91      		ld r18,X
  47 0010 30E0      		ldi r19,lo8(0)
  48               	.LVL2:
 274:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 
 275:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
  49               		.loc 2 275 0
  50 0012 A20F      		add r26,r18
  51 0014 B31F      		adc r27,r19
  52 0016 B183      		std Z+1,r27
  53 0018 A083      		st Z,r26
 276:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				*BytesRem      -= CurrDescriptorSize;
  54               		.loc 2 276 0
  55 001a 8881      		ld r24,Y
  56 001c 9981      		ldd r25,Y+1
  57 001e 821B      		sub r24,r18
  58 0020 930B      		sbc r25,r19
  59 0022 9983      		std Y+1,r25
  60 0024 8883      		st Y,r24
  61               	.LBE10:
  62               	.LBE9:
  77:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	{
  78:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
  79:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  80:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
  63               		.loc 1 80 0
  64 0026 A081      		ld r26,Z
  65 0028 B181      		ldd r27,Z+1
  66 002a 1196      		adiw r26,1
  67 002c 8C91      		ld r24,X
  68 002e 1197      		sbiw r26,1
  69 0030 8417      		cp r24,r20
  70 0032 01F0      		breq .L1
  71               	.LVL3:
  72               	.L2:
  76:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	while (*BytesRem)
  73               		.loc 1 76 0 discriminator 1
  74 0034 8881      		ld r24,Y
  75 0036 9981      		ldd r25,Y+1
  76 0038 0097      		sbiw r24,0
  77 003a 01F4      		brne .L4
  78               	.L1:
  79               	/* epilogue start */
  81:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		  return;
  82:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	}
  83:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** }
  80               		.loc 1 83 0
  81 003c DF91      		pop r29
  82 003e CF91      		pop r28
  83               	.LVL4:
  84 0040 0895      		ret
  85               		.cfi_endproc
  86               	.LFE71:
  88               		.section	.text.USB_GetNextDescriptorOfTypeBefore,"ax",@progbits
  89               	.global	USB_GetNextDescriptorOfTypeBefore
  91               	USB_GetNextDescriptorOfTypeBefore:
  92               	.LFB72:
  84:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  85:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** void USB_GetNextDescriptorOfTypeBefore(uint16_t* const BytesRem,
  86:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****                                        void** const CurrConfigLoc,
  87:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****                                        const uint8_t Type,
  88:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****                                        const uint8_t BeforeType)
  89:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** {
  93               		.loc 1 89 0
  94               		.cfi_startproc
  95               	.LVL5:
  96 0000 CF93      		push r28
  97               	.LCFI2:
  98               		.cfi_def_cfa_offset 3
  99               		.cfi_offset 28, -2
 100 0002 DF93      		push r29
 101               	.LCFI3:
 102               		.cfi_def_cfa_offset 4
 103               		.cfi_offset 29, -3
 104               	/* prologue: function */
 105               	/* frame size = 0 */
 106               	/* stack size = 2 */
 107               	.L__stack_usage = 2
 108 0004 FC01      		movw r30,r24
 109 0006 EB01      		movw r28,r22
  90:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	while (*BytesRem)
 110               		.loc 1 90 0
 111 0008 00C0      		rjmp .L6
 112               	.LVL6:
 113               	.L8:
 114               	.LBB11:
 115               	.LBB12:
 273:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
 116               		.loc 2 273 0
 117 000a A881      		ld r26,Y
 118 000c B981      		ldd r27,Y+1
 119 000e 6C91      		ld r22,X
 120 0010 70E0      		ldi r23,lo8(0)
 121               	.LVL7:
 275:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
 122               		.loc 2 275 0
 123 0012 A60F      		add r26,r22
 124 0014 B71F      		adc r27,r23
 125 0016 B983      		std Y+1,r27
 126 0018 A883      		st Y,r26
 127               		.loc 2 276 0
 128 001a 8081      		ld r24,Z
 129 001c 9181      		ldd r25,Z+1
 130 001e 861B      		sub r24,r22
 131 0020 970B      		sbc r25,r23
 132 0022 9183      		std Z+1,r25
 133 0024 8083      		st Z,r24
 134               	.LBE12:
 135               	.LBE11:
  91:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	{
  92:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
  93:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
  94:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 136               		.loc 1 94 0
 137 0026 A881      		ld r26,Y
 138 0028 B981      		ldd r27,Y+1
 139 002a 1196      		adiw r26,1
 140 002c 8C91      		ld r24,X
 141 002e 1197      		sbiw r26,1
 142 0030 8417      		cp r24,r20
 143 0032 01F0      		breq .L5
  95:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		{
  96:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			return;
  97:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		}
  98:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		else if (DESCRIPTOR_TYPE(*CurrConfigLoc) == BeforeType)
 144               		.loc 1 98 0
 145 0034 8217      		cp r24,r18
 146 0036 01F4      		brne .L6
  99:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		{
 100:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			*BytesRem = 0;
 147               		.loc 1 100 0
 148 0038 1182      		std Z+1,__zero_reg__
 149 003a 1082      		st Z,__zero_reg__
 101:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			return;
 150               		.loc 1 101 0
 151 003c 00C0      		rjmp .L5
 152               	.LVL8:
 153               	.L6:
  90:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	while (*BytesRem)
 154               		.loc 1 90 0 discriminator 1
 155 003e 8081      		ld r24,Z
 156 0040 9181      		ldd r25,Z+1
 157 0042 0097      		sbiw r24,0
 158 0044 01F4      		brne .L8
 159               	.L5:
 160               	/* epilogue start */
 102:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		}
 103:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	}
 104:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** }
 161               		.loc 1 104 0
 162 0046 DF91      		pop r29
 163 0048 CF91      		pop r28
 164               	.LVL9:
 165 004a 0895      		ret
 166               		.cfi_endproc
 167               	.LFE72:
 169               		.section	.text.USB_GetNextDescriptorOfTypeAfter,"ax",@progbits
 170               	.global	USB_GetNextDescriptorOfTypeAfter
 172               	USB_GetNextDescriptorOfTypeAfter:
 173               	.LFB73:
 105:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
 106:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** void USB_GetNextDescriptorOfTypeAfter(uint16_t* const BytesRem,
 107:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****                                       void** const CurrConfigLoc,
 108:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****                                       const uint8_t Type,
 109:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c ****                                       const uint8_t AfterType)
 110:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** {
 174               		.loc 1 110 0
 175               		.cfi_startproc
 176               	.LVL10:
 177 0000 EF92      		push r14
 178               	.LCFI4:
 179               		.cfi_def_cfa_offset 3
 180               		.cfi_offset 14, -2
 181 0002 FF92      		push r15
 182               	.LCFI5:
 183               		.cfi_def_cfa_offset 4
 184               		.cfi_offset 15, -3
 185 0004 1F93      		push r17
 186               	.LCFI6:
 187               		.cfi_def_cfa_offset 5
 188               		.cfi_offset 17, -4
 189 0006 CF93      		push r28
 190               	.LCFI7:
 191               		.cfi_def_cfa_offset 6
 192               		.cfi_offset 28, -5
 193 0008 DF93      		push r29
 194               	.LCFI8:
 195               		.cfi_def_cfa_offset 7
 196               		.cfi_offset 29, -6
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 5 */
 200               	.L__stack_usage = 5
 201 000a EC01      		movw r28,r24
 202 000c 7B01      		movw r14,r22
 203 000e 142F      		mov r17,r20
 111:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);
 204               		.loc 1 111 0
 205 0010 422F      		mov r20,r18
 206               	.LVL11:
 207 0012 0E94 0000 		call USB_GetNextDescriptorOfType
 208               	.LVL12:
 112:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
 113:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	if (*BytesRem)
 209               		.loc 1 113 0
 210 0016 8881      		ld r24,Y
 211 0018 9981      		ldd r25,Y+1
 212 001a 0097      		sbiw r24,0
 213 001c 01F0      		breq .L10
 114:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
 214               		.loc 1 114 0
 215 001e CE01      		movw r24,r28
 216 0020 B701      		movw r22,r14
 217 0022 412F      		mov r20,r17
 218 0024 0E94 0000 		call USB_GetNextDescriptorOfType
 219               	.L10:
 220               	/* epilogue start */
 115:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** }
 221               		.loc 1 115 0
 222 0028 DF91      		pop r29
 223 002a CF91      		pop r28
 224               	.LVL13:
 225 002c 1F91      		pop r17
 226               	.LVL14:
 227 002e FF90      		pop r15
 228 0030 EF90      		pop r14
 229               	.LVL15:
 230 0032 0895      		ret
 231               		.cfi_endproc
 232               	.LFE73:
 234               		.section	.text.USB_GetNextDescriptorComp,"ax",@progbits
 235               	.global	USB_GetNextDescriptorComp
 237               	USB_GetNextDescriptorComp:
 238               	.LFB74:
 116:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
 117:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigCompa
 118:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** {
 239               		.loc 1 118 0
 240               		.cfi_startproc
 241               	.LVL16:
 242 0000 AF92      		push r10
 243               	.LCFI9:
 244               		.cfi_def_cfa_offset 3
 245               		.cfi_offset 10, -2
 246 0002 BF92      		push r11
 247               	.LCFI10:
 248               		.cfi_def_cfa_offset 4
 249               		.cfi_offset 11, -3
 250 0004 CF92      		push r12
 251               	.LCFI11:
 252               		.cfi_def_cfa_offset 5
 253               		.cfi_offset 12, -4
 254 0006 DF92      		push r13
 255               	.LCFI12:
 256               		.cfi_def_cfa_offset 6
 257               		.cfi_offset 13, -5
 258 0008 EF92      		push r14
 259               	.LCFI13:
 260               		.cfi_def_cfa_offset 7
 261               		.cfi_offset 14, -6
 262 000a FF92      		push r15
 263               	.LCFI14:
 264               		.cfi_def_cfa_offset 8
 265               		.cfi_offset 15, -7
 266 000c 0F93      		push r16
 267               	.LCFI15:
 268               		.cfi_def_cfa_offset 9
 269               		.cfi_offset 16, -8
 270 000e 1F93      		push r17
 271               	.LCFI16:
 272               		.cfi_def_cfa_offset 10
 273               		.cfi_offset 17, -9
 274 0010 CF93      		push r28
 275               	.LCFI17:
 276               		.cfi_def_cfa_offset 11
 277               		.cfi_offset 28, -10
 278 0012 DF93      		push r29
 279               	.LCFI18:
 280               		.cfi_def_cfa_offset 12
 281               		.cfi_offset 29, -11
 282               	/* prologue: function */
 283               	/* frame size = 0 */
 284               	/* stack size = 10 */
 285               	.L__stack_usage = 10
 286 0014 8C01      		movw r16,r24
 287 0016 EB01      		movw r28,r22
 288 0018 5A01      		movw r10,r20
 119:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	uint8_t ErrorCode;
 120:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
 121:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	while (*BytesRem)
 289               		.loc 1 121 0
 290 001a 00C0      		rjmp .L13
 291               	.LVL17:
 292               	.L15:
 293               	.LBB13:
 122:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	{
 123:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		uint8_t* PrevDescLoc  = *CurrConfigLoc;
 294               		.loc 1 123 0
 295 001c E880      		ld r14,Y
 296 001e F980      		ldd r15,Y+1
 297               	.LVL18:
 298               	.LBB14:
 299               	.LBB15:
 273:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
 300               		.loc 2 273 0
 301 0020 F701      		movw r30,r14
 302 0022 2081      		ld r18,Z
 303 0024 30E0      		ldi r19,lo8(0)
 304               	.LVL19:
 275:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.h **** 				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
 305               		.loc 2 275 0
 306 0026 C701      		movw r24,r14
 307 0028 820F      		add r24,r18
 308 002a 931F      		adc r25,r19
 309 002c 9983      		std Y+1,r25
 310 002e 8883      		st Y,r24
 311               		.loc 2 276 0
 312 0030 F801      		movw r30,r16
 313 0032 8081      		ld r24,Z
 314 0034 9181      		ldd r25,Z+1
 315 0036 821B      		sub r24,r18
 316 0038 930B      		sbc r25,r19
 317 003a 9183      		std Z+1,r25
 318 003c 8083      		st Z,r24
 319               	.LBE15:
 320               	.LBE14:
 124:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		uint16_t PrevBytesRem = *BytesRem;
 125:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
 126:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 127:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
 128:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
 321               		.loc 1 128 0
 322 003e 8881      		ld r24,Y
 323 0040 9981      		ldd r25,Y+1
 324 0042 F501      		movw r30,r10
 325 0044 0995      		icall
 326               	.LVL20:
 327 0046 8230      		cpi r24,lo8(2)
 328 0048 01F0      		breq .L13
 129:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		{
 130:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
 329               		.loc 1 130 0
 330 004a 8130      		cpi r24,lo8(1)
 331 004c 01F4      		brne .L14
 131:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			{
 132:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 				*CurrConfigLoc = PrevDescLoc;
 332               		.loc 1 132 0
 333 004e F982      		std Y+1,r15
 334 0050 E882      		st Y,r14
 133:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 				*BytesRem      = PrevBytesRem;
 335               		.loc 1 133 0
 336 0052 F801      		movw r30,r16
 337 0054 D182      		std Z+1,r13
 338 0056 C082      		st Z,r12
 339 0058 00C0      		rjmp .L14
 340               	.LVL21:
 341               	.L13:
 342               	.LBE13:
 121:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	while (*BytesRem)
 343               		.loc 1 121 0 discriminator 1
 344 005a F801      		movw r30,r16
 345 005c C080      		ld r12,Z
 346 005e D180      		ldd r13,Z+1
 347 0060 C114      		cp r12,__zero_reg__
 348 0062 D104      		cpc r13,__zero_reg__
 349 0064 01F4      		brne .L15
 134:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			}
 135:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
 136:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 			return ErrorCode;
 137:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 		}
 138:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	}
 139:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 
 140:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** 	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
 350               		.loc 1 140 0
 351 0066 82E0      		ldi r24,lo8(2)
 352               	.L14:
 353               	/* epilogue start */
 141:../../LUFA/Drivers/USB/HighLevel/ConfigDescriptor.c **** }
 354               		.loc 1 141 0
 355 0068 DF91      		pop r29
 356 006a CF91      		pop r28
 357               	.LVL22:
 358 006c 1F91      		pop r17
 359 006e 0F91      		pop r16
 360               	.LVL23:
 361 0070 FF90      		pop r15
 362 0072 EF90      		pop r14
 363 0074 DF90      		pop r13
 364 0076 CF90      		pop r12
 365 0078 BF90      		pop r11
 366 007a AF90      		pop r10
 367               	.LVL24:
 368 007c 0895      		ret
 369               		.cfi_endproc
 370               	.LFE74:
 372               		.text
 373               	.Letext0:
 374               		.file 3 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.6.2/../..
 375               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ConfigDescriptor.c
C:\Users\Brian\AppData\Local\Temp\ccU8Ydsb.s:2      *ABS*:0000003f __SREG__
C:\Users\Brian\AppData\Local\Temp\ccU8Ydsb.s:3      *ABS*:0000003e __SP_H__
C:\Users\Brian\AppData\Local\Temp\ccU8Ydsb.s:4      *ABS*:0000003d __SP_L__
C:\Users\Brian\AppData\Local\Temp\ccU8Ydsb.s:5      *ABS*:00000034 __CCP__
C:\Users\Brian\AppData\Local\Temp\ccU8Ydsb.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Brian\AppData\Local\Temp\ccU8Ydsb.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Brian\AppData\Local\Temp\ccU8Ydsb.s:16     .text.USB_GetNextDescriptorOfType:00000000 USB_GetNextDescriptorOfType
C:\Users\Brian\AppData\Local\Temp\ccU8Ydsb.s:91     .text.USB_GetNextDescriptorOfTypeBefore:00000000 USB_GetNextDescriptorOfTypeBefore
C:\Users\Brian\AppData\Local\Temp\ccU8Ydsb.s:172    .text.USB_GetNextDescriptorOfTypeAfter:00000000 USB_GetNextDescriptorOfTypeAfter
C:\Users\Brian\AppData\Local\Temp\ccU8Ydsb.s:237    .text.USB_GetNextDescriptorComp:00000000 USB_GetNextDescriptorComp

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
