   1               		.file	"USBTask.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.USB_USBTask,"ax",@progbits
  14               	.global	USB_USBTask
  16               	USB_USBTask:
  17               	.LFB70:
  18               		.file 1 "../../LUFA/Drivers/USB/HighLevel/USBTask.c"
   1:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** /*
   2:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****              LUFA Library
   3:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
   5:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** */
   8:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
   9:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** /*
  10:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
  12:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
  21:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/HighLevel/USBTask.c ****   this software.
  29:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** */
  30:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
  31:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** #define  __INCLUDE_FROM_USBTASK_C
  32:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** #define  __INCLUDE_FROM_USB_DRIVER
  33:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** #include "USBTask.h"
  34:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
  35:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** volatile bool        USB_IsInitialized;
  36:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** USB_Request_Header_t USB_ControlRequest;
  37:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
  38:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** #if defined(USB_CAN_BE_HOST) && !defined(HOST_STATE_AS_GPIOR)
  39:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** volatile uint8_t     USB_HostState;
  40:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** #endif
  41:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
  42:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** #if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
  43:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** volatile uint8_t     USB_DeviceState;
  44:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** #endif
  45:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
  46:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** void USB_USBTask(void)
  47:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** {
  19               		.loc 1 47 0
  20               		.cfi_startproc
  21 0000 CF93      		push r28
  22               	.LCFI0:
  23               		.cfi_def_cfa_offset 3
  24               		.cfi_offset 28, -2
  25               	/* prologue: function */
  26               	/* frame size = 0 */
  27               	/* stack size = 1 */
  28               	.L__stack_usage = 1
  29               	.LBB22:
  30               	.LBB23:
  48:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 	#if defined(USB_HOST_ONLY)
  49:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 		USB_HostTask();
  50:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 	#elif defined(USB_DEVICE_ONLY)
  51:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 		USB_DeviceTask();
  52:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 	#else
  53:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 		if (USB_CurrentMode == USB_MODE_Device)
  54:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 		  USB_DeviceTask();
  55:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 		else if (USB_CurrentMode == USB_MODE_Host)
  56:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 		  USB_HostTask();
  57:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 	#endif
  58:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** }
  59:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
  60:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** #if defined(USB_CAN_BE_DEVICE)
  61:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** static void USB_DeviceTask(void)
  62:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** {
  63:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 	if (USB_DeviceState != DEVICE_STATE_Unattached)
  31               		.loc 1 63 0
  32 0002 8EB3      		in r24,62-32
  33 0004 8823      		tst r24
  34 0006 01F0      		breq .L1
  35               	.LBB24:
  36               	.LBB25:
  37               	.LBB26:
  38               		.file 2 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h"
   1:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /*
   2:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
   5:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** */
   8:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
   9:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /*
  10:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  12:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  21:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****   this software.
  29:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** */
  30:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  31:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \file
  32:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  34:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  37:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  40:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  41:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  42:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  43:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  44:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  45:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  46:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  47:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW
  48:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  49:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  50:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  from and to endpoints.
  52:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  53:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  54:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  55:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  56:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  57:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  58:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  59:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  60:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_USB
  61:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  62:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  63:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  64:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  65:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  66:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *
  67:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  *  @{
  68:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h ****  */
  69:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  70:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  71:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  72:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  73:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Includes: */
  74:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/io.h>
  75:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include <stdbool.h>
  76:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  77:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  78:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  79:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  80:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  81:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  82:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  83:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			extern "C" {
  84:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
  85:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  86:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  87:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  88:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  89:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		#endif
  90:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  91:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Private Interface - For use in library only: */
  92:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	#if !defined(__DOXYGEN__)
  93:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
  94:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  95:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  96:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  97:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
  98:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  99:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
 100:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 101:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 102:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 103:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 104:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 105:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 106:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 107:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 108:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 109:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 110:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 111:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 112:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#else
 113:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 114:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 115:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 116:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 117:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 118:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 119:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 120:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 121:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 122:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 123:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 124:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 125:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 126:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 127:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				uint8_t  MaskVal    = 0;
 128:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				uint16_t CheckBytes = 8;
 129:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 130:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				while (CheckBytes < Bytes)
 131:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				{
 132:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					MaskVal++;
 133:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					CheckBytes <<= 1;
 134:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				}
 135:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 136:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return (MaskVal << EPSIZE0);
 137:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 138:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 139:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Function Prototypes: */
 140:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			void Endpoint_ClearEndpoints(void);
 141:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 142:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG0XData,
 143:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG1XData);
 144:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 145:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	#endif
 146:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 147:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 148:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
 149:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 150:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 151:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 152:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                        (0 << EPDIR)
 153:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 154:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 155:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 156:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 157:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                         (1 << EPDIR)
 158:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 159:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 160:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 161:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 162:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank at the one time.
 163:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 164:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 165:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 166:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 167:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 168:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 169:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 170:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 171:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 172:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 173:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 174:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 175:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 176:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                      0
 177:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 178:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 179:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 180:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 181:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 */
 182:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 183:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 184:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 185:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 186:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 187:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 188:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                     0x07
 189:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 190:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 191:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 192:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 193:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                     0x80
 194:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 195:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 196:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank size in the device.
 197:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 198:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                    0x7F
 199:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 200:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 201:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 202:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 203:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 204:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 205:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 206:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the total number of banks supported by the given endpoint.
 207:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 208:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 209:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 210:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 211:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 212:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 213:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 214:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 215:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 216:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				 */
 217:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 218:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#else
 219:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 220:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			#endif
 221:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 222:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Enums: */
 223:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 224:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 225:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 226:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 227:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 228:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 229:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 230:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 231:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 232:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 233:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 234:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 235:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 236:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 237:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 238:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 239:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 240:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 241:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 242:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 243:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 244:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			};
 245:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 246:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 247:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 248:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 249:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  on its direction.
 250:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 251:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 252:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 253:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 254:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Type       Type of endpoint to configure, a EP_TYPE_* mask. Not all endpoint type
 255:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 256:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 257:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 258:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 259:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 260:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 261:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 262:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 263:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 264:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        that the endpoint can handle.
 265:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 266:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an ENDPOINT_
 267:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 268:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 269:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 270:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints <b>must</b> be configured in ascending order, or bank corruption will occur.
 271:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 272:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 273:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Certain models of USB AVR's endpoints may have different maximum packet sizes based on
 274:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        index - refer to the chosen USB AVR's datasheet to determine the maximum bank size for
 275:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 276:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 277:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 278:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        it is automatically configured by the library internally.
 279:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 280:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 281:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 282:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        which failed to reconfigure correctly will be selected.
 283:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 284:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the configuration succeeded, false otherwise.
 285:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 286:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 287:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 288:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 289:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 290:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 291:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 292:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 293:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 294:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 295:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Banks)
 296:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 297:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 298:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 299:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 300:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 301:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 302:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 303:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 304:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *        of the selected AVR model.
 305:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 306:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 307:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 308:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 309:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 310:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 311:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 312:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 313:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 314:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return UEBCX;
 315:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_4_AVR)
 316:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 317:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_2_AVR)
 318:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return UEBCLX;
 319:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 320:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 321:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 322:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 323:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 324:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  been manipulated.
 325:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 326:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Index of the currently selected endpoint.
 327:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 328:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 329:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 330:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 331:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 332:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
  39               		.loc 2 332 0
  40 0008 C091 E900 		lds r28,233
  41 000c C770      		andi r28,lo8(7)
  42               	.LVL0:
  43               	.LBE26:
  44               	.LBE25:
  45               	.LBB27:
  46               	.LBB28:
 333:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#else
 334:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					return ENDPOINT_CONTROLEP;
 335:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 336:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 337:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 338:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 339:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 340:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  number (and discarding the endpoint direction bit).
 341:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 342:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 343:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint.
 344:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 345:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 346:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 347:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 348:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 349:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 350:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 351:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
  47               		.loc 2 351 0
  48 000e 1092 E900 		sts 233,__zero_reg__
  49               	.LBE28:
  50               	.LBE27:
  51               	.LBB29:
  52               	.LBB30:
 352:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				#endif
 353:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 354:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 355:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 356:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  In and Out pointers to the bank's contents.
 357:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 358:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 359:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 360:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 361:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
 362:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 363:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = (1 << EndpointNumber);
 364:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UERST = 0;
 365:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 366:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 367:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 368:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  and from a host.
 369:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 370:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 371:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 372:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 373:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void)
 374:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 375:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << EPEN);
 376:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 377:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 378:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 379:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  to and from a host.
 380:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 381:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 382:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void)
 383:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 384:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				UECONX &= ~(1 << EPEN);
 385:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 386:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 387:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 388:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 389:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
 390:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 391:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 392:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void)
 393:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 394:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 395:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 396:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 397:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 398:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 399:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 400:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 401:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  direction and the endpoint bank is full.
 402:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 403:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 404:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 405:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depe
 406:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 407:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 408:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 409:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 410:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 411:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 412:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 413:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is configured.
 414:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 415:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise
 416:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 417:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void)
 419:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 420:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 421:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 422:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 423:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 424:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 425:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  masking the return value against (1 << {Endpoint Number}).
 426:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 427:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 428:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 429:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 430:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 431:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 432:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return UEINT;
 433:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 434:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 435:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 436:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoints).
 437:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 438:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 439:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 440:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the specified endpoint has interrupted, false otherwise.
 441:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 442:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 443:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 444:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 445:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINT & (1 << EndpointNumber)) ? true : false);
 446:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 447:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 448:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 449:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 450:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 451:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 452:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
 453:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 454:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 455:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void)
 456:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 457:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 458:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 459:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 460:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 461:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 462:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 463:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 464:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
 465:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 466:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 467:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 468:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 469:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 470:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			}
 471:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 
 472:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 473:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 474:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 475:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *
 476:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
 477:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			 */
 478:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 479:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 480:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 			{
 481:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
  53               		.loc 2 481 0
  54 0012 8091 E800 		lds r24,232
  55               	.LBE30:
  56               	.LBE29:
  64:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 	{
  65:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
  66:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
  67:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
  68:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 
  69:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 		if (Endpoint_IsSETUPReceived())
  57               		.loc 1 69 0
  58 0016 83FF      		sbrs r24,3
  59 0018 00C0      		rjmp .L3
  70:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** 		  USB_Device_ProcessControlRequest();
  60               		.loc 1 70 0
  61 001a 0E94 0000 		call USB_Device_ProcessControlRequest
  62               	.L3:
  63               	.LVL1:
  64               	.LBB31:
  65               	.LBB32:
 351:../../LUFA/Drivers/USB/HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
  66               		.loc 2 351 0
  67 001e C093 E900 		sts 233,r28
  68               	.LVL2:
  69               	.L1:
  70               	/* epilogue start */
  71               	.LBE32:
  72               	.LBE31:
  73               	.LBE24:
  74               	.LBE23:
  75               	.LBE22:
  58:../../LUFA/Drivers/USB/HighLevel/USBTask.c **** }
  76               		.loc 1 58 0
  77 0022 CF91      		pop r28
  78 0024 0895      		ret
  79               		.cfi_endproc
  80               	.LFE70:
  82               		.comm USB_ControlRequest,8,1
  83               		.comm USB_IsInitialized,1,1
  84               		.text
  85               	.Letext0:
  86               		.file 3 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.6.2/../..
  87               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdRequestType.h"
  88               		.file 5 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h"
DEFINED SYMBOLS
                            *ABS*:00000000 USBTask.c
C:\Users\Brian\AppData\Local\Temp\ccduAyxX.s:2      *ABS*:0000003f __SREG__
C:\Users\Brian\AppData\Local\Temp\ccduAyxX.s:3      *ABS*:0000003e __SP_H__
C:\Users\Brian\AppData\Local\Temp\ccduAyxX.s:4      *ABS*:0000003d __SP_L__
C:\Users\Brian\AppData\Local\Temp\ccduAyxX.s:5      *ABS*:00000034 __CCP__
C:\Users\Brian\AppData\Local\Temp\ccduAyxX.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Brian\AppData\Local\Temp\ccduAyxX.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Brian\AppData\Local\Temp\ccduAyxX.s:16     .text.USB_USBTask:00000000 USB_USBTask
                            *COM*:00000008 USB_ControlRequest
                            *COM*:00000001 USB_IsInitialized

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
USB_Device_ProcessControlRequest
