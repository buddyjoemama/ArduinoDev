   1               		.file	"HID.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.HID_Device_ProcessControlRequest,"ax",@progbits
  14               	.global	HID_Device_ProcessControlRequest
  16               	HID_Device_ProcessControlRequest:
  17               	.LFB72:
  18               		.file 1 "../../../../LUFA/Drivers/USB/Class/Device/HID.c"
   1:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** /*
   2:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****              LUFA Library
   3:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****      Copyright (C) Dean Camera, 2010.
   4:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
   5:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****       www.fourwalledcubicle.com
   7:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** */
   8:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
   9:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** /*
  10:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  12:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   software and its documentation for any purpose is hereby granted
  14:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   without fee, provided that the above copyright notice appear in
  15:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   all copies and that both that the copyright notice and this
  16:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   permission notice and warranty disclaimer appear in supporting
  17:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   documentation, and that the name of the author not be used in
  18:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   advertising or publicity pertaining to distribution of the
  19:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   software without specific, written prior permission.
  20:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  21:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   The author disclaim all warranties with regard to this
  22:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   software, including all implied warranties of merchantability
  23:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   and fitness.  In no event shall the author be liable for any
  24:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   special, indirect or consequential damages or any damages
  25:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   in an action of contract, negligence or other tortious action,
  27:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   arising out of or in connection with the use or performance of
  28:../../../../LUFA/Drivers/USB/Class/Device/HID.c ****   this software.
  29:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** */
  30:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  31:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** #include "../../HighLevel/USBMode.h"
  33:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** #if defined(USB_CAN_BE_DEVICE)
  34:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  35:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** #define  __INCLUDE_FROM_HID_DRIVER
  36:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** #include "HID.h"
  37:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  38:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
  39:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** {
  19               		.loc 1 39 0
  20               		.cfi_startproc
  21               	.LVL0:
  22 0000 6F92      		push r6
  23               	.LCFI0:
  24               		.cfi_def_cfa_offset 3
  25               		.cfi_offset 6, -2
  26 0002 7F92      		push r7
  27               	.LCFI1:
  28               		.cfi_def_cfa_offset 4
  29               		.cfi_offset 7, -3
  30 0004 8F92      		push r8
  31               	.LCFI2:
  32               		.cfi_def_cfa_offset 5
  33               		.cfi_offset 8, -4
  34 0006 9F92      		push r9
  35               	.LCFI3:
  36               		.cfi_def_cfa_offset 6
  37               		.cfi_offset 9, -5
  38 0008 AF92      		push r10
  39               	.LCFI4:
  40               		.cfi_def_cfa_offset 7
  41               		.cfi_offset 10, -6
  42 000a BF92      		push r11
  43               	.LCFI5:
  44               		.cfi_def_cfa_offset 8
  45               		.cfi_offset 11, -7
  46 000c CF92      		push r12
  47               	.LCFI6:
  48               		.cfi_def_cfa_offset 9
  49               		.cfi_offset 12, -8
  50 000e DF92      		push r13
  51               	.LCFI7:
  52               		.cfi_def_cfa_offset 10
  53               		.cfi_offset 13, -9
  54 0010 EF92      		push r14
  55               	.LCFI8:
  56               		.cfi_def_cfa_offset 11
  57               		.cfi_offset 14, -10
  58 0012 FF92      		push r15
  59               	.LCFI9:
  60               		.cfi_def_cfa_offset 12
  61               		.cfi_offset 15, -11
  62 0014 0F93      		push r16
  63               	.LCFI10:
  64               		.cfi_def_cfa_offset 13
  65               		.cfi_offset 16, -12
  66 0016 1F93      		push r17
  67               	.LCFI11:
  68               		.cfi_def_cfa_offset 14
  69               		.cfi_offset 17, -13
  70 0018 CF93      		push r28
  71               	.LCFI12:
  72               		.cfi_def_cfa_offset 15
  73               		.cfi_offset 28, -14
  74 001a DF93      		push r29
  75               	.LCFI13:
  76               		.cfi_def_cfa_offset 16
  77               		.cfi_offset 29, -15
  78 001c 00D0      		rcall .
  79 001e 0F92      		push __tmp_reg__
  80               	.LCFI14:
  81               		.cfi_def_cfa_offset 19
  82 0020 CDB7      		in r28,__SP_L__
  83 0022 DEB7      		in r29,__SP_H__
  84               	.LCFI15:
  85               		.cfi_def_cfa_register 28
  86               	/* prologue: function */
  87               	/* frame size = 3 */
  88               	/* stack size = 17 */
  89               	.L__stack_usage = 17
  90 0024 7C01      		movw r14,r24
  40:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (!(Endpoint_IsSETUPReceived()))
  41:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	  return;
  42:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  43:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
  44:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	  return;
  45:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  46:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	switch (USB_ControlRequest.bRequest)
  47:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	{
  48:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_GetReport:
  49:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
  50:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
  51:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint16_t ReportSize = 0;
  52:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
  53:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
  54:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
  55:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  56:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				memset(ReportData, 0, sizeof(ReportData));
  57:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  58:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &Repor
  59:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  60:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
  61:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.Prev
  62:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  63:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
  64:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  65:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
  66:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
  67:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearOUT();
  68:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
  69:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  70:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
  71:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_SetReport:
  72:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
  73:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
  74:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint16_t ReportSize = USB_ControlRequest.wLength;
  75:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
  76:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
  77:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportData[ReportSize];
  78:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  79:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
  80:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
  81:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearIN();
  82:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  83:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, Report
  84:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
  85:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  86:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
  87:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_GetProtocol:
  88:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
  89:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
  90:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
  91:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
  92:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearIN();
  93:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearStatusStage();
  94:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
  95:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
  96:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
  97:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_SetProtocol:
  98:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
  99:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 100:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
 101:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearStatusStage();
 102:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 103:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 104:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
 105:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 106:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
 107:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_SetIdle:
 108:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 109:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 110:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
 111:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearStatusStage();
 112:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 113:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 114:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
 115:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 116:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
 117:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		case HID_REQ_GetIdle:
 118:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 119:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			{
 120:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearSETUP();
 121:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
 122:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearIN();
 123:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearStatusStage();
 124:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			}
 125:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 126:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			break;
 127:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	}
 128:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** }
  91               		.loc 1 128 0
  92 0026 6DB6      		in r6,__SP_L__
  93 0028 7EB6      		in r7,__SP_H__
  94               	.LBB49:
  95               	.LBB50:
  96               		.file 2 "../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h"
   1:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /*
   2:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****              LUFA Library
   3:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
   5:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** */
   8:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
   9:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /*
  10:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  12:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in
  15:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in
  18:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the
  19:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  21:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   this software.
  29:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** */
  30:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  31:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \file
  32:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  34:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  37:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  40:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  41:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  42:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  43:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  44:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  45:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  46:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  47:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW
  48:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  49:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  50:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  from and to endpoints.
  52:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  53:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  54:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  55:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  56:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  57:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  58:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  59:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  60:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_USB
  61:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  62:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  63:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  64:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  65:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  66:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  67:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @{
  68:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  69:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  70:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  71:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  72:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  73:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Includes: */
  74:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/io.h>
  75:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include <stdbool.h>
  76:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  77:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  78:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  79:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  80:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  81:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  82:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  83:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			extern "C" {
  84:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  85:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  86:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  87:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  88:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  89:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  90:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  91:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Private Interface - For use in library only: */
  92:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	#if !defined(__DOXYGEN__)
  93:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
  94:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  95:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  96:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  97:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  98:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  99:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
 100:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 101:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 102:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 103:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 104:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 105:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 106:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 107:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 108:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 109:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 110:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 111:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 112:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#else
 113:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 114:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 115:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 116:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 117:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 118:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 119:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 120:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 121:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 122:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 123:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 124:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 125:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 126:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 127:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t  MaskVal    = 0;
 128:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint16_t CheckBytes = 8;
 129:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 130:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				while (CheckBytes < Bytes)
 131:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				{
 132:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					MaskVal++;
 133:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					CheckBytes <<= 1;
 134:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				}
 135:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 136:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return (MaskVal << EPSIZE0);
 137:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 138:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 139:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Function Prototypes: */
 140:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			void Endpoint_ClearEndpoints(void);
 141:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 142:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG0XData,
 143:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG1XData);
 144:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 145:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	#endif
 146:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 147:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 148:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
 149:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 150:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 151:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 152:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                        (0 << EPDIR)
 153:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 154:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 155:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 156:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 157:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                         (1 << EPDIR)
 158:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 159:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 160:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 161:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 162:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank at the one time.
 163:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 164:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 165:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 166:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 167:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 168:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 169:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 170:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 171:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 172:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 173:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 174:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 175:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 176:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                      0
 177:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 178:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 179:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 180:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 181:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				 */
 182:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 183:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 184:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 185:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 186:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 187:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 188:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                     0x07
 189:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 190:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 191:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 192:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 193:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                     0x80
 194:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 195:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 196:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank size in the device.
 197:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 198:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                    0x7F
 199:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 200:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 201:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 202:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 203:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 204:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 205:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 206:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the total number of banks supported by the given endpoint.
 207:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 208:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 209:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 210:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 211:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 212:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 213:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 214:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 215:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 216:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				 */
 217:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 218:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#else
 219:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 220:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 221:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 222:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Enums: */
 223:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 224:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 225:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 226:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 227:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 228:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 229:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 230:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 231:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 232:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 233:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 234:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 235:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 236:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 237:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 238:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 239:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 240:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 241:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 242:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 243:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 244:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			};
 245:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 246:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 247:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 248:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 249:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  on its direction.
 250:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 251:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 252:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 253:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 254:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Type       Type of endpoint to configure, a EP_TYPE_* mask. Not all endpoint type
 255:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 256:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 257:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 258:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 259:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 260:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 261:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 262:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 263:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 264:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *                        that the endpoint can handle.
 265:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 266:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an ENDPOINT_
 267:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 268:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 269:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 270:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints <b>must</b> be configured in ascending order, or bank corruption will occur.
 271:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 272:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 273:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Certain models of USB AVR's endpoints may have different maximum packet sizes based on
 274:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        index - refer to the chosen USB AVR's datasheet to determine the maximum bank size for
 275:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 276:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 277:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 278:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        it is automatically configured by the library internally.
 279:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 280:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 281:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 282:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        which failed to reconfigure correctly will be selected.
 283:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 284:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the configuration succeeded, false otherwise.
 285:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 286:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 287:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 288:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 289:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 290:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 291:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 292:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 293:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 294:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 295:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Banks)
 296:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 297:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 298:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 299:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 300:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 301:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 302:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 303:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 304:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        of the selected AVR model.
 305:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 306:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 307:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 308:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 309:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 310:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 311:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 312:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 313:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 314:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return UEBCX;
 315:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_4_AVR)
 316:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 317:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_2_AVR)
 318:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return UEBCLX;
 319:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 320:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 321:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 322:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 323:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 324:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  been manipulated.
 325:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 326:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Index of the currently selected endpoint.
 327:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 328:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 329:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 330:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 331:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 332:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 333:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 334:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return ENDPOINT_CONTROLEP;
 335:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 336:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 337:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 338:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 339:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 340:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  number (and discarding the endpoint direction bit).
 341:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 342:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 343:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint.
 344:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 345:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 346:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 347:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 348:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 349:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 350:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 351:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 352:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 353:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 354:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 355:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 356:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  In and Out pointers to the bank's contents.
 357:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 358:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 359:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 360:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 361:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
 362:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 363:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UERST = (1 << EndpointNumber);
 364:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UERST = 0;
 365:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 366:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 367:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 368:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  and from a host.
 369:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 370:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 371:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 372:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 373:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void)
 374:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 375:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << EPEN);
 376:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 377:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 378:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 379:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  to and from a host.
 380:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 381:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 382:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void)
 383:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 384:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX &= ~(1 << EPEN);
 385:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 386:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 387:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 388:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 389:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
 390:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 391:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 392:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void)
 393:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 394:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 395:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 396:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 397:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 398:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 399:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 400:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 401:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction and the endpoint bank is full.
 402:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 403:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 404:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 405:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depe
 406:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 407:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 408:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 409:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 410:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 411:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 412:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 413:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is configured.
 414:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 415:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise
 416:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 417:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void)
 419:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 420:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 421:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 422:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 423:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 424:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 425:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  masking the return value against (1 << {Endpoint Number}).
 426:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 427:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 428:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 429:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 430:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 431:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 432:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return UEINT;
 433:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 434:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 435:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 436:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoints).
 437:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 438:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 439:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 440:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the specified endpoint has interrupted, false otherwise.
 441:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 442:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 443:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 444:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 445:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINT & (1 << EndpointNumber)) ? true : false);
 446:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 447:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 448:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 449:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 450:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 451:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 452:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
 453:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 454:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 455:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void)
 456:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 457:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 458:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 459:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 460:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 461:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 462:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 463:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 464:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
 465:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 466:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 467:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 468:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 469:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 470:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 471:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 472:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 473:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 474:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 475:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 476:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
 477:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 478:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 479:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 480:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 481:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
  97               		.loc 2 481 0
  98 002a 8091 E800 		lds r24,232
  99               	.LVL1:
 100               	.LBE50:
 101               	.LBE49:
  40:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (!(Endpoint_IsSETUPReceived()))
 102               		.loc 1 40 0
 103 002e 83FF      		sbrs r24,3
 104 0030 00C0      		rjmp .L1
  43:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 105               		.loc 1 43 0
 106 0032 F701      		movw r30,r14
 107 0034 8081      		ld r24,Z
 108 0036 90E0      		ldi r25,lo8(0)
 109 0038 2091 0000 		lds r18,USB_ControlRequest+4
 110 003c 3091 0000 		lds r19,USB_ControlRequest+4+1
 111 0040 2817      		cp r18,r24
 112 0042 3907      		cpc r19,r25
 113 0044 01F0      		breq .+2
 114 0046 00C0      		rjmp .L1
  46:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	switch (USB_ControlRequest.bRequest)
 115               		.loc 1 46 0
 116 0048 8091 0000 		lds r24,USB_ControlRequest+1
 117 004c 8330      		cpi r24,lo8(3)
 118 004e 01F4      		brne .+2
 119 0050 00C0      		rjmp .L5
 120 0052 8430      		cpi r24,lo8(4)
 121 0054 00F4      		brsh .L9
 122 0056 8130      		cpi r24,lo8(1)
 123 0058 01F0      		breq .L3
 124 005a 8230      		cpi r24,lo8(2)
 125 005c 01F0      		breq .+2
 126 005e 00C0      		rjmp .L1
 127 0060 00C0      		rjmp .L14
 128               	.L9:
 129 0062 8A30      		cpi r24,lo8(10)
 130 0064 01F4      		brne .+2
 131 0066 00C0      		rjmp .L7
 132 0068 8B30      		cpi r24,lo8(11)
 133 006a 01F4      		brne .+2
 134 006c 00C0      		rjmp .L8
 135 006e 8930      		cpi r24,lo8(9)
 136 0070 01F0      		breq .+2
 137 0072 00C0      		rjmp .L1
 138 0074 00C0      		rjmp .L15
 139               	.L3:
  49:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 140               		.loc 1 49 0
 141 0076 8091 0000 		lds r24,USB_ControlRequest
 142 007a 813A      		cpi r24,lo8(-95)
 143 007c 01F0      		breq .+2
 144 007e 00C0      		rjmp .L1
 145 0080 8DB6      		in r8,__SP_L__
 146 0082 9EB6      		in r9,__SP_H__
 147               	.LBB51:
  51:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint16_t ReportSize = 0;
 148               		.loc 1 51 0
 149 0084 1B82      		std Y+3,__zero_reg__
 150 0086 1A82      		std Y+2,__zero_reg__
 151               	.LVL2:
  52:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 152               		.loc 1 52 0
 153 0088 8091 0000 		lds r24,USB_ControlRequest+2
 154 008c 0091 0000 		lds r16,USB_ControlRequest+3
 155 0090 8983      		std Y+1,r24
 156               	.LVL3:
  54:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 157               		.loc 1 54 0
 158 0092 F701      		movw r30,r14
 159 0094 4781      		ldd r20,Z+7
 160 0096 8DB7      		in r24,__SP_L__
 161 0098 9EB7      		in r25,__SP_H__
 162 009a 841B      		sub r24,r20
 163 009c 9109      		sbc r25,__zero_reg__
 164 009e 0FB6      		in __tmp_reg__,__SREG__
 165 00a0 F894      		cli
 166 00a2 9EBF      		out __SP_H__,r25
 167 00a4 0FBE      		out __SREG__,__tmp_reg__
 168 00a6 8DBF      		out __SP_L__,r24
 169 00a8 CDB6      		in r12,__SP_L__
 170 00aa DEB6      		in r13,__SP_H__
 171 00ac 0894      		sec
 172 00ae C11C      		adc r12,__zero_reg__
 173 00b0 D11C      		adc r13,__zero_reg__
  56:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				memset(ReportData, 0, sizeof(ReportData));
 174               		.loc 1 56 0
 175 00b2 BC2C      		mov r11,r12
 176 00b4 AD2C      		mov r10,r13
 177 00b6 C601      		movw r24,r12
 178 00b8 60E0      		ldi r22,lo8(0)
 179 00ba 70E0      		ldi r23,hi8(0)
 180 00bc 50E0      		ldi r21,lo8(0)
 181 00be 0E94 0000 		call memset
 182               	.LVL4:
  53:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 183               		.loc 1 53 0
 184 00c2 402F      		mov r20,r16
 185 00c4 4150      		subi r20,lo8(-(-1))
  58:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &Repor
 186               		.loc 1 58 0
 187 00c6 C701      		movw r24,r14
 188 00c8 BE01      		movw r22,r28
 189 00ca 6F5F      		subi r22,lo8(-(1))
 190 00cc 7F4F      		sbci r23,hi8(-(1))
 191 00ce 9601      		movw r18,r12
 192 00d0 8E01      		movw r16,r28
 193               	.LVL5:
 194 00d2 0E5F      		subi r16,lo8(-(2))
 195 00d4 1F4F      		sbci r17,hi8(-(2))
 196 00d6 0E94 0000 		call CALLBACK_HID_Device_CreateHIDReport
 197               	.LVL6:
  60:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 198               		.loc 1 60 0
 199 00da F701      		movw r30,r14
 200 00dc 8581      		ldd r24,Z+5
 201 00de 9681      		ldd r25,Z+6
 202 00e0 0097      		sbiw r24,0
 203 00e2 01F0      		breq .L10
  61:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.Prev
 204               		.loc 1 61 0
 205 00e4 4781      		ldd r20,Z+7
 206 00e6 B601      		movw r22,r12
 207 00e8 50E0      		ldi r21,lo8(0)
 208 00ea 0E94 0000 		call memcpy
 209               	.L10:
 210               	.LVL7:
 211               	.LBB52:
 212               	.LBB53:
 351:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 213               		.loc 2 351 0
 214 00ee 1092 E900 		sts 233,__zero_reg__
 215               	.LBE53:
 216               	.LBE52:
 217               	.LBB54:
 218               	.LBB55:
 482:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 483:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 484:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 485:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint for the next packet.
 486:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 487:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 488:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 489:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 490:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 491:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 492:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void)
 493:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 494:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 219               		.loc 2 494 0
 220 00f2 8091 E800 		lds r24,232
 221 00f6 877F      		andi r24,lo8(-9)
 222 00f8 8093 E800 		sts 232,r24
 223               	.LBE55:
 224               	.LBE54:
  66:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 225               		.loc 1 66 0
 226 00fc 6A81      		ldd r22,Y+2
 227 00fe 7B81      		ldd r23,Y+3
 228 0100 8B2D      		mov r24,r11
 229 0102 9A2D      		mov r25,r10
 230 0104 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 231               	.LBB56:
 232               	.LBB57:
 495:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 496:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 497:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 498:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 499:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 500:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 501:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 502:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 503:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void)
 504:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 505:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 506:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 507:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 508:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << TXINI);
 509:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 510:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 511:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 512:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 513:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 514:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 515:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 516:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 517:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 518:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void)
 519:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 520:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 521:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 233               		.loc 2 521 0
 234 0108 8091 E800 		lds r24,232
 235 010c 8B77      		andi r24,lo8(123)
 236 010e 8093 E800 		sts 232,r24
 237 0112 8DBE      		out __SP_L__,r8
 238 0114 9EBE      		out __SP_H__,r9
 239 0116 00C0      		rjmp .L1
 240               	.LVL8:
 241               	.L15:
 242               	.LBE57:
 243               	.LBE56:
 244               	.LBE51:
  72:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 245               		.loc 1 72 0
 246 0118 8091 0000 		lds r24,USB_ControlRequest
 247 011c 8132      		cpi r24,lo8(33)
 248 011e 01F0      		breq .+2
 249 0120 00C0      		rjmp .L1
 250 0122 AEB6      		in r10,__SP_H__
 251               	.LBB58:
  74:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint16_t ReportSize = USB_ControlRequest.wLength;
 252               		.loc 1 74 0
 253 0124 0091 0000 		lds r16,USB_ControlRequest+6
 254 0128 1091 0000 		lds r17,USB_ControlRequest+6+1
 255               	.LVL9:
  75:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 256               		.loc 1 75 0
 257 012c D090 0000 		lds r13,USB_ControlRequest+2
 258 0130 C090 0000 		lds r12,USB_ControlRequest+3
 259               	.LVL10:
  77:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportData[ReportSize];
 260               		.loc 1 77 0
 261 0134 8DB7      		in r24,__SP_L__
 262 0136 9EB7      		in r25,__SP_H__
 263 0138 801B      		sub r24,r16
 264 013a 910B      		sbc r25,r17
 265 013c 0FB6      		in __tmp_reg__,__SREG__
 266 013e F894      		cli
 267 0140 9EBF      		out __SP_H__,r25
 268 0142 0FBE      		out __SREG__,__tmp_reg__
 269 0144 8DBF      		out __SP_L__,r24
 270 0146 8DB6      		in r8,__SP_L__
 271 0148 9EB6      		in r9,__SP_H__
 272 014a 0894      		sec
 273 014c 811C      		adc r8,__zero_reg__
 274 014e 911C      		adc r9,__zero_reg__
 275               	.LBB59:
 276               	.LBB60:
 494:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 277               		.loc 2 494 0
 278 0150 8091 E800 		lds r24,232
 279 0154 877F      		andi r24,lo8(-9)
 280 0156 8093 E800 		sts 232,r24
 281               	.LBE60:
 282               	.LBE59:
  80:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 283               		.loc 1 80 0
 284 015a C401      		movw r24,r8
 285 015c B801      		movw r22,r16
 286 015e 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 287               	.LVL11:
 288               	.LBB61:
 289               	.LBB62:
 506:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 290               		.loc 2 506 0
 291 0162 8091 E800 		lds r24,232
 292 0166 8E77      		andi r24,lo8(126)
 293 0168 8093 E800 		sts 232,r24
 294               	.LBE62:
 295               	.LBE61:
  76:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 296               		.loc 1 76 0
 297 016c 4C2D      		mov r20,r12
 298 016e 4150      		subi r20,lo8(-(-1))
  83:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, Report
 299               		.loc 1 83 0
 300 0170 C701      		movw r24,r14
 301 0172 6D2D      		mov r22,r13
 302 0174 9401      		movw r18,r8
 303 0176 0E94 0000 		call CALLBACK_HID_Device_ProcessHIDReport
 304 017a 6DBE      		out __SP_L__,r6
 305 017c AEBE      		out __SP_H__,r10
 306 017e 00C0      		rjmp .L1
 307               	.LVL12:
 308               	.L5:
 309               	.LBE58:
  88:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 310               		.loc 1 88 0
 311 0180 8091 0000 		lds r24,USB_ControlRequest
 312 0184 813A      		cpi r24,lo8(-95)
 313 0186 01F0      		breq .+2
 314 0188 00C0      		rjmp .L1
 315               	.LBB63:
 316               	.LBB64:
 494:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 317               		.loc 2 494 0
 318 018a 8091 E800 		lds r24,232
 319 018e 877F      		andi r24,lo8(-9)
 320 0190 8093 E800 		sts 232,r24
 321               	.LBE64:
 322               	.LBE63:
  91:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
 323               		.loc 1 91 0
 324 0194 F701      		movw r30,r14
 325 0196 8085      		ldd r24,Z+8
 326               	.LVL13:
 327 0198 00C0      		rjmp .L13
 328               	.LVL14:
 329               	.L8:
  98:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 330               		.loc 1 98 0
 331 019a 8091 0000 		lds r24,USB_ControlRequest
 332 019e 8132      		cpi r24,lo8(33)
 333 01a0 01F0      		breq .+2
 334 01a2 00C0      		rjmp .L1
 335               	.LBB65:
 336               	.LBB66:
 494:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 337               		.loc 2 494 0
 338 01a4 8091 E800 		lds r24,232
 339 01a8 877F      		andi r24,lo8(-9)
 340 01aa 8093 E800 		sts 232,r24
 341               	.LBE66:
 342               	.LBE65:
 101:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearStatusStage();
 343               		.loc 1 101 0
 344 01ae 0E94 0000 		call Endpoint_ClearStatusStage
 103:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 345               		.loc 1 103 0
 346 01b2 9091 0000 		lds r25,USB_ControlRequest+2
 347 01b6 81E0      		ldi r24,lo8(1)
 348 01b8 9923      		tst r25
 349 01ba 01F4      		brne .L12
 350 01bc 80E0      		ldi r24,lo8(0)
 351               	.L12:
 352 01be F701      		movw r30,r14
 353 01c0 8087      		std Z+8,r24
 354 01c2 00C0      		rjmp .L1
 355               	.L7:
 108:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
 356               		.loc 1 108 0
 357 01c4 8091 0000 		lds r24,USB_ControlRequest
 358 01c8 8132      		cpi r24,lo8(33)
 359 01ca 01F4      		brne .L1
 360               	.LBB67:
 361               	.LBB68:
 494:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 362               		.loc 2 494 0
 363 01cc 8091 E800 		lds r24,232
 364 01d0 877F      		andi r24,lo8(-9)
 365 01d2 8093 E800 		sts 232,r24
 366               	.LBE68:
 367               	.LBE67:
 111:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearStatusStage();
 368               		.loc 1 111 0
 369 01d6 0E94 0000 		call Endpoint_ClearStatusStage
 113:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 370               		.loc 1 113 0
 371 01da 8091 0000 		lds r24,USB_ControlRequest+2
 372 01de 9091 0000 		lds r25,USB_ControlRequest+2+1
 373 01e2 8070      		andi r24,lo8(-256)
 374 01e4 36E0      		ldi r19,6
 375 01e6 9695      	1:	lsr r25
 376 01e8 8795      		ror r24
 377 01ea 3A95      		dec r19
 378 01ec 01F4      		brne 1b
 379 01ee F701      		movw r30,r14
 380 01f0 9287      		std Z+10,r25
 381 01f2 8187      		std Z+9,r24
 382 01f4 00C0      		rjmp .L1
 383               	.L14:
 118:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 384               		.loc 1 118 0
 385 01f6 8091 0000 		lds r24,USB_ControlRequest
 386 01fa 813A      		cpi r24,lo8(-95)
 387 01fc 01F4      		brne .L1
 388               	.LBB69:
 389               	.LBB70:
 494:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 390               		.loc 2 494 0
 391 01fe 8091 E800 		lds r24,232
 392 0202 877F      		andi r24,lo8(-9)
 393 0204 8093 E800 		sts 232,r24
 394               	.LBE70:
 395               	.LBE69:
 121:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
 396               		.loc 1 121 0
 397 0208 F701      		movw r30,r14
 398 020a 8185      		ldd r24,Z+9
 399 020c 9285      		ldd r25,Z+10
 400 020e 9695      		lsr r25
 401 0210 8795      		ror r24
 402 0212 9695      		lsr r25
 403 0214 8795      		ror r24
 404               	.L13:
 405               	.LBB71:
 406               	.LBB72:
 522:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 523:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << RXOUTI);
 524:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 525:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 526:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 527:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 528:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 529:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 530:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  aborted and the host can begin its own recovery sequence.
 531:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 532:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 533:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 534:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint.
 535:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 536:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 537:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 538:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 539:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void)
 540:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 541:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 542:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 543:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 544:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 545:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 546:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 547:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 548:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 549:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void)
 550:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 551:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQC);
 552:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 553:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 554:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 555:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 556:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 557:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 558:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
 559:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 560:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 561:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void)
 562:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 563:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 564:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 565:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 566:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 567:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 568:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void)
 569:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 570:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << RSTDT);
 571:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 572:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 573:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines the currently selected endpoint's direction.
 574:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 575:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
 576:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 577:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 578:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 579:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 580:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return (UECFG0X & ENDPOINT_DIR_IN);
 581:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 582:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 583:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Sets the direction of the currently selected endpoint.
 584:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 585:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
 586:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 587:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 588:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 589:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 590:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
 591:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 592:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 593:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 594:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 595:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 596:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 597:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 598:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 599:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 600:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void)
 601:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 602:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return UEDATX;
 603:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 604:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 605:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes one byte from the currently selected endpoint's bank, for IN direction endpoints.
 606:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 607:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 608:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 609:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
 610:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 611:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
 612:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte)
 613:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 614:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = Byte;
 407               		.loc 2 614 0
 408 0216 8093 F100 		sts 241,r24
 409               	.LBE72:
 410               	.LBE71:
 411               	.LBB73:
 412               	.LBB74:
 506:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 413               		.loc 2 506 0
 414 021a 8091 E800 		lds r24,232
 415 021e 8E77      		andi r24,lo8(126)
 416 0220 8093 E800 		sts 232,r24
 417               	.LBE74:
 418               	.LBE73:
 123:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 				Endpoint_ClearStatusStage();
 419               		.loc 1 123 0
 420 0224 0E94 0000 		call Endpoint_ClearStatusStage
 421               	.LVL15:
 422               	.L1:
 423               		.loc 1 128 0
 424 0228 0FB6      		in __tmp_reg__,__SREG__
 425 022a F894      		cli
 426 022c 7EBE      		out __SP_H__,r7
 427 022e 0FBE      		out __SREG__,__tmp_reg__
 428 0230 6DBE      		out __SP_L__,r6
 429               	/* epilogue start */
 430 0232 0F90      		pop __tmp_reg__
 431 0234 0F90      		pop __tmp_reg__
 432 0236 0F90      		pop __tmp_reg__
 433 0238 DF91      		pop r29
 434 023a CF91      		pop r28
 435 023c 1F91      		pop r17
 436 023e 0F91      		pop r16
 437 0240 FF90      		pop r15
 438 0242 EF90      		pop r14
 439               	.LVL16:
 440 0244 DF90      		pop r13
 441 0246 CF90      		pop r12
 442 0248 BF90      		pop r11
 443 024a AF90      		pop r10
 444 024c 9F90      		pop r9
 445 024e 8F90      		pop r8
 446 0250 7F90      		pop r7
 447 0252 6F90      		pop r6
 448 0254 0895      		ret
 449               		.cfi_endproc
 450               	.LFE72:
 452               		.section	.text.HID_Device_ConfigureEndpoints,"ax",@progbits
 453               	.global	HID_Device_ConfigureEndpoints
 455               	HID_Device_ConfigureEndpoints:
 456               	.LFB73:
 129:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 130:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
 131:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** {
 457               		.loc 1 131 0
 458               		.cfi_startproc
 459               	.LVL17:
 460 0000 CF93      		push r28
 461               	.LCFI16:
 462               		.cfi_def_cfa_offset 3
 463               		.cfi_offset 28, -2
 464 0002 DF93      		push r29
 465               	.LCFI17:
 466               		.cfi_def_cfa_offset 4
 467               		.cfi_offset 29, -3
 468               	/* prologue: function */
 469               	/* frame size = 0 */
 470               	/* stack size = 2 */
 471               	.L__stack_usage = 2
 472 0004 FC01      		movw r30,r24
 132:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 473               		.loc 1 132 0
 474 0006 0896      		adiw r24,8
 475               	.LVL18:
 476 0008 DC01      		movw r26,r24
 477 000a 85E0      		ldi r24,lo8(5)
 478 000c ED01      		movw r28,r26
 479 000e 1992      		st Y+,__zero_reg__
 480 0010 8A95      	        dec r24
 481 0012 01F4      		brne .-6
 133:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	HIDInterfaceInfo->State.UsingReportProtocol = true;
 482               		.loc 1 133 0
 483 0014 81E0      		ldi r24,lo8(1)
 484 0016 8087      		std Z+8,r24
 134:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	HIDInterfaceInfo->State.IdleCount = 500;
 485               		.loc 1 134 0
 486 0018 84EF      		ldi r24,lo8(500)
 487 001a 91E0      		ldi r25,hi8(500)
 488 001c 9287      		std Z+10,r25
 489 001e 8187      		std Z+9,r24
 135:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 136:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUP
 490               		.loc 1 136 0
 491 0020 8181      		ldd r24,Z+1
 492 0022 6281      		ldd r22,Z+2
 493 0024 7381      		ldd r23,Z+3
 494 0026 9481      		ldd r25,Z+4
 495 0028 9923      		tst r25
 496 002a 01F0      		breq .L20
 497 002c 44E0      		ldi r20,lo8(4)
 498 002e 00C0      		rjmp .L17
 499               	.L20:
 500 0030 40E0      		ldi r20,lo8(0)
 501               	.L17:
 502               	.LVL19:
 128:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint16_t CheckBytes = 8;
 503               		.loc 2 128 0 discriminator 3
 504 0032 28E0      		ldi r18,lo8(8)
 505 0034 30E0      		ldi r19,hi8(8)
 127:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t  MaskVal    = 0;
 506               		.loc 2 127 0 discriminator 3
 507 0036 90E0      		ldi r25,lo8(0)
 508 0038 00C0      		rjmp .L18
 509               	.LVL20:
 510               	.L19:
 511               	.LBB75:
 512               	.LBB76:
 513               	.LBB77:
 514               	.LBB78:
 132:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					MaskVal++;
 515               		.loc 2 132 0
 516 003a 9F5F      		subi r25,lo8(-(1))
 517               	.LVL21:
 133:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					CheckBytes <<= 1;
 518               		.loc 2 133 0
 519 003c 220F      		lsl r18
 520 003e 331F      		rol r19
 521               	.LVL22:
 522               	.L18:
 130:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				while (CheckBytes < Bytes)
 523               		.loc 2 130 0
 524 0040 2617      		cp r18,r22
 525 0042 3707      		cpc r19,r23
 526 0044 00F0      		brlo .L19
 527               	.LBE78:
 528               	.LBE77:
 297:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 529               		.loc 2 297 0
 530 0046 4260      		ori r20,lo8(2)
 531               	.LVL23:
 532               	.LBB80:
 533               	.LBB79:
 136:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return (MaskVal << EPSIZE0);
 534               		.loc 2 136 0
 535 0048 9295      		swap r25
 536               	.LVL24:
 537 004a 907F      		andi r25,lo8(-16)
 538               	.LBE79:
 539               	.LBE80:
 297:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 540               		.loc 2 297 0
 541 004c 492B      		or r20,r25
 542 004e 61EC      		ldi r22,lo8(-63)
 543 0050 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 544               	.LVL25:
 545               	/* epilogue start */
 546               	.LBE76:
 547               	.LBE75:
 137:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 									 ENDPOINT_DIR_IN, HIDInterfaceInfo->Config.ReportINEndpointSize,
 138:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 									 HIDInterfaceInfo->Config.ReportINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BAN
 139:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	{
 140:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		return false;
 141:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	}
 142:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 143:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	return true;
 144:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** }
 548               		.loc 1 144 0
 549 0054 DF91      		pop r29
 550 0056 CF91      		pop r28
 551 0058 0895      		ret
 552               		.cfi_endproc
 553               	.LFE73:
 555               		.section	.text.HID_Device_USBTask,"ax",@progbits
 556               	.global	HID_Device_USBTask
 558               	HID_Device_USBTask:
 559               	.LFB74:
 145:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 146:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
 147:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** {
 560               		.loc 1 147 0
 561               		.cfi_startproc
 562               	.LVL26:
 563 0000 4F92      		push r4
 564               	.LCFI18:
 565               		.cfi_def_cfa_offset 3
 566               		.cfi_offset 4, -2
 567 0002 5F92      		push r5
 568               	.LCFI19:
 569               		.cfi_def_cfa_offset 4
 570               		.cfi_offset 5, -3
 571 0004 6F92      		push r6
 572               	.LCFI20:
 573               		.cfi_def_cfa_offset 5
 574               		.cfi_offset 6, -4
 575 0006 7F92      		push r7
 576               	.LCFI21:
 577               		.cfi_def_cfa_offset 6
 578               		.cfi_offset 7, -5
 579 0008 8F92      		push r8
 580               	.LCFI22:
 581               		.cfi_def_cfa_offset 7
 582               		.cfi_offset 8, -6
 583 000a 9F92      		push r9
 584               	.LCFI23:
 585               		.cfi_def_cfa_offset 8
 586               		.cfi_offset 9, -7
 587 000c AF92      		push r10
 588               	.LCFI24:
 589               		.cfi_def_cfa_offset 9
 590               		.cfi_offset 10, -8
 591 000e BF92      		push r11
 592               	.LCFI25:
 593               		.cfi_def_cfa_offset 10
 594               		.cfi_offset 11, -9
 595 0010 CF92      		push r12
 596               	.LCFI26:
 597               		.cfi_def_cfa_offset 11
 598               		.cfi_offset 12, -10
 599 0012 DF92      		push r13
 600               	.LCFI27:
 601               		.cfi_def_cfa_offset 12
 602               		.cfi_offset 13, -11
 603 0014 EF92      		push r14
 604               	.LCFI28:
 605               		.cfi_def_cfa_offset 13
 606               		.cfi_offset 14, -12
 607 0016 FF92      		push r15
 608               	.LCFI29:
 609               		.cfi_def_cfa_offset 14
 610               		.cfi_offset 15, -13
 611 0018 0F93      		push r16
 612               	.LCFI30:
 613               		.cfi_def_cfa_offset 15
 614               		.cfi_offset 16, -14
 615 001a 1F93      		push r17
 616               	.LCFI31:
 617               		.cfi_def_cfa_offset 16
 618               		.cfi_offset 17, -15
 619 001c CF93      		push r28
 620               	.LCFI32:
 621               		.cfi_def_cfa_offset 17
 622               		.cfi_offset 28, -16
 623 001e DF93      		push r29
 624               	.LCFI33:
 625               		.cfi_def_cfa_offset 18
 626               		.cfi_offset 29, -17
 627 0020 00D0      		rcall .
 628 0022 0F92      		push __tmp_reg__
 629               	.LCFI34:
 630               		.cfi_def_cfa_offset 21
 631 0024 CDB7      		in r28,__SP_L__
 632 0026 DEB7      		in r29,__SP_H__
 633               	.LCFI35:
 634               		.cfi_def_cfa_register 28
 635               	/* prologue: function */
 636               	/* frame size = 3 */
 637               	/* stack size = 19 */
 638               	.L__stack_usage = 19
 639 0028 7C01      		movw r14,r24
 148:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 149:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	  return;
 150:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 151:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 152:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 153:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (Endpoint_IsReadWriteAllowed())
 154:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	{
 155:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 156:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint8_t  ReportID     = 0;
 157:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint16_t ReportINSize = 0;
 158:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 159:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		memset(ReportINData, 0, sizeof(ReportINData));
 160:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 161:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REP
 162:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		                                                             ReportINData, &ReportINSize);
 163:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool StatesChanged     = false;
 164:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRe
 165:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 166:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 167:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		{
 168:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize)
 169:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevR
 170:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		}
 171:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 172:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 173:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		{
 174:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 175:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 176:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 177:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 178:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (ReportID)
 179:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			  Endpoint_Write_Byte(ReportID);
 180:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 181:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
 182:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 
 183:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			Endpoint_ClearIN();
 184:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		}
 185:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	}
 186:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** }
 640               		.loc 1 186 0
 641 002a 4DB6      		in r4,__SP_L__
 642 002c 5EB6      		in r5,__SP_H__
 148:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 643               		.loc 1 148 0
 644 002e 8091 0000 		lds r24,USB_DeviceState
 645               	.LVL27:
 646 0032 8430      		cpi r24,lo8(4)
 647 0034 01F0      		breq .+2
 648 0036 00C0      		rjmp .L21
 151:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 649               		.loc 1 151 0
 650 0038 F701      		movw r30,r14
 651 003a 8181      		ldd r24,Z+1
 652               	.LVL28:
 653               	.LBB81:
 654               	.LBB82:
 351:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 655               		.loc 2 351 0
 656 003c 8093 E900 		sts 233,r24
 657               	.LBE82:
 658               	.LBE81:
 659               	.LBB83:
 660               	.LBB84:
 410:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 661               		.loc 2 410 0
 662 0040 8091 E800 		lds r24,232
 663               	.LBE84:
 664               	.LBE83:
 153:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 	if (Endpoint_IsReadWriteAllowed())
 665               		.loc 1 153 0
 666 0044 85FF      		sbrs r24,5
 667 0046 00C0      		rjmp .L21
 668 0048 7DB6      		in r7,__SP_L__
 669 004a 6EB6      		in r6,__SP_H__
 670               	.LVL29:
 671               	.LBB85:
 155:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 672               		.loc 1 155 0
 673 004c 4781      		ldd r20,Z+7
 674 004e 8DB7      		in r24,__SP_L__
 675 0050 9EB7      		in r25,__SP_H__
 676 0052 841B      		sub r24,r20
 677 0054 9109      		sbc r25,__zero_reg__
 678 0056 0FB6      		in __tmp_reg__,__SREG__
 679 0058 F894      		cli
 680 005a 9EBF      		out __SP_H__,r25
 681 005c 0FBE      		out __SREG__,__tmp_reg__
 682 005e 8DBF      		out __SP_L__,r24
 683 0060 0DB7      		in r16,__SP_L__
 684 0062 1EB7      		in r17,__SP_H__
 685 0064 0F5F      		subi r16,lo8(-(1))
 686 0066 1F4F      		sbci r17,hi8(-(1))
 156:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint8_t  ReportID     = 0;
 687               		.loc 1 156 0
 688 0068 1982      		std Y+1,__zero_reg__
 689               	.LVL30:
 157:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		uint16_t ReportINSize = 0;
 690               		.loc 1 157 0
 691 006a 1B82      		std Y+3,__zero_reg__
 692 006c 1A82      		std Y+2,__zero_reg__
 693               	.LVL31:
 159:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		memset(ReportINData, 0, sizeof(ReportINData));
 694               		.loc 1 159 0
 695 006e B02E      		mov r11,r16
 696 0070 A12E      		mov r10,r17
 697 0072 C801      		movw r24,r16
 698 0074 60E0      		ldi r22,lo8(0)
 699 0076 70E0      		ldi r23,hi8(0)
 700 0078 50E0      		ldi r21,lo8(0)
 701 007a 0E94 0000 		call memset
 702               	.LVL32:
 161:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REP
 703               		.loc 1 161 0
 704 007e C701      		movw r24,r14
 705 0080 BE01      		movw r22,r28
 706 0082 6F5F      		subi r22,lo8(-(1))
 707 0084 7F4F      		sbci r23,hi8(-(1))
 708 0086 40E0      		ldi r20,lo8(0)
 709 0088 9801      		movw r18,r16
 710 008a 8E01      		movw r16,r28
 711 008c 0E5F      		subi r16,lo8(-(2))
 712 008e 1F4F      		sbci r17,hi8(-(2))
 713 0090 0E94 0000 		call CALLBACK_HID_Device_CreateHIDReport
 714 0094 182F      		mov r17,r24
 715               	.LVL33:
 164:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRe
 716               		.loc 1 164 0
 717 0096 F701      		movw r30,r14
 718 0098 8185      		ldd r24,Z+9
 719 009a 9285      		ldd r25,Z+10
 720               	.LVL34:
 721 009c 0097      		sbiw r24,0
 722 009e 01F0      		breq .L31
 146:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
 723               		.loc 1 146 0 discriminator 1
 724 00a0 81E0      		ldi r24,lo8(1)
 725 00a2 90E0      		ldi r25,hi8(1)
 726 00a4 2385      		ldd r18,Z+11
 727 00a6 3485      		ldd r19,Z+12
 728 00a8 2115      		cp r18,__zero_reg__
 729 00aa 3105      		cpc r19,__zero_reg__
 730 00ac 01F0      		breq .L24
 731 00ae 80E0      		ldi r24,lo8(0)
 732 00b0 90E0      		ldi r25,hi8(0)
 733               	.L24:
 164:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRe
 734               		.loc 1 164 0 discriminator 1
 735 00b2 4C01      		movw r8,r24
 736 00b4 00C0      		rjmp .L23
 737               	.L31:
 164:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRe
 738               		.loc 1 164 0 is_stmt 0
 739 00b6 8824      		clr r8
 740 00b8 9924      		clr r9
 741               	.L23:
 742               	.LVL35:
 166:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 743               		.loc 1 166 0 is_stmt 1 discriminator 4
 744 00ba F701      		movw r30,r14
 745 00bc C580      		ldd r12,Z+5
 746 00be D680      		ldd r13,Z+6
 747 00c0 C114      		cp r12,__zero_reg__
 748 00c2 D104      		cpc r13,__zero_reg__
 749 00c4 01F0      		breq .L32
 168:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize)
 750               		.loc 1 168 0
 751 00c6 4A81      		ldd r20,Y+2
 752 00c8 5B81      		ldd r21,Y+3
 753 00ca 8B2D      		mov r24,r11
 754 00cc 9A2D      		mov r25,r10
 755 00ce B601      		movw r22,r12
 756 00d0 0E94 0000 		call memcmp
 757 00d4 01E0      		ldi r16,lo8(1)
 758 00d6 0097      		sbiw r24,0
 759 00d8 01F4      		brne .L26
 760 00da 00E0      		ldi r16,lo8(0)
 761               	.L26:
 762               	.LVL36:
 169:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevR
 763               		.loc 1 169 0
 764 00dc F701      		movw r30,r14
 765 00de 4781      		ldd r20,Z+7
 766 00e0 C601      		movw r24,r12
 767 00e2 6B2D      		mov r22,r11
 768 00e4 7A2D      		mov r23,r10
 769 00e6 50E0      		ldi r21,lo8(0)
 770 00e8 0E94 0000 		call memcpy
 771 00ec 00C0      		rjmp .L25
 772               	.LVL37:
 773               	.L32:
 163:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		bool StatesChanged     = false;
 774               		.loc 1 163 0
 775 00ee 00E0      		ldi r16,lo8(0)
 776               	.LVL38:
 777               	.L25:
 172:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 778               		.loc 1 172 0
 779 00f0 8A81      		ldd r24,Y+2
 780 00f2 9B81      		ldd r25,Y+3
 781 00f4 0097      		sbiw r24,0
 782 00f6 01F0      		breq .L28
 172:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 783               		.loc 1 172 0 is_stmt 0 discriminator 1
 784 00f8 1123      		tst r17
 785 00fa 01F4      		brne .L29
 786 00fc 0023      		tst r16
 787 00fe 01F4      		brne .L29
 788 0100 8114      		cp r8,__zero_reg__
 789 0102 9104      		cpc r9,__zero_reg__
 790 0104 01F0      		breq .L28
 791               	.L29:
 174:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 792               		.loc 1 174 0 is_stmt 1
 793 0106 F701      		movw r30,r14
 794 0108 8185      		ldd r24,Z+9
 795 010a 9285      		ldd r25,Z+10
 796 010c 9487      		std Z+12,r25
 797 010e 8387      		std Z+11,r24
 176:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 798               		.loc 1 176 0
 799 0110 8181      		ldd r24,Z+1
 800               	.LVL39:
 801               	.LBB86:
 802               	.LBB87:
 351:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 803               		.loc 2 351 0
 804 0112 8093 E900 		sts 233,r24
 805               	.LBE87:
 806               	.LBE86:
 178:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			if (ReportID)
 807               		.loc 1 178 0
 808 0116 8981      		ldd r24,Y+1
 809 0118 8823      		tst r24
 810 011a 01F0      		breq .L30
 811               	.LVL40:
 812               	.LBB88:
 813               	.LBB89:
 814               		.loc 2 614 0
 815 011c 8093 F100 		sts 241,r24
 816               	.LVL41:
 817               	.L30:
 818               	.LBE89:
 819               	.LBE88:
 181:../../../../LUFA/Drivers/USB/Class/Device/HID.c **** 			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
 820               		.loc 1 181 0
 821 0120 6A81      		ldd r22,Y+2
 822 0122 7B81      		ldd r23,Y+3
 823 0124 8B2D      		mov r24,r11
 824 0126 9A2D      		mov r25,r10
 825 0128 40E0      		ldi r20,lo8(0)
 826 012a 50E0      		ldi r21,hi8(0)
 827 012c 0E94 0000 		call Endpoint_Write_Stream_LE
 828               	.LVL42:
 829               	.LBB90:
 830               	.LBB91:
 506:../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 831               		.loc 2 506 0
 832 0130 8091 E800 		lds r24,232
 833 0134 8E77      		andi r24,lo8(126)
 834 0136 8093 E800 		sts 232,r24
 835               	.L28:
 836 013a 7DBE      		out __SP_L__,r7
 837 013c 6EBE      		out __SP_H__,r6
 838               	.LVL43:
 839               	.L21:
 840               	.LBE91:
 841               	.LBE90:
 842               	.LBE85:
 843               		.loc 1 186 0
 844 013e 0FB6      		in __tmp_reg__,__SREG__
 845 0140 F894      		cli
 846 0142 5EBE      		out __SP_H__,r5
 847 0144 0FBE      		out __SREG__,__tmp_reg__
 848 0146 4DBE      		out __SP_L__,r4
 849               	/* epilogue start */
 850 0148 0F90      		pop __tmp_reg__
 851 014a 0F90      		pop __tmp_reg__
 852 014c 0F90      		pop __tmp_reg__
 853 014e DF91      		pop r29
 854 0150 CF91      		pop r28
 855 0152 1F91      		pop r17
 856 0154 0F91      		pop r16
 857 0156 FF90      		pop r15
 858 0158 EF90      		pop r14
 859               	.LVL44:
 860 015a DF90      		pop r13
 861 015c CF90      		pop r12
 862 015e BF90      		pop r11
 863 0160 AF90      		pop r10
 864 0162 9F90      		pop r9
 865 0164 8F90      		pop r8
 866 0166 7F90      		pop r7
 867 0168 6F90      		pop r6
 868 016a 5F90      		pop r5
 869 016c 4F90      		pop r4
 870 016e 0895      		ret
 871               		.cfi_endproc
 872               	.LFE74:
 874               		.text
 875               	.Letext0:
 876               		.file 3 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.6.2/../..
 877               		.file 4 "../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/../HighLevel/StdReq
 878               		.file 5 "../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Device.h"
 879               		.file 6 "../../../../LUFA/Drivers/USB/Class/Device/../Common/HID.h"
 880               		.file 7 "../../../../LUFA/Drivers/USB/Class/Device/HID.h"
 881               		.file 8 "../../../../LUFA/Drivers/USB/Class/Device/../../HighLevel/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 HID.c
C:\Users\Brian\AppData\Local\Temp\ccCKXLca.s:2      *ABS*:0000003f __SREG__
C:\Users\Brian\AppData\Local\Temp\ccCKXLca.s:3      *ABS*:0000003e __SP_H__
C:\Users\Brian\AppData\Local\Temp\ccCKXLca.s:4      *ABS*:0000003d __SP_L__
C:\Users\Brian\AppData\Local\Temp\ccCKXLca.s:5      *ABS*:00000034 __CCP__
C:\Users\Brian\AppData\Local\Temp\ccCKXLca.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Brian\AppData\Local\Temp\ccCKXLca.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Brian\AppData\Local\Temp\ccCKXLca.s:16     .text.HID_Device_ProcessControlRequest:00000000 HID_Device_ProcessControlRequest
C:\Users\Brian\AppData\Local\Temp\ccCKXLca.s:455    .text.HID_Device_ConfigureEndpoints:00000000 HID_Device_ConfigureEndpoints
C:\Users\Brian\AppData\Local\Temp\ccCKXLca.s:558    .text.HID_Device_USBTask:00000000 HID_Device_USBTask

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
USB_ControlRequest
memset
CALLBACK_HID_Device_CreateHIDReport
memcpy
Endpoint_Write_Control_Stream_LE
Endpoint_Read_Control_Stream_LE
CALLBACK_HID_Device_ProcessHIDReport
Endpoint_ClearStatusStage
Endpoint_ConfigureEndpoint_Prv
USB_DeviceState
memcmp
Endpoint_Write_Stream_LE
