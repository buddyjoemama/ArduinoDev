   1               		.file	"Endpoint.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.Endpoint_ConfigureEndpoint_Prv,"ax",@progbits
  14               	.global	Endpoint_ConfigureEndpoint_Prv
  16               	Endpoint_ConfigureEndpoint_Prv:
  17               	.LFB70:
  18               		.file 1 "../../LUFA/Drivers/USB/LowLevel/Endpoint.c"
   1:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** /*
   2:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****              LUFA Library
   3:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
   5:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** */
   8:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
   9:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** /*
  10:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  12:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  21:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****   this software.
  29:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** */
  30:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  31:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** #include "../HighLevel/USBMode.h"
  33:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  34:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** #if defined(USB_CAN_BE_DEVICE)
  35:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  36:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** #include "Endpoint.h"
  37:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  38:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** #if !defined(FIXED_CONTROL_ENDPOINT_SIZE)
  39:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** uint8_t USB_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
  40:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** #endif
  41:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  42:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
  43:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****                                     const uint8_t UECFG0XData,
  44:../../LUFA/Drivers/USB/LowLevel/Endpoint.c ****                                     const uint8_t UECFG1XData)
  45:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** {
  19               		.loc 1 45 0
  20               		.cfi_startproc
  21               	.LVL0:
  22               	/* prologue: function */
  23               	/* frame size = 0 */
  24               	/* stack size = 0 */
  25               	.L__stack_usage = 0
  26               	.LBB34:
  27               	.LBB35:
  28               		.file 2 "../../LUFA/Drivers/USB/LowLevel/Endpoint.h"
   1:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** /*
   2:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
   5:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** */
   8:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
   9:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** /*
  10:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  12:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  21:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****   this software.
  29:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** */
  30:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  31:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** /** \file
  32:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *
  34:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *
  37:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  */
  40:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  41:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  42:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  43:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *
  44:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  45:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  */
  46:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  47:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW
  48:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  49:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *
  50:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  from and to endpoints.
  52:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  */
  53:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  54:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  55:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  56:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *
  57:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  58:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  */
  59:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  60:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** /** \ingroup Group_USB
  61:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  62:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *
  63:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  64:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  65:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  66:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *
  67:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  *  @{
  68:../../LUFA/Drivers/USB/LowLevel/Endpoint.h ****  */
  69:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  70:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  71:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  72:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  73:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 	/* Includes: */
  74:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		#include <avr/io.h>
  75:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		#include <stdbool.h>
  76:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  77:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  78:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  79:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  80:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  81:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  82:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  83:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			extern "C" {
  84:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		#endif
  85:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  86:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  87:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  88:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  89:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		#endif
  90:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  91:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 	/* Private Interface - For use in library only: */
  92:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 	#if !defined(__DOXYGEN__)
  93:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		/* Macros: */
  94:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  95:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  96:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  97:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
  98:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  99:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
 100:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 101:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 102:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 103:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 104:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 105:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 106:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 107:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 108:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 109:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 110:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 111:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 112:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#else
 113:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 114:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 115:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 116:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 117:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 118:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 119:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 120:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#endif
 121:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 122:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		/* Inline Functions: */
 123:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 124:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 125:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 126:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 127:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				uint8_t  MaskVal    = 0;
 128:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				uint16_t CheckBytes = 8;
 129:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 130:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				while (CheckBytes < Bytes)
 131:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				{
 132:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					MaskVal++;
 133:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					CheckBytes <<= 1;
 134:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				}
 135:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 136:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return (MaskVal << EPSIZE0);
 137:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 138:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 139:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		/* Function Prototypes: */
 140:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			void Endpoint_ClearEndpoints(void);
 141:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 142:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG0XData,
 143:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG1XData);
 144:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 145:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 	#endif
 146:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 147:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 148:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		/* Macros: */
 149:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 150:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 151:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 152:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                        (0 << EPDIR)
 153:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 154:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 155:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 156:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 157:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                         (1 << EPDIR)
 158:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 159:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 160:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 161:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 162:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  bank at the one time.
 163:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 164:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 165:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 166:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 167:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 168:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 169:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 170:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 171:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 172:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 173:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 174:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 175:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 176:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                      0
 177:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 178:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 179:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 180:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 181:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				 */
 182:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 183:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#endif
 184:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 185:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 186:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 187:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 188:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                     0x07
 189:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 190:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 191:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 192:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 193:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                     0x80
 194:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 195:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 196:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  bank size in the device.
 197:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 198:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                    0x7F
 199:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 200:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 201:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 202:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 203:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 204:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 205:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 206:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Indicates the total number of banks supported by the given endpoint.
 207:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 208:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 209:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 210:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 211:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 212:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 213:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 214:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 215:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 216:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				 */
 217:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 218:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#else
 219:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 220:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			#endif
 221:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 222:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		/* Enums: */
 223:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 224:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 225:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 226:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 227:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 228:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 229:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 230:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 231:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 232:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				                                                 */
 233:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 234:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 235:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				                                                 */
 236:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 237:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 238:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 239:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				                                                 */
 240:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 241:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 242:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 243:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				                                                 */
 244:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			};
 245:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 246:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 		/* Inline Functions: */
 247:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 248:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 249:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  on its direction.
 250:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 251:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 252:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 253:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 254:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \param[in] Type       Type of endpoint to configure, a EP_TYPE_* mask. Not all endpoint type
 255:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 256:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 257:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 258:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 259:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 260:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 261:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 262:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 263:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 264:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *                        that the endpoint can handle.
 265:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 266:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an ENDPOINT_
 267:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 268:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 269:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 270:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \note Endpoints <b>must</b> be configured in ascending order, or bank corruption will occur.
 271:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *        \n\n
 272:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 273:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \note Certain models of USB AVR's endpoints may have different maximum packet sizes based on
 274:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *        index - refer to the chosen USB AVR's datasheet to determine the maximum bank size for
 275:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *        \n\n
 276:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 277:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 278:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *        it is automatically configured by the library internally.
 279:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *        \n\n
 280:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 281:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 282:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *        which failed to reconfigure correctly will be selected.
 283:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 284:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return Boolean true if the configuration succeeded, false otherwise.
 285:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 286:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 287:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 288:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 289:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 290:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 291:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 292:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 293:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 294:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 295:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			                                              const uint8_t Banks)
 296:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 297:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 298:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 299:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 300:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 301:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 302:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 303:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 304:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *        of the selected AVR model.
 305:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 306:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 307:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 308:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 309:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 310:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 311:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 312:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 313:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 314:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					return UEBCX;
 315:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_4_AVR)
 316:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 317:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_2_AVR)
 318:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					return UEBCLX;
 319:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#endif
 320:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 321:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 322:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 323:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 324:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  been manipulated.
 325:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 326:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return Index of the currently selected endpoint.
 327:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 328:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 329:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 330:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 331:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 332:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 333:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#else
 334:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					return ENDPOINT_CONTROLEP;
 335:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#endif
 336:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 337:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 338:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 339:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 340:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  number (and discarding the endpoint direction bit).
 341:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 342:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 343:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  the currently selected endpoint.
 344:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 345:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 346:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 347:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 348:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 349:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 350:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 351:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
  29               		.loc 2 351 0
  30 0000 8093 E900 		sts 233,r24
  31               	.LBE35:
  32               	.LBE34:
  33               	.LBB36:
  34               	.LBB37:
 352:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#endif
 353:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 354:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 355:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 356:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  In and Out pointers to the bank's contents.
 357:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 358:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 359:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 360:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 361:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
 362:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 363:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				UERST = (1 << EndpointNumber);
 364:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				UERST = 0;
 365:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 366:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 367:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 368:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  and from a host.
 369:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 370:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 371:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 372:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 373:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void)
 374:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 375:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				UECONX |= (1 << EPEN);
  35               		.loc 2 375 0
  36 0004 EBEE      		ldi r30,lo8(235)
  37 0006 F0E0      		ldi r31,hi8(235)
  38 0008 8081      		ld r24,Z
  39               	.LVL1:
  40 000a 8160      		ori r24,lo8(1)
  41 000c 8083      		st Z,r24
  42               	.LBE37:
  43               	.LBE36:
  46:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	Endpoint_SelectEndpoint(Number);
  47:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	Endpoint_EnableEndpoint();
  48:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  49:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	UECFG1X = 0;
  44               		.loc 1 49 0
  45 000e EDEE      		ldi r30,lo8(237)
  46 0010 F0E0      		ldi r31,hi8(237)
  47 0012 1082      		st Z,__zero_reg__
  50:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	UECFG0X = UECFG0XData;
  48               		.loc 1 50 0
  49 0014 6093 EC00 		sts 236,r22
  51:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	UECFG1X = UECFG1XData;
  50               		.loc 1 51 0
  51 0018 4083      		st Z,r20
  52               	.LBB38:
  53               	.LBB39:
 376:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 377:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 378:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 379:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  to and from a host.
 380:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 381:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 382:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void)
 383:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 384:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				UECONX &= ~(1 << EPEN);
 385:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 386:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 387:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 388:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 389:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
 390:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 391:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 392:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void)
 393:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 394:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 395:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 396:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 397:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 398:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 399:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 400:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 401:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  direction and the endpoint bank is full.
 402:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 403:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 404:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 405:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depe
 406:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 407:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 408:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 409:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 410:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 411:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 412:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 413:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is configured.
 414:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 415:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise
 416:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 417:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void)
 419:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 420:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
  54               		.loc 2 420 0
  55 001a 8091 EE00 		lds r24,238
  56               	.LBE39:
  57               	.LBE38:
  52:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  53:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	return Endpoint_IsConfigured();
  54:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** }
  58               		.loc 1 54 0
  59 001e 881F      		rol r24
  60 0020 8827      		clr r24
  61 0022 881F      		rol r24
  62               	/* epilogue start */
  63 0024 0895      		ret
  64               		.cfi_endproc
  65               	.LFE70:
  67               		.section	.text.Endpoint_ClearEndpoints,"ax",@progbits
  68               	.global	Endpoint_ClearEndpoints
  70               	Endpoint_ClearEndpoints:
  71               	.LFB71:
  55:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  56:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** void Endpoint_ClearEndpoints(void)
  57:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** {
  72               		.loc 1 57 0
  73               		.cfi_startproc
  74               	/* prologue: function */
  75               	/* frame size = 0 */
  76               	/* stack size = 0 */
  77               	.L__stack_usage = 0
  58:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	UEINT = 0;
  78               		.loc 1 58 0
  79 0000 1092 F400 		sts 244,__zero_reg__
  80               	.LVL2:
  59:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  60:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
  81               		.loc 1 60 0
  82 0004 80E0      		ldi r24,lo8(0)
  83               	.LVL3:
  84               	.L3:
  85               	.LBB40:
  86               	.LBB41:
  87               	.LBB42:
 351:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
  88               		.loc 2 351 0
  89 0006 8093 E900 		sts 233,r24
  90               	.LBE42:
  91               	.LBE41:
  61:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	{
  62:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		Endpoint_SelectEndpoint(EPNum);
  63:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		UEIENX  = 0;
  92               		.loc 1 63 0
  93 000a 1092 F000 		sts 240,__zero_reg__
  64:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		UEINTX  = 0;
  94               		.loc 1 64 0
  95 000e 1092 E800 		sts 232,__zero_reg__
  65:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		UECFG1X = 0;
  96               		.loc 1 65 0
  97 0012 1092 ED00 		sts 237,__zero_reg__
  98               	.LBB43:
  99               	.LBB44:
 384:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				UECONX &= ~(1 << EPEN);
 100               		.loc 2 384 0
 101 0016 9091 EB00 		lds r25,235
 102 001a 9E7F      		andi r25,lo8(-2)
 103 001c 9093 EB00 		sts 235,r25
 104               	.LBE44:
 105               	.LBE43:
  60:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 106               		.loc 1 60 0
 107 0020 8F5F      		subi r24,lo8(-(1))
 108               	.LVL4:
 109 0022 8730      		cpi r24,lo8(7)
 110 0024 01F4      		brne .L3
 111               	/* epilogue start */
 112               	.LBE40:
  66:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		Endpoint_DisableEndpoint();
  67:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	}
  68:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** }
 113               		.loc 1 68 0
 114 0026 0895      		ret
 115               		.cfi_endproc
 116               	.LFE71:
 118               		.section	.text.Endpoint_ClearStatusStage,"ax",@progbits
 119               	.global	Endpoint_ClearStatusStage
 121               	Endpoint_ClearStatusStage:
 122               	.LFB72:
  69:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  70:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** void Endpoint_ClearStatusStage(void)
  71:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** {
 123               		.loc 1 71 0
 124               		.cfi_startproc
 125               	/* prologue: function */
 126               	/* frame size = 0 */
 127               	/* stack size = 0 */
 128               	.L__stack_usage = 0
  72:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 129               		.loc 1 72 0
 130 0000 8091 0000 		lds r24,USB_ControlRequest
 131 0004 87FF      		sbrs r24,7
 132 0006 00C0      		rjmp .L12
 133 0008 00C0      		rjmp .L11
 134               	.L9:
  73:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	{
  74:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		while (!(Endpoint_IsOUTReceived()))
  75:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		{
  76:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 135               		.loc 1 76 0
 136 000a 8EB3      		in r24,62-32
 137 000c 8823      		tst r24
 138 000e 01F0      		breq .L5
 139               	.L11:
 140               	.LBB45:
 141               	.LBB46:
 421:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 422:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 423:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 424:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 425:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  masking the return value against (1 << {Endpoint Number}).
 426:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 427:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 428:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 429:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 430:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 431:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 432:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return UEINT;
 433:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 434:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 435:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 436:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  endpoints).
 437:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 438:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 439:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 440:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return Boolean true if the specified endpoint has interrupted, false otherwise.
 441:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 442:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 443:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 444:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 445:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UEINT & (1 << EndpointNumber)) ? true : false);
 446:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 447:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 448:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 449:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 450:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 451:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 452:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
 453:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 454:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 455:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void)
 456:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 457:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 458:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 459:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 460:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 461:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 462:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 463:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 464:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
 465:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 466:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 467:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 468:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 469:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 142               		.loc 2 469 0 discriminator 1
 143 0010 8091 E800 		lds r24,232
 144               	.LBE46:
 145               	.LBE45:
  74:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		while (!(Endpoint_IsOUTReceived()))
 146               		.loc 1 74 0 discriminator 1
 147 0014 82FF      		sbrs r24,2
 148 0016 00C0      		rjmp .L9
 149               	.LBB47:
 150               	.LBB48:
 470:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 471:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 472:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 473:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 474:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 475:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 476:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
 477:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 478:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 479:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 480:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 481:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 482:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 483:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 484:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 485:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  endpoint for the next packet.
 486:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 487:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 488:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 489:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 490:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 491:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 492:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void)
 493:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 494:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
 495:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 496:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 497:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 498:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 499:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 500:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 501:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 502:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 503:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void)
 504:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 505:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 506:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 507:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#else
 508:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << TXINI);
 509:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#endif
 510:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 511:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 512:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 513:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 514:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 515:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 516:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 517:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 518:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void)
 519:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 520:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 521:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 151               		.loc 2 521 0
 152 0018 8091 E800 		lds r24,232
 153 001c 8B77      		andi r24,lo8(123)
 154 001e 8093 E800 		sts 232,r24
 155 0022 0895      		ret
 156               	.L10:
 157               	.LBE48:
 158               	.LBE47:
  77:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			  return;
  78:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		}
  79:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  80:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		Endpoint_ClearOUT();
  81:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	}
  82:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	else
  83:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	{
  84:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		while (!(Endpoint_IsINReady()))
  85:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		{
  86:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			if (USB_DeviceState == DEVICE_STATE_Unattached)
 159               		.loc 1 86 0
 160 0024 8EB3      		in r24,62-32
 161 0026 8823      		tst r24
 162 0028 01F0      		breq .L5
 163               	.L12:
 164               	.LBB49:
 165               	.LBB50:
 457:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 166               		.loc 2 457 0 discriminator 1
 167 002a 8091 E800 		lds r24,232
 168               	.LBE50:
 169               	.LBE49:
  84:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		while (!(Endpoint_IsINReady()))
 170               		.loc 1 84 0 discriminator 1
 171 002e 80FF      		sbrs r24,0
 172 0030 00C0      		rjmp .L10
 173               	.LBB51:
 174               	.LBB52:
 506:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 175               		.loc 2 506 0
 176 0032 8091 E800 		lds r24,232
 177 0036 8E77      		andi r24,lo8(126)
 178 0038 8093 E800 		sts 232,r24
 179               	.L5:
 180 003c 0895      		ret
 181               	.LBE52:
 182               	.LBE51:
 183               		.cfi_endproc
 184               	.LFE72:
 186               		.section	.text.Endpoint_WaitUntilReady,"ax",@progbits
 187               	.global	Endpoint_WaitUntilReady
 189               	Endpoint_WaitUntilReady:
 190               	.LFB73:
  87:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			  return;
  88:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		}
  89:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  90:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		Endpoint_ClearIN();
  91:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	}
  92:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** }
  93:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
  94:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** #if !defined(CONTROL_ONLY_DEVICE)
  95:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** uint8_t Endpoint_WaitUntilReady(void)
  96:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** {
 191               		.loc 1 96 0
 192               		.cfi_startproc
 193               	/* prologue: function */
 194               	/* frame size = 0 */
 195               	/* stack size = 0 */
 196               	.L__stack_usage = 0
 197               	.LVL5:
 198               	.LBB53:
 199               	.LBB54:
 200               		.file 3 "../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h"
   1:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /*
   2:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
   5:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** */
   8:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
   9:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /*
  10:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  12:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  21:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   this software.
  29:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** */
  30:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  31:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /** \file
  32:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  \brief USB device mode definitions.
  33:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  34:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  This file contains structures, function prototypes and macros related to USB device mode.
  35:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  36:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  38:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  */
  39:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  40:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /** \ingroup Group_USB
  41:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  @defgroup Group_Device Device Management
  42:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  43:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  USB Device mode related macros and enums. This module contains macros and enums which are used 
  44:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  the USB controller is initialized in device mode.
  45:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  46:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  @{
  47:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  */
  48:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  49:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** #ifndef __USBDEVICE_H__
  50:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** #define __USBDEVICE_H__
  51:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  52:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	/* Includes: */
  53:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include <avr/io.h>
  54:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include <avr/pgmspace.h>
  55:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include <avr/eeprom.h>
  56:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  57:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "../../../Common/Common.h"
  58:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "../HighLevel/StdDescriptors.h"
  59:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "USBInterrupt.h"
  60:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "Endpoint.h"
  61:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  62:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	/* Preprocessor Checks: */
  63:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  64:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  65:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#endif
  66:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  67:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  68:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  69:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#endif
  70:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  71:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	/* Public Interface - May be used in end-application: */
  72:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Macros: */
  73:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  74:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  75:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  76:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *
  77:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  78:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *        \n
  79:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *
  80:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  81:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *        when running in low speed mode - refer to the USB 2.0 specification.
  82:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 */
  83:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  84:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#endif
  85:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  86:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  87:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  88:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 */
  89:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
  90:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  91:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
  92:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
  93:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  be taken out of suspended mode, and communications should resume.
  94:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
  95:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
  96:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
  97:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
  98:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \note This macro should only be used if the device has indicated to the host that it
  99:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        supports the Remote Wakeup feature in the device descriptors, and should only be
 100:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        issued if the host is currently allowing remote wakeup events from the device (i.e.,
 101:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_RemoteWakeupEnabled flag is set). When the NO_DEVICE_REMOTE_WAKEUP compil
 102:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        time option is used, this macro is unavailable.
 103:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        \n\n
 104:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 105:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \note The USB clock must be running for this function to operate. If the stack is initialize
 106:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is runni
 107:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        before attempting to call this function.
 108:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 109:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \see \ref Group_Descriptors for more information on the RMWAKEUP feature and device descript
 110:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 */
 111:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			void USB_Device_SendRemoteWakeup(void);
 112:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 113:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Type Defines: */
 114:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			enum USB_Device_States_t
 115:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 116:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Unattached                   = 0, /**< Internally implemented by the library. This
 117:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is not currently connected 
 118:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 119:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Powered                      = 1, /**< Internally implemented by the library. This
 120:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is connected to a host, but
 121:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   yet begun.
 122:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 123:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Default                      = 2, /**< Internally implemented by the library. This
 124:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device's USB bus has been reset by
 125:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   now waiting for the host to begin the enume
 126:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 127:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Addressed                    = 3, /**< Internally implemented by the library. This
 128:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been addressed by the U
 129:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   yet configured.
 130:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 131:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Configured                   = 4, /**< May be implemented by the user project. Thi
 132:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been enumerated by the 
 133:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   for USB communications to begin.
 134:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 135:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Suspended                    = 5, /**< May be implemented by the user project. Thi
 136:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the USB bus has been suspended by the 
 137:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   should power down to a minimal power level 
 138:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   resumed.
 139:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 140:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			};
 141:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 142:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 143:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is 
 144:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  the frame number is incremented by one.
 145:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 */
 146:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void)
 147:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 148:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				return UDFNUM;
 201               		.loc 3 148 0
 202 0000 8091 E400 		lds r24,228
 203 0004 9091 E500 		lds r25,228+1
 204 0008 45E6      		ldi r20,lo8(101)
 205 000a 00C0      		rjmp .L27
 206               	.LVL6:
 207               	.L24:
 208               	.LBE54:
 209               	.LBE53:
 210               	.LBB55:
 211 000c C901      		movw r24,r18
 212               	.LVL7:
 213               	.L27:
 214               	.LBB56:
 215               	.LBB57:
 522:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#else
 523:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << RXOUTI);
 524:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				#endif
 525:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 526:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 527:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 528:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 529:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 530:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  aborted and the host can begin its own recovery sequence.
 531:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 532:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 533:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 534:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  endpoint.
 535:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 536:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 537:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 538:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 539:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void)
 540:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 541:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 542:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 543:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 544:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 545:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 546:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 547:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 548:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 549:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void)
 550:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 551:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQC);
 552:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 553:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 554:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 555:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 556:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 557:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 558:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
 559:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 560:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 561:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void)
 562:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 563:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 564:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 565:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 566:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 567:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 568:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void)
 569:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 570:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				UECONX |= (1 << RSTDT);
 571:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			}
 572:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 
 573:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			/** Determines the currently selected endpoint's direction.
 574:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *
 575:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
 576:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			 */
 577:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 578:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 579:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 			{
 580:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return (UECFG0X & ENDPOINT_DIR_IN);
 216               		.loc 2 580 0
 217 000e 2091 EC00 		lds r18,236
 218               	.LBE57:
 219               	.LBE56:
  97:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
  98:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
  99:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	#else
 100:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 101:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	#endif
 102:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
 103:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 104:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
 105:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	for (;;)
 106:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	{
 107:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 220               		.loc 1 107 0
 221 0012 20FF      		sbrs r18,0
 222 0014 00C0      		rjmp .L14
 223               	.LBB58:
 224               	.LBB59:
 457:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 225               		.loc 2 457 0
 226 0016 2091 E800 		lds r18,232
 227               	.LBE59:
 228               	.LBE58:
 108:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		{
 109:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			if (Endpoint_IsINReady())
 229               		.loc 1 109 0
 230 001a 20FF      		sbrs r18,0
 231 001c 00C0      		rjmp .L16
 232 001e 00C0      		rjmp .L20
 233               	.L14:
 234               	.LBB60:
 235               	.LBB61:
 469:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 236               		.loc 2 469 0
 237 0020 2091 E800 		lds r18,232
 238               	.LBE61:
 239               	.LBE60:
 110:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			  return ENDPOINT_READYWAIT_NoError;
 111:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		}
 112:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		else
 113:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		{
 114:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			if (Endpoint_IsOUTReceived())
 240               		.loc 1 114 0
 241 0024 22FD      		sbrc r18,2
 242 0026 00C0      		rjmp .L20
 243               	.L16:
 115:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			  return ENDPOINT_READYWAIT_NoError;
 116:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		}
 117:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
 118:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 244               		.loc 1 118 0
 245 0028 2EB3      		in r18,62-32
 246               	.LVL8:
 119:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
 120:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 247               		.loc 1 120 0
 248 002a 2223      		tst r18
 249 002c 01F0      		breq .L21
 121:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 122:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 250               		.loc 1 122 0
 251 002e 2530      		cpi r18,lo8(5)
 252 0030 01F0      		breq .L22
 253               	.LBB62:
 254               	.LBB63:
 563:../../LUFA/Drivers/USB/LowLevel/Endpoint.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 255               		.loc 2 563 0
 256 0032 2091 EB00 		lds r18,235
 257               	.LVL9:
 258               	.LBE63:
 259               	.LBE62:
 123:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		  return ENDPOINT_READYWAIT_BusSuspended;
 124:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		else if (Endpoint_IsStalled())
 260               		.loc 1 124 0
 261 0036 25FD      		sbrc r18,5
 262 0038 00C0      		rjmp .L23
 263               	.LBB64:
 264               	.LBB65:
 265               		.loc 3 148 0
 266 003a 2091 E400 		lds r18,228
 267 003e 3091 E500 		lds r19,228+1
 268               	.LBE65:
 269               	.LBE64:
 125:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		  return ENDPOINT_READYWAIT_EndpointStalled;
 126:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
 127:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 128:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
 129:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		if (CurrentFrameNumber != PreviousFrameNumber)
 270               		.loc 1 129 0
 271 0042 2817      		cp r18,r24
 272 0044 3907      		cpc r19,r25
 273 0046 01F0      		breq .L27
 274               	.LVL10:
 275 0048 4150      		subi r20,lo8(-(-1))
 130:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		{
 131:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			PreviousFrameNumber = CurrentFrameNumber;
 132:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 
 133:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			if (!(TimeoutMSRem--))
 276               		.loc 1 133 0
 277 004a 01F4      		brne .L24
 134:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			  return ENDPOINT_READYWAIT_Timeout;
 278               		.loc 1 134 0
 279 004c 84E0      		ldi r24,lo8(4)
 280 004e 0895      		ret
 281               	.LVL11:
 282               	.L20:
 115:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 			  return ENDPOINT_READYWAIT_NoError;
 283               		.loc 1 115 0
 284 0050 80E0      		ldi r24,lo8(0)
 285               	.LVL12:
 286 0052 0895      		ret
 287               	.LVL13:
 288               	.L21:
 121:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 289               		.loc 1 121 0
 290 0054 82E0      		ldi r24,lo8(2)
 291               	.LVL14:
 292 0056 0895      		ret
 293               	.LVL15:
 294               	.L22:
 123:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		  return ENDPOINT_READYWAIT_BusSuspended;
 295               		.loc 1 123 0
 296 0058 83E0      		ldi r24,lo8(3)
 297               	.LVL16:
 298 005a 0895      		ret
 299               	.LVL17:
 300               	.L23:
 125:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		  return ENDPOINT_READYWAIT_EndpointStalled;
 301               		.loc 1 125 0
 302 005c 81E0      		ldi r24,lo8(1)
 303               	.LVL18:
 304               	.LBE55:
 135:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 		}
 136:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** 	}
 137:../../LUFA/Drivers/USB/LowLevel/Endpoint.c **** }
 305               		.loc 1 137 0
 306 005e 0895      		ret
 307               		.cfi_endproc
 308               	.LFE73:
 310               		.text
 311               	.Letext0:
 312               		.file 4 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.6.2/../..
 313               		.file 5 "../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/../HighLevel/StdRequestType.h"
 314               		.file 6 "../../LUFA/Drivers/USB/LowLevel/../HighLevel/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Endpoint.c
C:\Users\Brian\AppData\Local\Temp\cchFE7Or.s:2      *ABS*:0000003f __SREG__
C:\Users\Brian\AppData\Local\Temp\cchFE7Or.s:3      *ABS*:0000003e __SP_H__
C:\Users\Brian\AppData\Local\Temp\cchFE7Or.s:4      *ABS*:0000003d __SP_L__
C:\Users\Brian\AppData\Local\Temp\cchFE7Or.s:5      *ABS*:00000034 __CCP__
C:\Users\Brian\AppData\Local\Temp\cchFE7Or.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Brian\AppData\Local\Temp\cchFE7Or.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Brian\AppData\Local\Temp\cchFE7Or.s:16     .text.Endpoint_ConfigureEndpoint_Prv:00000000 Endpoint_ConfigureEndpoint_Prv
C:\Users\Brian\AppData\Local\Temp\cchFE7Or.s:70     .text.Endpoint_ClearEndpoints:00000000 Endpoint_ClearEndpoints
C:\Users\Brian\AppData\Local\Temp\cchFE7Or.s:121    .text.Endpoint_ClearStatusStage:00000000 Endpoint_ClearStatusStage
C:\Users\Brian\AppData\Local\Temp\cchFE7Or.s:189    .text.Endpoint_WaitUntilReady:00000000 Endpoint_WaitUntilReady

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
USB_ControlRequest
