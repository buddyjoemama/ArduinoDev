   1               		.file	"USBInterrupt.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.USB_INT_DisableAllInterrupts,"ax",@progbits
  14               	.global	USB_INT_DisableAllInterrupts
  16               	USB_INT_DisableAllInterrupts:
  17               	.LFB70:
  18               		.file 1 "../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c"
   1:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** /*
   2:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****              LUFA Library
   3:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
   5:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** */
   8:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
   9:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** /*
  10:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  12:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  21:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c ****   this software.
  29:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** */
  30:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  31:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** #include "USBInterrupt.h"
  33:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  34:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** void USB_INT_DisableAllInterrupts(void)
  35:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** {
  19               		.loc 1 35 0
  20               		.cfi_startproc
  21               	/* prologue: function */
  22               	/* frame size = 0 */
  23               	/* stack size = 0 */
  24               	.L__stack_usage = 0
  36:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
  37:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
  38:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#elif defined(USB_SERIES_4_AVR)
  39:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	USBCON &= ~(1 << VBUSTE);
  25               		.loc 1 39 0
  26 0000 E8ED      		ldi r30,lo8(216)
  27 0002 F0E0      		ldi r31,hi8(216)
  28 0004 8081      		ld r24,Z
  29 0006 8E7F      		andi r24,lo8(-2)
  30 0008 8083      		st Z,r24
  40:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  41:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  42:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_BOTH)
  43:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	OTGIEN  = 0;
  44:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  45:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  46:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_HOST)
  47:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	UHIEN   = 0;
  48:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  49:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  50:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_DEVICE)
  51:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	UDIEN   = 0;
  31               		.loc 1 51 0
  32 000a 1092 E200 		sts 226,__zero_reg__
  33               	/* epilogue start */
  52:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  53:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** }
  34               		.loc 1 53 0
  35 000e 0895      		ret
  36               		.cfi_endproc
  37               	.LFE70:
  39               		.section	.text.USB_INT_ClearAllInterrupts,"ax",@progbits
  40               	.global	USB_INT_ClearAllInterrupts
  42               	USB_INT_ClearAllInterrupts:
  43               	.LFB71:
  54:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  55:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** void USB_INT_ClearAllInterrupts(void)
  56:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** {
  44               		.loc 1 56 0
  45               		.cfi_startproc
  46               	/* prologue: function */
  47               	/* frame size = 0 */
  48               	/* stack size = 0 */
  49               	.L__stack_usage = 0
  57:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
  58:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	USBINT  = 0;
  50               		.loc 1 58 0
  51 0000 1092 DA00 		sts 218,__zero_reg__
  59:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  60:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  61:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_BOTH)
  62:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	OTGINT  = 0;
  63:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  64:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  65:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_HOST)
  66:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	UHINT   = 0;
  67:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  68:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  69:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_DEVICE)
  70:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	UDINT   = 0;
  52               		.loc 1 70 0
  53 0004 1092 E100 		sts 225,__zero_reg__
  54               	/* epilogue start */
  71:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  72:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** }
  55               		.loc 1 72 0
  56 0008 0895      		ret
  57               		.cfi_endproc
  58               	.LFE71:
  60               		.section	.text.__vector_10,"ax",@progbits
  61               	.global	__vector_10
  63               	__vector_10:
  64               	.LFB72:
  73:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  74:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** ISR(USB_GEN_vect, ISR_BLOCK)
  75:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** {
  65               		.loc 1 75 0
  66               		.cfi_startproc
  67 0000 1F92      		push r1
  68               	.LCFI0:
  69               		.cfi_def_cfa_offset 3
  70               		.cfi_offset 1, -2
  71 0002 0F92      		push r0
  72               	.LCFI1:
  73               		.cfi_def_cfa_offset 4
  74               		.cfi_offset 0, -3
  75 0004 0FB6      		in r0,__SREG__
  76 0006 0F92      		push r0
  77 0008 1124      		clr __zero_reg__
  78 000a 2F93      		push r18
  79               	.LCFI2:
  80               		.cfi_def_cfa_offset 5
  81               		.cfi_offset 18, -4
  82 000c 3F93      		push r19
  83               	.LCFI3:
  84               		.cfi_def_cfa_offset 6
  85               		.cfi_offset 19, -5
  86 000e 4F93      		push r20
  87               	.LCFI4:
  88               		.cfi_def_cfa_offset 7
  89               		.cfi_offset 20, -6
  90 0010 5F93      		push r21
  91               	.LCFI5:
  92               		.cfi_def_cfa_offset 8
  93               		.cfi_offset 21, -7
  94 0012 6F93      		push r22
  95               	.LCFI6:
  96               		.cfi_def_cfa_offset 9
  97               		.cfi_offset 22, -8
  98 0014 7F93      		push r23
  99               	.LCFI7:
 100               		.cfi_def_cfa_offset 10
 101               		.cfi_offset 23, -9
 102 0016 8F93      		push r24
 103               	.LCFI8:
 104               		.cfi_def_cfa_offset 11
 105               		.cfi_offset 24, -10
 106 0018 9F93      		push r25
 107               	.LCFI9:
 108               		.cfi_def_cfa_offset 12
 109               		.cfi_offset 25, -11
 110 001a AF93      		push r26
 111               	.LCFI10:
 112               		.cfi_def_cfa_offset 13
 113               		.cfi_offset 26, -12
 114 001c BF93      		push r27
 115               	.LCFI11:
 116               		.cfi_def_cfa_offset 14
 117               		.cfi_offset 27, -13
 118 001e EF93      		push r30
 119               	.LCFI12:
 120               		.cfi_def_cfa_offset 15
 121               		.cfi_offset 30, -14
 122 0020 FF93      		push r31
 123               	.LCFI13:
 124               		.cfi_def_cfa_offset 16
 125               		.cfi_offset 31, -15
 126               	/* prologue: Signal */
 127               	/* frame size = 0 */
 128               	/* stack size = 15 */
 129               	.L__stack_usage = 15
  76:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_DEVICE)
  77:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
  78:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
 130               		.loc 1 78 0
 131 0022 8091 DA00 		lds r24,218
 132 0026 80FF      		sbrs r24,0
 133 0028 00C0      		rjmp .L4
 134               		.loc 1 78 0 is_stmt 0 discriminator 1
 135 002a 8091 D800 		lds r24,216
 136 002e 80FF      		sbrs r24,0
 137 0030 00C0      		rjmp .L4
  79:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
  80:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_VBUS);
 138               		.loc 1 80 0 is_stmt 1
 139 0032 8091 DA00 		lds r24,218
 140 0036 8E7F      		andi r24,lo8(-2)
 141 0038 8093 DA00 		sts 218,r24
 142               	.LBB22:
 143               	.LBB23:
 144               		.file 2 "../../LUFA/Drivers/USB/LowLevel/USBController.h"
   1:../../LUFA/Drivers/USB/LowLevel/USBController.h **** /*
   2:../../LUFA/Drivers/USB/LowLevel/USBController.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/LowLevel/USBController.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
   5:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/LowLevel/USBController.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/LowLevel/USBController.h **** */
   8:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
   9:../../LUFA/Drivers/USB/LowLevel/USBController.h **** /*
  10:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  12:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  21:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   this software.
  29:../../LUFA/Drivers/USB/LowLevel/USBController.h **** */
  30:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  31:../../LUFA/Drivers/USB/LowLevel/USBController.h **** /** \file
  32:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  \brief USB low level USB controller definitions.
  33:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  34:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  This file contains structures, function prototypes and macros related to the low level configur
  35:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  USB controller, to start, stop and reset the USB library core.
  36:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  37:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  */
  40:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  41:../../LUFA/Drivers/USB/LowLevel/USBController.h **** /** \ingroup Group_USB
  42:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  @defgroup Group_USBManagement USB Interface Management
  43:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  44:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  45:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  46:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  @{
  47:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  */
  48:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  49:../../LUFA/Drivers/USB/LowLevel/USBController.h **** #ifndef __USBCONTROLLER_H__
  50:../../LUFA/Drivers/USB/LowLevel/USBController.h **** #define __USBCONTROLLER_H__
  51:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  52:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Includes: */
  53:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <avr/io.h>
  54:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <avr/interrupt.h>
  55:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <stdbool.h>
  56:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  57:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  58:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  59:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../../../Common/Common.h"
  60:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  61:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/Events.h"
  62:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBTask.h"
  63:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "USBInterrupt.h"
  64:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  65:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  66:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Host.h"
  67:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "OTG.h"
  68:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Pipe.h"
  69:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/HostStandardReq.h"
  70:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/PipeStream.h"
  71:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  72:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  73:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  74:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Device.h"
  75:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Endpoint.h"
  76:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/DeviceStandardReq.h"
  77:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/EndpointStream.h"
  78:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  79:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  80:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(__cplusplus)
  82:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			extern "C" {
  83:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  84:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  85:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Preprocessor Checks and Defines: */
  86:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  89:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  90:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(F_CLOCK)
  91:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error F_CLOCK is not defined. You must define F_CLOCK to the frequency of the unprescaled input
  92:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  93:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  94:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if (F_CLOCK == 8000000)
  95:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  96:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  97:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
  98:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
  99:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 100:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
 101:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
 102:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 103:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
 104:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 105:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 106:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#elif (F_CLOCK == 16000000)
 107:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 108:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 109:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
 110:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 111:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 112:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 113:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 114:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 115:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 116:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 117:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 118:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
 119:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 120:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(USB_PLL_PSC)
 121:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error No PLL prescale value available for chosen F_CPU value and AVR model.
 122:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
 123:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 124:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Public Interface - May be used in end-application: */
 125:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Macros: */
 126:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 127:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  regulator should be enabled to regulate the data pin voltages to within the USB standard.
 128:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 129:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 130:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 131:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 132:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 133:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 134:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 135:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 136:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 137:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 138:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 139:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 140:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 141:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 142:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 143:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 144:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 145:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 146:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 147:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 148:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 149:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 150:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 151:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 152:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for a CONTROL type endpoint or pipe.
 153:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 154:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 155:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 156:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_CONTROL                    0x00
 157:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 158:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for an ISOCHRONOUS type endpoint or pipe.
 159:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 160:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 161:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 162:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_ISOCHRONOUS                0x01
 163:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 164:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for a BULK type endpoint or pipe.
 165:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 166:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 167:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 168:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_BULK                       0x02
 169:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 170:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for an INTERRUPT type endpoint or pipe.
 171:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 172:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 173:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 174:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_INTERRUPT                  0x03
 175:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 176:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 177:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 178:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 179:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 180:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 181:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  This value may be overridden in the user project makefile as the value of the
 182:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 183:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 184:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 185:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 186:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 187:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Inline Functions: */
 188:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 189:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Returns boolean true if the VBUS line is currently high (i.e. the USB host is supplying pow
 190:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  otherwise returns false.
 191:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 192:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 193:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 194:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 195:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void)
 196:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				{
 197:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 145               		.loc 2 197 0
 146 003c 8091 D900 		lds r24,217
 147               	.LBE23:
 148               	.LBE22:
  81:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  82:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		if (USB_VBUS_GetStatus())
 149               		.loc 1 82 0
 150 0040 80FF      		sbrs r24,0
 151 0042 00C0      		rjmp .L5
  83:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		{
  84:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			USB_DeviceState = DEVICE_STATE_Powered;
 152               		.loc 1 84 0
 153 0044 81E0      		ldi r24,lo8(1)
 154 0046 8EBB      		out 62-32,r24
  85:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			EVENT_USB_Device_Connect();
 155               		.loc 1 85 0
 156 0048 0E94 0000 		call EVENT_USB_Device_Connect
 157 004c 00C0      		rjmp .L4
 158               	.L5:
  86:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		}
  87:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		else
  88:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		{
  89:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			USB_DeviceState = DEVICE_STATE_Unattached;
 159               		.loc 1 89 0
 160 004e 1EBA      		out 62-32,__zero_reg__
  90:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			EVENT_USB_Device_Disconnect();
 161               		.loc 1 90 0
 162 0050 0E94 0000 		call EVENT_USB_Device_Disconnect
 163               	.L4:
  91:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		}
  92:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
  93:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
  94:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  95:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 164               		.loc 1 95 0
 165 0054 8091 E100 		lds r24,225
 166 0058 80FF      		sbrs r24,0
 167 005a 00C0      		rjmp .L6
 168               		.loc 1 95 0 is_stmt 0 discriminator 1
 169 005c 8091 E200 		lds r24,226
 170 0060 80FF      		sbrs r24,0
 171 0062 00C0      		rjmp .L6
  96:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
  97:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_SUSPI);
 172               		.loc 1 97 0 is_stmt 1
 173 0064 8091 E100 		lds r24,225
 174 0068 8E7F      		andi r24,lo8(-2)
 175 006a 8093 E100 		sts 225,r24
  98:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
  99:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Disable(USB_INT_SUSPI);
 176               		.loc 1 99 0
 177 006e 8091 E200 		lds r24,226
 178 0072 8E7F      		andi r24,lo8(-2)
 179 0074 8093 E200 		sts 226,r24
 100:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Enable(USB_INT_WAKEUPI);
 180               		.loc 1 100 0
 181 0078 8091 E200 		lds r24,226
 182 007c 8061      		ori r24,lo8(16)
 183 007e 8093 E200 		sts 226,r24
 184               	.LBB24:
 185               	.LBB25:
 198:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				}
 199:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 200:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 201:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 202:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 203:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 204:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 205:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 206:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Detach(void)
 207:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 208:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  |=  (1 << DETACH);
 209:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 210:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 211:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Attaches the device to the USB bus. This announces the device's presence to any attached
 212:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  USB host, starting the enumeration process. If no host is present, attaching the device
 213:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  will allow for enumeration once a host is connected to the device.
 214:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 215:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  This is inexplicably also required for proper operation while in host mode, to enable the
 216:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  attachment of a device to the host. This is despite the bit being located in the device-mode
 217:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  register and despite the datasheet making no mention of its requirement in host mode.
 218:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 219:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
 220:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Attach(void)
 221:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 222:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  &= ~(1 << DETACH);
 223:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 224:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 225:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Function Prototypes: */
 226:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Main function to initialize and start the USB interface. Once active, the USB interface will
 227:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  allow for device connection to a host when in device mode, or for device enumeration while i
 228:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  host mode.
 229:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 230:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  As the USB library relies on interrupts for the device and host mode enumeration processes,
 231:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  the user must enable global interrupts before or shortly after this function is called. In
 232:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  device mode, interrupts must be enabled within 500ms of this function being called to ensure
 233:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the host does not time out whilst enumerating the device. In host mode, interrupts may 
 234:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  enabled at the application's leisure however enumeration will not begin of an attached devic
 235:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  until after this has occurred.
 236:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 237:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  Calling this function when the USB interface is already initialized will cause a complete US
 238:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  interface reset and re-enumeration.
 239:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 240:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \param[in] Mode     This is a mask indicating what mode the USB interface is to be initializ
 241:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      from the \ref USB_Modes_t enum.
 242:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 243:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \param[in] Options  Mask indicating the options which should be used when initializing the U
 244:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      interface to control the USB interface's behaviour. This should be compr
 245:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      a USB_OPT_REG_* mask to control the regulator, a USB_OPT_*_PLL mask to c
 246:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      PLL, and a USB_DEVICE_OPT_* mask (when the device mode is enabled) to se
 247:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      mode speed.
 248:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 249:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note To reduce the FLASH requirements of the library if only device or host mode is require
 250:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        the mode can be statically set in the project makefile by defining the token USB_DEVIC
 251:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        (for device mode) or USB_HOST_ONLY (for host mode), passing the token to the compiler
 252:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        via the -D switch. If the mode is statically set, this parameter does not exist in the
 253:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        function prototype.
 254:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        \n\n
 255:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 256:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note To reduce the FLASH requirements of the library if only fixed settings are are require
 257:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        the options may be set statically in the same manner as the mode (see the Mode paramet
 258:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        this function). To statically set the USB options, pass in the USE_STATIC_OPTIONS toke
 259:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        defined to the appropriate options masks. When the options are statically set, this
 260:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        parameter does not exist in the function prototype.
 261:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        \n\n
 262:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 263:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note The mode parameter does not exist on devices where only one mode is possible, such as 
 264:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        AVR models which only implement the USB device mode in hardware.
 265:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 266:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \see Device.h for the USB_DEVICE_OPT_* masks.
 267:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 268:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_Init(
 269:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__)
 270:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               const uint8_t Mode
 271:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 272:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 273:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if (defined(USB_CAN_BE_BOTH) && !defined(USE_STATIC_OPTIONS)) || defined(__DOXYG
 274:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               ,
 275:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #elif (!defined(USB_CAN_BE_BOTH) && defined(USE_STATIC_OPTIONS))
 276:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               void
 277:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 278:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 279:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 280:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               const uint8_t Options
 281:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 282:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               );
 283:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 284:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Shuts down the USB interface. This turns off the USB interface after deallocating all USB FI
 285:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  memory, endpoints and pipes. When turned off, no USB functionality can be used until the int
 286:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  is restarted with the \ref USB_Init() function.
 287:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 288:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_ShutDown(void);
 289:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 290:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Resets the interface, when already initialized. This will re-enumerate the device if already
 291:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  to a host, or re-enumerate an already attached device when in host mode.
 292:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 293:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_ResetInterface(void);
 294:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 295:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Global Variables: */
 296:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (!defined(USB_HOST_ONLY) && !defined(USB_DEVICE_ONLY)) || defined(__DOXYGEN__)
 297:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Indicates the mode that the USB interface is currently initialized to, a value from the
 298:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \ref USB_Modes_t enum.
 299:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 300:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This variable should be treated as read-only in the user application, and never manua
 301:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        changed in value.
 302:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        \n\n
 303:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 304:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note When the controller is initialized into UID autodetection mode, this variable will ho
 305:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        currently selected USB mode (i.e. \ref USB_MODE_Device or \ref USB_MODE_Host). If the
 306:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        is fixed into a specific mode (either through the USB_DEVICE_ONLY or USB_HOST_ONLY co
 307:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        options, or a limitation of the USB controller in the chosen device model) this will 
 308:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        a constant of the appropriate value and will never evaluate to \ref USB_MODE_None eve
 309:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        USB interface is not initialized.
 310:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 311:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				extern volatile uint8_t USB_CurrentMode;
 312:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USB_HOST_ONLY)
 313:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_CurrentMode USB_MODE_Host
 314:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USB_DEVICE_ONLY)
 315:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_CurrentMode USB_MODE_Device
 316:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 317:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 318:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 319:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Indicates the current USB options that the USB interface was initialized with when \ref USB
 320:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  was called. This value will be one of the USB_MODE_* masks defined elsewhere in this module
 321:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 322:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This variable should be treated as read-only in the user application, and never manua
 323:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        changed in value.
 324:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 325:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				extern volatile uint8_t USB_Options;
 326:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USE_STATIC_OPTIONS)
 327:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_Options USE_STATIC_OPTIONS
 328:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 329:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 330:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Enums: */
 331:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Enum for the possible USB controller modes, for initialization via \ref USB_Init() and indic
 332:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  user application via \ref USB_CurrentMode.
 333:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 334:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			enum USB_Modes_t
 335:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 336:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USB_MODE_None   = 0, /**< Indicates that the controller is currently not initialized in any spe
 337:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USB_MODE_Device = 1, /**< Indicates that the controller is currently initialized in USB Device 
 338:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USB_MODE_Host   = 2, /**< Indicates that the controller is currently initialized in USB Host mo
 339:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USB_MODE_UID    = 3, /**< Indicates that the controller should determine the USB mode from the 
 340:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				                      *   USB connector.
 341:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				                      */
 342:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			};
 343:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 344:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Private Interface - For use in library only: */
 345:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	#if !defined(__DOXYGEN__)
 346:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Function Prototypes: */
 347:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(__INCLUDE_FROM_USB_CONTROLLER_C)
 348:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#if defined(USB_CAN_BE_DEVICE)
 349:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				static void USB_Init_Device(void);
 350:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#endif
 351:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 352:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#if defined(USB_CAN_BE_HOST)
 353:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				static void USB_Init_Host(void);
 354:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#endif
 355:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 356:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 357:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Inline Functions: */
 358:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
 359:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_On(void)
 360:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 361:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = USB_PLL_PSC;
 362:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR |= (1 << PLLE);
 363:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 364:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 365:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
 366:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_Off(void)
 367:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 368:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = 0;
 369:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 370:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 371:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline bool USB_PLL_IsReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 372:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline bool USB_PLL_IsReady(void)
 373:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 374:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				return ((PLLCSR  &   (1 << PLOCK)) ? true : false);
 375:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 376:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 377:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
 378:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_On(void)
 379:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 380:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 381:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  |=  (1 << UVREGE);
 382:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#else
 383:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   &= ~(1 << REGDIS);
 384:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 385:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 386:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 387:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
 388:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_Off(void)
 389:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 390:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 391:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  &= ~(1 << UVREGE);
 392:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#else
 393:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   |=  (1 << REGDIS);
 394:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 395:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 396:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 397:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 398:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
 399:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_On(void)
 400:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 401:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << OTGPADE);
 402:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 403:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 404:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
 405:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_Off(void)
 406:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 407:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << OTGPADE);
 408:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 409:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 410:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 411:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
 412:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Freeze(void)
 413:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 414:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << FRZCLK);
 186               		.loc 2 414 0
 187 0082 8091 D800 		lds r24,216
 188 0086 8062      		ori r24,lo8(32)
 189 0088 8093 D800 		sts 216,r24
 190               	.LBE25:
 191               	.LBE24:
 192               	.LBB26:
 193               	.LBB27:
 368:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = 0;
 194               		.loc 2 368 0
 195 008c 19BC      		out 73-32,__zero_reg__
 196               	.LBE27:
 197               	.LBE26:
 101:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 102:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_CLK_Freeze();
 103:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 104:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		if (!(USB_Options & USB_OPT_MANUAL_PLL))
 105:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		  USB_PLL_Off();
 106:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 107:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
 108:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_DeviceState = DEVICE_STATE_Unattached;
 109:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_Disconnect();
 110:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#else
 111:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_DeviceState = DEVICE_STATE_Suspended;
 198               		.loc 1 111 0
 199 008e 85E0      		ldi r24,lo8(5)
 200 0090 8EBB      		out 62-32,r24
 112:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_Suspend();
 201               		.loc 1 112 0
 202 0092 0E94 0000 		call EVENT_USB_Device_Suspend
 203               	.L6:
 113:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#endif
 114:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 115:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 116:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 204               		.loc 1 116 0
 205 0096 8091 E100 		lds r24,225
 206 009a 84FF      		sbrs r24,4
 207 009c 00C0      		rjmp .L7
 208               		.loc 1 116 0 is_stmt 0 discriminator 1
 209 009e 8091 E200 		lds r24,226
 210 00a2 84FF      		sbrs r24,4
 211 00a4 00C0      		rjmp .L7
 212               	.LBB28:
 213               	.LBB29:
 361:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = USB_PLL_PSC;
 214               		.loc 2 361 0 is_stmt 1
 215 00a6 80E1      		ldi r24,lo8(16)
 216 00a8 89BD      		out 73-32,r24
 362:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR |= (1 << PLLE);
 217               		.loc 2 362 0
 218 00aa 89B5      		in r24,73-32
 219 00ac 8260      		ori r24,lo8(2)
 220 00ae 89BD      		out 73-32,r24
 221               	.L8:
 222               	.LBE29:
 223               	.LBE28:
 117:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 118:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		if (!(USB_Options & USB_OPT_MANUAL_PLL))
 119:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		{
 120:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			USB_PLL_On();
 121:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 			while (!(USB_PLL_IsReady()));
 224               		.loc 1 121 0 discriminator 1
 225 00b0 09B4      		in __tmp_reg__,73-32
 226 00b2 00FE      		sbrs __tmp_reg__,0
 227 00b4 00C0      		rjmp .L8
 228               	.LBB30:
 229               	.LBB31:
 415:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 416:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 417:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
 418:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Unfreeze(void)
 419:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 420:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << FRZCLK);
 230               		.loc 2 420 0
 231 00b6 8091 D800 		lds r24,216
 232 00ba 8F7D      		andi r24,lo8(-33)
 233 00bc 8093 D800 		sts 216,r24
 234               	.LBE31:
 235               	.LBE30:
 122:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		}
 123:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 124:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_CLK_Unfreeze();
 125:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 126:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_WAKEUPI);
 236               		.loc 1 126 0
 237 00c0 8091 E100 		lds r24,225
 238 00c4 8F7E      		andi r24,lo8(-17)
 239 00c6 8093 E100 		sts 225,r24
 127:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 128:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Disable(USB_INT_WAKEUPI);
 240               		.loc 1 128 0
 241 00ca 8091 E200 		lds r24,226
 242 00ce 8F7E      		andi r24,lo8(-17)
 243 00d0 8093 E200 		sts 226,r24
 129:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Enable(USB_INT_SUSPI);
 244               		.loc 1 129 0
 245 00d4 8091 E200 		lds r24,226
 246 00d8 8160      		ori r24,lo8(1)
 247 00da 8093 E200 		sts 226,r24
 130:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 131:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		if (USB_ConfigurationNumber)
 248               		.loc 1 131 0
 249 00de 8091 0000 		lds r24,USB_ConfigurationNumber
 250 00e2 8823      		tst r24
 251 00e4 01F4      		brne .L16
 252               	.L9:
 253               	.LBB32:
 254               	.LBB33:
 255               		.file 3 "../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h"
   1:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /*
   2:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
   5:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** */
   8:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
   9:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /*
  10:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  12:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  21:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   this software.
  29:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** */
  30:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  31:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /** \file
  32:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  \brief USB device mode definitions.
  33:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  34:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  This file contains structures, function prototypes and macros related to USB device mode.
  35:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  36:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  38:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  */
  39:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  40:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /** \ingroup Group_USB
  41:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  @defgroup Group_Device Device Management
  42:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  43:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  USB Device mode related macros and enums. This module contains macros and enums which are used 
  44:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  the USB controller is initialized in device mode.
  45:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  46:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  @{
  47:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  */
  48:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  49:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** #ifndef __USBDEVICE_H__
  50:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** #define __USBDEVICE_H__
  51:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  52:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	/* Includes: */
  53:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include <avr/io.h>
  54:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include <avr/pgmspace.h>
  55:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include <avr/eeprom.h>
  56:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  57:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "../../../Common/Common.h"
  58:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "../HighLevel/StdDescriptors.h"
  59:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "USBInterrupt.h"
  60:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "Endpoint.h"
  61:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  62:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	/* Preprocessor Checks: */
  63:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  64:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  65:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#endif
  66:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  67:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  68:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  69:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#endif
  70:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  71:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	/* Public Interface - May be used in end-application: */
  72:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Macros: */
  73:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  74:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  75:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  76:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *
  77:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  78:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *        \n
  79:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *
  80:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  81:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *        when running in low speed mode - refer to the USB 2.0 specification.
  82:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 */
  83:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  84:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#endif
  85:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  86:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  87:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  88:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 */
  89:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
  90:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  91:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
  92:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
  93:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  be taken out of suspended mode, and communications should resume.
  94:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
  95:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
  96:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
  97:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
  98:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \note This macro should only be used if the device has indicated to the host that it
  99:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        supports the Remote Wakeup feature in the device descriptors, and should only be
 100:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        issued if the host is currently allowing remote wakeup events from the device (i.e.,
 101:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_RemoteWakeupEnabled flag is set). When the NO_DEVICE_REMOTE_WAKEUP compil
 102:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        time option is used, this macro is unavailable.
 103:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        \n\n
 104:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 105:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \note The USB clock must be running for this function to operate. If the stack is initialize
 106:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is runni
 107:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        before attempting to call this function.
 108:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 109:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \see \ref Group_Descriptors for more information on the RMWAKEUP feature and device descript
 110:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 */
 111:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			void USB_Device_SendRemoteWakeup(void);
 112:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 113:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Type Defines: */
 114:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			enum USB_Device_States_t
 115:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 116:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Unattached                   = 0, /**< Internally implemented by the library. This
 117:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is not currently connected 
 118:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 119:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Powered                      = 1, /**< Internally implemented by the library. This
 120:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is connected to a host, but
 121:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   yet begun.
 122:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 123:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Default                      = 2, /**< Internally implemented by the library. This
 124:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device's USB bus has been reset by
 125:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   now waiting for the host to begin the enume
 126:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 127:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Addressed                    = 3, /**< Internally implemented by the library. This
 128:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been addressed by the U
 129:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   yet configured.
 130:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 131:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Configured                   = 4, /**< May be implemented by the user project. Thi
 132:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been enumerated by the 
 133:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   for USB communications to begin.
 134:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 135:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Suspended                    = 5, /**< May be implemented by the user project. Thi
 136:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the USB bus has been suspended by the 
 137:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   should power down to a minimal power level 
 138:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   resumed.
 139:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 140:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			};
 141:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 142:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 143:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is 
 144:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  the frame number is incremented by one.
 145:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 */
 146:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void)
 147:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 148:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				return UDFNUM;
 149:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			}
 150:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 151:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#if !defined(NO_SOF_EVENTS)
 152:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				/** Enables the device mode Start Of Frame events. When enabled, this causes the
 153:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to th
 154:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  at the start of each USB frame when enumerated in device mode.
 155:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *
 156:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \note Not available when the NO_SOF_EVENTS compile time token is defined.
 157:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 */
 158:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 159:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				static inline void USB_Device_EnableSOFEvents(void)
 160:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				{
 161:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 					USB_INT_Enable(USB_INT_SOFI);
 162:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				}
 163:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 164:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				/** Disables the device mode Start Of Frame events. When disabled, this stops the firing of the
 165:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \ref EVENT_USB_Device_StartOfFrame() event when enumerated in device mode.
 166:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *
 167:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \note Not available when the NO_SOF_EVENTS compile time token is defined.
 168:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 */
 169:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				static inline void USB_Device_DisableSOFEvents(void) ATTR_ALWAYS_INLINE;
 170:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				static inline void USB_Device_DisableSOFEvents(void)
 171:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				{
 172:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 					USB_INT_Disable(USB_INT_SOFI);
 173:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				}
 174:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#endif
 175:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 176:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
 177:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			/** Function to retrieve a given descriptor's size and memory location from the given descriptor
 178:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  index and language ID. This function MUST be overridden in the user application (added with 
 179:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  prototype and name so that the library can call it to retrieve descriptor data.
 180:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 181:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \param[in] wValue               The type of the descriptor to retrieve in the upper byte, an
 182:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  lower byte (when more than one descriptor of the given type 
 183:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  case of string descriptors). The type may be one of the stan
 184:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  in the DescriptorTypes_t enum, or may be a class-specific de
 185:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \param[in] wIndex               The language ID of the string to return if the wValue type i
 186:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  otherwise zero for standard descriptors, or as defined in a 
 187:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  standards.
 188:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \param[out] DescriptorAddress   Pointer to the descriptor in memory. This should be set by t
 189:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  the address of the descriptor.
 190:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \param[out] MemoryAddressSpace  A value from the \ref USB_DescriptorMemorySpaces_t enum to i
 191:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  space in which the descriptor is stored. This parameter does
 192:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  of the USE_*_DESCRIPTORS compile time options is used.
 193:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 194:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \note By default, the library expects all descriptors to be located in flash memory via the 
 195:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        If descriptors should be located in RAM or EEPROM instead (to speed up access in the c
 196:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        allow the descriptors to be changed dynamically at runtime) either the USE_RAM_DESCRIP
 197:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        USE_EEPROM_DESCRIPTORS tokens may be defined in the project makefile and passed to the
 198:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        switch.
 199:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 200:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \return Size in bytes of the descriptor if it exists, zero or \ref NO_DESCRIPTOR otherwise.
 201:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 */
 202:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 203:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			                                    const uint8_t wIndex,
 204:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			                                    const void** const DescriptorAddress
 205:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESC
 206:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			                                    , uint8_t* MemoryAddressSpace
 207:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#endif
 208:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			                                    ) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(3);
 209:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 210:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	/* Private Interface - For use in library only: */
 211:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	#if !defined(__DOXYGEN__)
 212:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 213:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 214:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetLowSpeed(void) ATTR_ALWAYS_INLINE;
 215:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetLowSpeed(void)
 216:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 217:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				UDCON |=  (1 << LSM);
 218:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			}
 219:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 220:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
 221:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetFullSpeed(void)
 222:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 223:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				UDCON &= ~(1 << LSM);
 224:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			}
 225:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#endif
 226:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 227:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
 228:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
 229:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 230:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 231:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				UDADDR |= (1 << ADDEN);
 232:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			}
 233:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 234:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
 235:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline bool USB_Device_IsAddressSet(void)
 236:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 237:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				return (UDADDR & (1 << ADDEN));
 256               		.loc 3 237 0
 257 00e6 8091 E300 		lds r24,227
 258               	.LBE33:
 259               	.LBE32:
 132:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		  USB_DeviceState = DEVICE_STATE_Configured;
 133:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		else
 134:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 260               		.loc 1 134 0
 261 00ea 87FF      		sbrs r24,7
 262 00ec 00C0      		rjmp .L14
 263               	.L16:
 264 00ee 84E0      		ldi r24,lo8(4)
 265 00f0 00C0      		rjmp .L11
 266               	.L14:
 267 00f2 81E0      		ldi r24,lo8(1)
 268               	.L11:
 269               		.loc 1 134 0 is_stmt 0 discriminator 3
 270 00f4 8EBB      		out 62-32,r24
 135:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 136:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
 137:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_Connect();
 138:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#else
 139:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_WakeUp();
 271               		.loc 1 139 0 is_stmt 1 discriminator 3
 272 00f6 0E94 0000 		call EVENT_USB_Device_WakeUp
 273               	.L7:
 140:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#endif
 141:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 142:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 143:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 274               		.loc 1 143 0
 275 00fa 8091 E100 		lds r24,225
 276 00fe 83FF      		sbrs r24,3
 277 0100 00C0      		rjmp .L12
 278               		.loc 1 143 0 is_stmt 0 discriminator 1
 279 0102 8091 E200 		lds r24,226
 280 0106 83FF      		sbrs r24,3
 281 0108 00C0      		rjmp .L12
 144:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 145:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_EORSTI);
 282               		.loc 1 145 0 is_stmt 1
 283 010a 8091 E100 		lds r24,225
 284 010e 877F      		andi r24,lo8(-9)
 285 0110 8093 E100 		sts 225,r24
 146:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 147:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_DeviceState         = DEVICE_STATE_Default;
 286               		.loc 1 147 0
 287 0114 82E0      		ldi r24,lo8(2)
 288 0116 8EBB      		out 62-32,r24
 148:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_ConfigurationNumber = 0;
 289               		.loc 1 148 0
 290 0118 1092 0000 		sts USB_ConfigurationNumber,__zero_reg__
 149:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 150:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_SUSPI);
 291               		.loc 1 150 0
 292 011c 8091 E100 		lds r24,225
 293 0120 8E7F      		andi r24,lo8(-2)
 294 0122 8093 E100 		sts 225,r24
 151:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Disable(USB_INT_SUSPI);
 295               		.loc 1 151 0
 296 0126 8091 E200 		lds r24,226
 297 012a 8E7F      		andi r24,lo8(-2)
 298 012c 8093 E200 		sts 226,r24
 152:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Enable(USB_INT_WAKEUPI);
 299               		.loc 1 152 0
 300 0130 8091 E200 		lds r24,226
 301 0134 8061      		ori r24,lo8(16)
 302 0136 8093 E200 		sts 226,r24
 303               	.LVL0:
 304               	.LBB34:
 305               	.LBB35:
 306               		.file 4 "../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h"
   1:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /*
   2:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
   5:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** */
   8:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
   9:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /*
  10:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  12:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  21:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   this software.
  29:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** */
  30:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  31:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \file
  32:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  34:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  37:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  40:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  41:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  42:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  43:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  44:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  45:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  46:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  47:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW
  48:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  49:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  50:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  from and to endpoints.
  52:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  53:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  54:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  55:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  56:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  57:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  58:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  59:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  60:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_USB
  61:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  62:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  63:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  64:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  65:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  66:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  67:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @{
  68:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  69:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  70:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  71:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  72:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  73:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Includes: */
  74:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/io.h>
  75:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include <stdbool.h>
  76:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  77:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  78:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  79:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  80:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  81:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  82:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  83:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			extern "C" {
  84:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  85:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  86:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  87:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  88:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  89:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  90:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  91:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Private Interface - For use in library only: */
  92:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	#if !defined(__DOXYGEN__)
  93:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
  94:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  95:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  96:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  97:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  98:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  99:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
 100:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 101:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 102:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 103:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 104:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 105:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 106:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 107:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 108:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 109:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 110:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 111:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 112:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#else
 113:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 114:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 115:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 116:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 117:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 118:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 119:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 120:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 121:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 122:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 123:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 124:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 125:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 126:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 127:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t  MaskVal    = 0;
 128:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				uint16_t CheckBytes = 8;
 129:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 130:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				while (CheckBytes < Bytes)
 131:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				{
 132:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					MaskVal++;
 133:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					CheckBytes <<= 1;
 134:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				}
 135:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 136:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return (MaskVal << EPSIZE0);
 137:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 138:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 139:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Function Prototypes: */
 140:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			void Endpoint_ClearEndpoints(void);
 141:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 142:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG0XData,
 143:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG1XData);
 144:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 145:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	#endif
 146:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 147:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 148:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
 149:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 150:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 151:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 152:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                        (0 << EPDIR)
 153:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 154:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 155:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 156:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 157:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                         (1 << EPDIR)
 158:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 159:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 160:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 161:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 162:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank at the one time.
 163:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 164:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 165:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 166:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 167:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 168:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 169:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 170:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 171:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 172:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 173:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 174:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 175:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 176:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                      0
 177:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 178:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 179:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 180:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 181:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 */
 182:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 183:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 184:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 185:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 186:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 187:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 188:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                     0x07
 189:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 190:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 191:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 192:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 193:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                     0x80
 194:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 195:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 196:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank size in the device.
 197:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 198:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                    0x7F
 199:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 200:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 201:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 202:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 203:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 204:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 205:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 206:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the total number of banks supported by the given endpoint.
 207:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 208:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 209:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 210:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 211:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 212:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 213:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 214:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 215:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 216:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 */
 217:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 218:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#else
 219:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 220:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 221:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 222:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Enums: */
 223:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 224:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 225:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 226:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 227:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 228:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 229:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 230:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 231:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 232:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 233:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 234:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 235:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 236:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 237:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 238:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 239:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 240:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 241:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 242:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 243:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 244:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			};
 245:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 246:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 247:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 248:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 249:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  on its direction.
 250:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 251:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 252:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 253:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 254:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Type       Type of endpoint to configure, a EP_TYPE_* mask. Not all endpoint type
 255:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 256:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 257:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 258:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 259:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 260:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 261:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 262:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 263:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 264:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        that the endpoint can handle.
 265:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 266:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an ENDPOINT_
 267:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 268:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 269:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 270:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints <b>must</b> be configured in ascending order, or bank corruption will occur.
 271:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 272:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 273:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Certain models of USB AVR's endpoints may have different maximum packet sizes based on
 274:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        index - refer to the chosen USB AVR's datasheet to determine the maximum bank size for
 275:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 276:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 277:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 278:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        it is automatically configured by the library internally.
 279:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 280:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 281:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 282:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        which failed to reconfigure correctly will be selected.
 283:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 284:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the configuration succeeded, false otherwise.
 285:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 286:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 287:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 288:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 289:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 290:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 291:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 292:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 293:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 294:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 295:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Banks)
 296:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 297:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 307               		.loc 4 297 0
 308 013a 80E0      		ldi r24,lo8(0)
 309 013c 60E0      		ldi r22,lo8(0)
 310 013e 42E0      		ldi r20,lo8(2)
 311 0140 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 312               	.LBE35:
 313               	.LBE34:
 153:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 154:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
 155:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
 156:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		                           ENDPOINT_BANK_SINGLE);
 157:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 158:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#if defined(INTERRUPT_CONTROL_ENDPOINT)
 159:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Enable(USB_INT_RXSTPI);
 160:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		#endif
 161:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 162:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_Reset();
 314               		.loc 1 162 0
 315 0144 0E94 0000 		call EVENT_USB_Device_Reset
 316               	.LVL1:
 317               	.L12:
 163:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 164:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 165:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if !defined(NO_SOF_EVENTS)
 166:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 318               		.loc 1 166 0
 319 0148 8091 E100 		lds r24,225
 320 014c 82FF      		sbrs r24,2
 321 014e 00C0      		rjmp .L3
 322               		.loc 1 166 0 is_stmt 0 discriminator 1
 323 0150 8091 E200 		lds r24,226
 324 0154 82FF      		sbrs r24,2
 325 0156 00C0      		rjmp .L3
 167:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 168:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_SOFI);
 326               		.loc 1 168 0 is_stmt 1
 327 0158 8091 E100 		lds r24,225
 328 015c 8B7F      		andi r24,lo8(-5)
 329 015e 8093 E100 		sts 225,r24
 169:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 170:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Device_StartOfFrame();
 330               		.loc 1 170 0
 331 0162 0E94 0000 		call EVENT_USB_Device_StartOfFrame
 332               	.L3:
 333               	/* epilogue start */
 171:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 172:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
 173:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
 174:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 175:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_HOST)
 176:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
 177:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 178:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_DDISCI);
 179:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_DCONNI);
 180:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Disable(USB_INT_DDISCI);
 181:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 182:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_DeviceUnattached();
 183:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 184:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_ResetInterface();
 185:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 186:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 187:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
 188:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 189:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_VBERRI);
 190:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 191:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_Host_VBUS_Manual_Off();
 192:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_Host_VBUS_Auto_Off();
 193:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 194:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
 195:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_DeviceUnattached();
 196:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 197:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_HostState = HOST_STATE_Unattached;
 198:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 199:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 200:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
 201:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 202:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_SRPI);
 203:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Disable(USB_INT_SRPI);
 204:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 205:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_DeviceAttached();
 206:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 207:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Enable(USB_INT_DDISCI);
 208:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 209:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_HostState = HOST_STATE_Powered;
 210:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 211:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 212:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
 213:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 214:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_BCERRI);
 215:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 216:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
 217:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_DeviceUnattached();
 218:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 219:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_ResetInterface();
 220:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 221:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 222:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if !defined(NO_SOF_EVENTS)
 223:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
 224:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 225:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_HSOFI);
 226:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 227:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_Host_StartOfFrame();
 228:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 229:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
 230:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
 231:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 232:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#if defined(USB_CAN_BE_BOTH)
 233:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	if (USB_INT_HasOccurred(USB_INT_IDTI) && USB_INT_IsEnabled(USB_INT_IDTI))
 234:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	{
 235:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_INT_Clear(USB_INT_IDTI);
 236:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 237:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		if (USB_DeviceState != DEVICE_STATE_Unattached)
 238:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		  EVENT_USB_Device_Disconnect();
 239:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 240:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		if (USB_HostState != HOST_STATE_Unattached)
 241:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		  EVENT_USB_Host_DeviceUnattached();
 242:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 243:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_CurrentMode = USB_GetUSBModeFromUID();
 244:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		USB_ResetInterface();
 245:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 
 246:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 		EVENT_USB_UIDChange();
 247:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	}
 248:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** 	#endif
 249:../../LUFA/Drivers/USB/LowLevel/USBInterrupt.c **** }
 334               		.loc 1 249 0
 335 0166 FF91      		pop r31
 336 0168 EF91      		pop r30
 337 016a BF91      		pop r27
 338 016c AF91      		pop r26
 339 016e 9F91      		pop r25
 340 0170 8F91      		pop r24
 341 0172 7F91      		pop r23
 342 0174 6F91      		pop r22
 343 0176 5F91      		pop r21
 344 0178 4F91      		pop r20
 345 017a 3F91      		pop r19
 346 017c 2F91      		pop r18
 347 017e 0F90      		pop r0
 348 0180 0FBE      		out __SREG__,r0
 349 0182 0F90      		pop r0
 350 0184 1F90      		pop r1
 351 0186 1895      		reti
 352               		.cfi_endproc
 353               	.LFE72:
 355               		.text
 356               	.Letext0:
 357               		.file 5 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.6.2/../..
 358               		.file 6 "../../LUFA/Drivers/USB/LowLevel/../HighLevel/DeviceStandardReq.h"
DEFINED SYMBOLS
                            *ABS*:00000000 USBInterrupt.c
C:\Users\Brian\AppData\Local\Temp\ccJHXtK6.s:2      *ABS*:0000003f __SREG__
C:\Users\Brian\AppData\Local\Temp\ccJHXtK6.s:3      *ABS*:0000003e __SP_H__
C:\Users\Brian\AppData\Local\Temp\ccJHXtK6.s:4      *ABS*:0000003d __SP_L__
C:\Users\Brian\AppData\Local\Temp\ccJHXtK6.s:5      *ABS*:00000034 __CCP__
C:\Users\Brian\AppData\Local\Temp\ccJHXtK6.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Brian\AppData\Local\Temp\ccJHXtK6.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Brian\AppData\Local\Temp\ccJHXtK6.s:16     .text.USB_INT_DisableAllInterrupts:00000000 USB_INT_DisableAllInterrupts
C:\Users\Brian\AppData\Local\Temp\ccJHXtK6.s:42     .text.USB_INT_ClearAllInterrupts:00000000 USB_INT_ClearAllInterrupts
C:\Users\Brian\AppData\Local\Temp\ccJHXtK6.s:63     .text.__vector_10:00000000 __vector_10

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
EVENT_USB_Device_Connect
EVENT_USB_Device_Disconnect
EVENT_USB_Device_Suspend
USB_ConfigurationNumber
EVENT_USB_Device_WakeUp
Endpoint_ConfigureEndpoint_Prv
EVENT_USB_Device_Reset
EVENT_USB_Device_StartOfFrame
