   1               		.file	"USBController.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.USB_ShutDown,"ax",@progbits
  14               	.global	USB_ShutDown
  16               	USB_ShutDown:
  17               	.LFB71:
  18               		.file 1 "../../LUFA/Drivers/USB/LowLevel/USBController.c"
   1:../../LUFA/Drivers/USB/LowLevel/USBController.c **** /*
   2:../../LUFA/Drivers/USB/LowLevel/USBController.c ****              LUFA Library
   3:../../LUFA/Drivers/USB/LowLevel/USBController.c ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
   5:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/LowLevel/USBController.c ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/LowLevel/USBController.c **** */
   8:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
   9:../../LUFA/Drivers/USB/LowLevel/USBController.c **** /*
  10:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  12:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  21:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/LowLevel/USBController.c ****   this software.
  29:../../LUFA/Drivers/USB/LowLevel/USBController.c **** */
  30:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  31:../../LUFA/Drivers/USB/LowLevel/USBController.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../../LUFA/Drivers/USB/LowLevel/USBController.c **** #define  __INCLUDE_FROM_USB_CONTROLLER_C
  33:../../LUFA/Drivers/USB/LowLevel/USBController.c **** #include "USBController.h"
  34:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  35:../../LUFA/Drivers/USB/LowLevel/USBController.c **** #if (!defined(USB_HOST_ONLY) && !defined(USB_DEVICE_ONLY))
  36:../../LUFA/Drivers/USB/LowLevel/USBController.c **** volatile uint8_t USB_CurrentMode = USB_MODE_None;
  37:../../LUFA/Drivers/USB/LowLevel/USBController.c **** #endif
  38:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  39:../../LUFA/Drivers/USB/LowLevel/USBController.c **** #if !defined(USE_STATIC_OPTIONS)
  40:../../LUFA/Drivers/USB/LowLevel/USBController.c **** volatile uint8_t USB_Options;
  41:../../LUFA/Drivers/USB/LowLevel/USBController.c **** #endif
  42:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  43:../../LUFA/Drivers/USB/LowLevel/USBController.c **** void USB_Init(
  44:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                #if defined(USB_CAN_BE_BOTH)
  45:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                const uint8_t Mode
  46:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                #endif
  47:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  48:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                #if (defined(USB_CAN_BE_BOTH) && !defined(USE_STATIC_OPTIONS))
  49:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                ,
  50:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                #elif (!defined(USB_CAN_BE_BOTH) && defined(USE_STATIC_OPTIONS))
  51:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                void
  52:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                #endif
  53:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  54:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                #if !defined(USE_STATIC_OPTIONS)
  55:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                const uint8_t Options
  56:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                #endif
  57:../../LUFA/Drivers/USB/LowLevel/USBController.c ****                )
  58:../../LUFA/Drivers/USB/LowLevel/USBController.c **** {
  59:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if !defined(USE_STATIC_OPTIONS)
  60:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Options = Options;
  61:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
  62:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  63:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (!(USB_Options & USB_OPT_REG_DISABLED))
  64:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_REG_On();
  65:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	else
  66:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_REG_Off();
  67:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  68:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
  69:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (Mode == USB_MODE_UID)
  70:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
  71:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		UHWCON |= (1 << UIDE);
  72:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Enable(USB_INT_IDTI);
  73:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_CurrentMode = USB_GetUSBModeFromUID();
  74:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
  75:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	else
  76:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
  77:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_CurrentMode = Mode;
  78:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
  79:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
  80:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  81:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_IsInitialized = true;
  82:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  83:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ResetInterface();
  84:../../LUFA/Drivers/USB/LowLevel/USBController.c **** }
  85:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  86:../../LUFA/Drivers/USB/LowLevel/USBController.c **** void USB_ShutDown(void)
  87:../../LUFA/Drivers/USB/LowLevel/USBController.c **** {
  19               		.loc 1 87 0
  20               		.cfi_startproc
  21               	/* prologue: function */
  22               	/* frame size = 0 */
  23               	/* stack size = 0 */
  24               	.L__stack_usage = 0
  88:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_DisableAllInterrupts();
  25               		.loc 1 88 0
  26 0000 0E94 0000 		call USB_INT_DisableAllInterrupts
  89:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_ClearAllInterrupts();
  27               		.loc 1 89 0
  28 0004 0E94 0000 		call USB_INT_ClearAllInterrupts
  29               	.LBB34:
  30               	.LBB35:
  31               		.file 2 "../../LUFA/Drivers/USB/LowLevel/USBController.h"
   1:../../LUFA/Drivers/USB/LowLevel/USBController.h **** /*
   2:../../LUFA/Drivers/USB/LowLevel/USBController.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/LowLevel/USBController.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
   5:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/LowLevel/USBController.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/LowLevel/USBController.h **** */
   8:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
   9:../../LUFA/Drivers/USB/LowLevel/USBController.h **** /*
  10:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  12:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  21:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/LowLevel/USBController.h ****   this software.
  29:../../LUFA/Drivers/USB/LowLevel/USBController.h **** */
  30:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  31:../../LUFA/Drivers/USB/LowLevel/USBController.h **** /** \file
  32:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  \brief USB low level USB controller definitions.
  33:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  34:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  This file contains structures, function prototypes and macros related to the low level configur
  35:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  USB controller, to start, stop and reset the USB library core.
  36:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  37:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  */
  40:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  41:../../LUFA/Drivers/USB/LowLevel/USBController.h **** /** \ingroup Group_USB
  42:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  @defgroup Group_USBManagement USB Interface Management
  43:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  44:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  45:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  46:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  *  @{
  47:../../LUFA/Drivers/USB/LowLevel/USBController.h ****  */
  48:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  49:../../LUFA/Drivers/USB/LowLevel/USBController.h **** #ifndef __USBCONTROLLER_H__
  50:../../LUFA/Drivers/USB/LowLevel/USBController.h **** #define __USBCONTROLLER_H__
  51:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  52:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Includes: */
  53:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <avr/io.h>
  54:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <avr/interrupt.h>
  55:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <stdbool.h>
  56:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  57:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  58:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  59:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../../../Common/Common.h"
  60:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  61:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/Events.h"
  62:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBTask.h"
  63:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "USBInterrupt.h"
  64:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  65:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  66:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Host.h"
  67:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "OTG.h"
  68:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Pipe.h"
  69:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/HostStandardReq.h"
  70:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/PipeStream.h"
  71:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  72:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  73:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  74:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Device.h"
  75:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Endpoint.h"
  76:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/DeviceStandardReq.h"
  77:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/EndpointStream.h"
  78:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  79:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  80:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(__cplusplus)
  82:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			extern "C" {
  83:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  84:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  85:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Preprocessor Checks and Defines: */
  86:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  89:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  90:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(F_CLOCK)
  91:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error F_CLOCK is not defined. You must define F_CLOCK to the frequency of the unprescaled input
  92:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  93:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
  94:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if (F_CLOCK == 8000000)
  95:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  96:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  97:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
  98:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
  99:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 100:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
 101:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
 102:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 103:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
 104:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 105:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 106:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#elif (F_CLOCK == 16000000)
 107:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 108:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 109:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
 110:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 111:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 112:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 113:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 114:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 115:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 116:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 117:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 118:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
 119:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 120:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(USB_PLL_PSC)
 121:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error No PLL prescale value available for chosen F_CPU value and AVR model.
 122:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
 123:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 124:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Public Interface - May be used in end-application: */
 125:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Macros: */
 126:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 127:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  regulator should be enabled to regulate the data pin voltages to within the USB standard.
 128:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 129:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 130:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 131:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 132:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 133:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 134:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 135:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 136:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 137:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 138:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 139:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 140:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 141:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 142:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 143:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 144:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 145:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 146:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 147:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 148:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 149:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 150:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 151:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 152:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for a CONTROL type endpoint or pipe.
 153:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 154:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 155:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 156:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_CONTROL                    0x00
 157:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 158:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for an ISOCHRONOUS type endpoint or pipe.
 159:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 160:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 161:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 162:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_ISOCHRONOUS                0x01
 163:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 164:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for a BULK type endpoint or pipe.
 165:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 166:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 167:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 168:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_BULK                       0x02
 169:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 170:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for an INTERRUPT type endpoint or pipe.
 171:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 172:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 173:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 174:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_INTERRUPT                  0x03
 175:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 176:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 177:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 178:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 179:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 180:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 181:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  This value may be overridden in the user project makefile as the value of the
 182:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 183:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 184:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 185:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 186:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 187:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Inline Functions: */
 188:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 189:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Returns boolean true if the VBUS line is currently high (i.e. the USB host is supplying pow
 190:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  otherwise returns false.
 191:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 192:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 193:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 194:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 195:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void)
 196:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				{
 197:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 198:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				}
 199:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 200:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 201:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 202:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 203:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 204:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 205:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 206:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Detach(void)
 207:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 208:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  |=  (1 << DETACH);
  32               		.loc 2 208 0
  33 0008 E0EE      		ldi r30,lo8(224)
  34 000a F0E0      		ldi r31,hi8(224)
  35 000c 8081      		ld r24,Z
  36 000e 8160      		ori r24,lo8(1)
  37 0010 8083      		st Z,r24
  38               	.LBE35:
  39               	.LBE34:
  40               	.LBB36:
  41               	.LBB37:
 209:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 210:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 211:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Attaches the device to the USB bus. This announces the device's presence to any attached
 212:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  USB host, starting the enumeration process. If no host is present, attaching the device
 213:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  will allow for enumeration once a host is connected to the device.
 214:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 215:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  This is inexplicably also required for proper operation while in host mode, to enable the
 216:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  attachment of a device to the host. This is despite the bit being located in the device-mode
 217:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  register and despite the datasheet making no mention of its requirement in host mode.
 218:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 219:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
 220:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Attach(void)
 221:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 222:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  &= ~(1 << DETACH);
 223:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 224:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 225:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Function Prototypes: */
 226:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Main function to initialize and start the USB interface. Once active, the USB interface will
 227:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  allow for device connection to a host when in device mode, or for device enumeration while i
 228:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  host mode.
 229:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 230:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  As the USB library relies on interrupts for the device and host mode enumeration processes,
 231:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  the user must enable global interrupts before or shortly after this function is called. In
 232:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  device mode, interrupts must be enabled within 500ms of this function being called to ensure
 233:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the host does not time out whilst enumerating the device. In host mode, interrupts may 
 234:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  enabled at the application's leisure however enumeration will not begin of an attached devic
 235:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  until after this has occurred.
 236:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 237:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  Calling this function when the USB interface is already initialized will cause a complete US
 238:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  interface reset and re-enumeration.
 239:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 240:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \param[in] Mode     This is a mask indicating what mode the USB interface is to be initializ
 241:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      from the \ref USB_Modes_t enum.
 242:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 243:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \param[in] Options  Mask indicating the options which should be used when initializing the U
 244:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      interface to control the USB interface's behaviour. This should be compr
 245:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      a USB_OPT_REG_* mask to control the regulator, a USB_OPT_*_PLL mask to c
 246:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      PLL, and a USB_DEVICE_OPT_* mask (when the device mode is enabled) to se
 247:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      mode speed.
 248:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 249:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note To reduce the FLASH requirements of the library if only device or host mode is require
 250:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        the mode can be statically set in the project makefile by defining the token USB_DEVIC
 251:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        (for device mode) or USB_HOST_ONLY (for host mode), passing the token to the compiler
 252:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        via the -D switch. If the mode is statically set, this parameter does not exist in the
 253:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        function prototype.
 254:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        \n\n
 255:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 256:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note To reduce the FLASH requirements of the library if only fixed settings are are require
 257:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        the options may be set statically in the same manner as the mode (see the Mode paramet
 258:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        this function). To statically set the USB options, pass in the USE_STATIC_OPTIONS toke
 259:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        defined to the appropriate options masks. When the options are statically set, this
 260:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        parameter does not exist in the function prototype.
 261:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        \n\n
 262:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 263:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note The mode parameter does not exist on devices where only one mode is possible, such as 
 264:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        AVR models which only implement the USB device mode in hardware.
 265:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 266:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \see Device.h for the USB_DEVICE_OPT_* masks.
 267:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 268:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_Init(
 269:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__)
 270:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               const uint8_t Mode
 271:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 272:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 273:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if (defined(USB_CAN_BE_BOTH) && !defined(USE_STATIC_OPTIONS)) || defined(__DOXYG
 274:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               ,
 275:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #elif (!defined(USB_CAN_BE_BOTH) && defined(USE_STATIC_OPTIONS))
 276:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               void
 277:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 278:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 279:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 280:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               const uint8_t Options
 281:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 282:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			               );
 283:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 284:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Shuts down the USB interface. This turns off the USB interface after deallocating all USB FI
 285:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  memory, endpoints and pipes. When turned off, no USB functionality can be used until the int
 286:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  is restarted with the \ref USB_Init() function.
 287:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 288:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_ShutDown(void);
 289:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 290:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Resets the interface, when already initialized. This will re-enumerate the device if already
 291:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  to a host, or re-enumerate an already attached device when in host mode.
 292:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 293:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_ResetInterface(void);
 294:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 295:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Global Variables: */
 296:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (!defined(USB_HOST_ONLY) && !defined(USB_DEVICE_ONLY)) || defined(__DOXYGEN__)
 297:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Indicates the mode that the USB interface is currently initialized to, a value from the
 298:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \ref USB_Modes_t enum.
 299:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 300:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This variable should be treated as read-only in the user application, and never manua
 301:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        changed in value.
 302:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        \n\n
 303:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 304:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note When the controller is initialized into UID autodetection mode, this variable will ho
 305:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        currently selected USB mode (i.e. \ref USB_MODE_Device or \ref USB_MODE_Host). If the
 306:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        is fixed into a specific mode (either through the USB_DEVICE_ONLY or USB_HOST_ONLY co
 307:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        options, or a limitation of the USB controller in the chosen device model) this will 
 308:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        a constant of the appropriate value and will never evaluate to \ref USB_MODE_None eve
 309:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        USB interface is not initialized.
 310:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 311:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				extern volatile uint8_t USB_CurrentMode;
 312:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USB_HOST_ONLY)
 313:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_CurrentMode USB_MODE_Host
 314:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USB_DEVICE_ONLY)
 315:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_CurrentMode USB_MODE_Device
 316:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 317:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 318:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 319:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Indicates the current USB options that the USB interface was initialized with when \ref USB
 320:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  was called. This value will be one of the USB_MODE_* masks defined elsewhere in this module
 321:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 322:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This variable should be treated as read-only in the user application, and never manua
 323:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        changed in value.
 324:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 325:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				extern volatile uint8_t USB_Options;
 326:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USE_STATIC_OPTIONS)
 327:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_Options USE_STATIC_OPTIONS
 328:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 329:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 330:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Enums: */
 331:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Enum for the possible USB controller modes, for initialization via \ref USB_Init() and indic
 332:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  user application via \ref USB_CurrentMode.
 333:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 334:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			enum USB_Modes_t
 335:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 336:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USB_MODE_None   = 0, /**< Indicates that the controller is currently not initialized in any spe
 337:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USB_MODE_Device = 1, /**< Indicates that the controller is currently initialized in USB Device 
 338:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USB_MODE_Host   = 2, /**< Indicates that the controller is currently initialized in USB Host mo
 339:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USB_MODE_UID    = 3, /**< Indicates that the controller should determine the USB mode from the 
 340:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				                      *   USB connector.
 341:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				                      */
 342:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			};
 343:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 344:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Private Interface - For use in library only: */
 345:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 	#if !defined(__DOXYGEN__)
 346:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Function Prototypes: */
 347:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(__INCLUDE_FROM_USB_CONTROLLER_C)
 348:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#if defined(USB_CAN_BE_DEVICE)
 349:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				static void USB_Init_Device(void);
 350:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#endif
 351:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 352:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#if defined(USB_CAN_BE_HOST)
 353:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				static void USB_Init_Host(void);
 354:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				#endif
 355:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 356:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 357:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Inline Functions: */
 358:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
 359:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_On(void)
 360:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 361:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = USB_PLL_PSC;
 362:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR |= (1 << PLLE);
 363:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 364:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 365:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
 366:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_Off(void)
 367:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 368:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = 0;
 369:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 370:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 371:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline bool USB_PLL_IsReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 372:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline bool USB_PLL_IsReady(void)
 373:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 374:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				return ((PLLCSR  &   (1 << PLOCK)) ? true : false);
 375:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 376:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 377:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
 378:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_On(void)
 379:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 380:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 381:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  |=  (1 << UVREGE);
 382:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#else
 383:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   &= ~(1 << REGDIS);
 384:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 385:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 386:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 387:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
 388:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_Off(void)
 389:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 390:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 391:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  &= ~(1 << UVREGE);
 392:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#else
 393:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   |=  (1 << REGDIS);
 394:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 395:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 396:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 397:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 398:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
 399:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_On(void)
 400:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 401:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << OTGPADE);
 402:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 403:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 404:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
 405:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_Off(void)
 406:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 407:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << OTGPADE);
 408:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 409:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 410:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 411:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
 412:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Freeze(void)
 413:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 414:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << FRZCLK);
 415:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 416:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 417:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
 418:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Unfreeze(void)
 419:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 420:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << FRZCLK);
 421:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 422:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 423:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Enable(void) ATTR_ALWAYS_INLINE;
 424:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Enable(void)
 425:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 426:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << USBE);
 427:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 428:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 429:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
 430:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Disable(void)
 431:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 432:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << USBE);
  42               		.loc 2 432 0
  43 0012 E8ED      		ldi r30,lo8(216)
  44 0014 F0E0      		ldi r31,hi8(216)
  45 0016 8081      		ld r24,Z
  46 0018 8F77      		andi r24,lo8(127)
  47 001a 8083      		st Z,r24
  48               	.LBE37:
  49               	.LBE36:
  50               	.LBB38:
  51               	.LBB39:
 368:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = 0;
  52               		.loc 2 368 0
  53 001c 19BC      		out 73-32,__zero_reg__
  54               	.LBE39:
  55               	.LBE38:
  56               	.LBB40:
  57               	.LBB41:
 391:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  &= ~(1 << UVREGE);
  58               		.loc 2 391 0
  59 001e A7ED      		ldi r26,lo8(215)
  60 0020 B0E0      		ldi r27,hi8(215)
  61 0022 8C91      		ld r24,X
  62 0024 8E7F      		andi r24,lo8(-2)
  63 0026 8C93      		st X,r24
  64               	.LBE41:
  65               	.LBE40:
  66               	.LBB42:
  67               	.LBB43:
 407:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << OTGPADE);
  68               		.loc 2 407 0
  69 0028 8081      		ld r24,Z
  70 002a 8F7E      		andi r24,lo8(-17)
  71 002c 8083      		st Z,r24
  72               	.LBE43:
  73               	.LBE42:
  90:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  91:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Detach();
  92:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Controller_Disable();
  93:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  94:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (!(USB_Options & USB_OPT_MANUAL_PLL))
  95:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_PLL_Off();
  96:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  97:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_REG_Off();
  98:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
  99:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 100:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_OTGPAD_Off();
 101:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 102:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 103:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
 104:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_CurrentMode = USB_MODE_None;
 105:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 106:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 107:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_IsInitialized = false;
  74               		.loc 1 107 0
  75 002e 1092 0000 		sts USB_IsInitialized,__zero_reg__
  76               	/* epilogue start */
 108:../../LUFA/Drivers/USB/LowLevel/USBController.c **** }
  77               		.loc 1 108 0
  78 0032 0895      		ret
  79               		.cfi_endproc
  80               	.LFE71:
  82               		.section	.text.USB_ResetInterface,"ax",@progbits
  83               	.global	USB_ResetInterface
  85               	USB_ResetInterface:
  86               	.LFB72:
 109:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 110:../../LUFA/Drivers/USB/LowLevel/USBController.c **** void USB_ResetInterface(void)
 111:../../LUFA/Drivers/USB/LowLevel/USBController.c **** {
  87               		.loc 1 111 0
  88               		.cfi_startproc
  89               	/* prologue: function */
  90               	/* frame size = 0 */
  91               	/* stack size = 0 */
  92               	.L__stack_usage = 0
 112:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
 113:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
 114:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 115:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 116:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_DisableAllInterrupts();
  93               		.loc 1 116 0
  94 0000 0E94 0000 		call USB_INT_DisableAllInterrupts
 117:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_ClearAllInterrupts();
  95               		.loc 1 117 0
  96 0004 0E94 0000 		call USB_INT_ClearAllInterrupts
  97               	.LBB62:
  98               	.LBB63:
 433:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 434:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 435:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
 436:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Reset(void)
 437:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 438:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				const uint8_t Temp = USBCON;
  99               		.loc 2 438 0
 100 0008 8091 D800 		lds r24,216
 101               	.LVL0:
 439:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 
 440:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON = (Temp & ~(1 << USBE));
 102               		.loc 2 440 0
 103 000c 982F      		mov r25,r24
 104 000e 9F77      		andi r25,lo8(127)
 105 0010 9093 D800 		sts 216,r25
 441:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON = (Temp |  (1 << USBE));
 106               		.loc 2 441 0
 107 0014 8068      		ori r24,lo8(-128)
 108               	.LVL1:
 109 0016 8093 D800 		sts 216,r24
 110               	.LBE63:
 111               	.LBE62:
 118:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 119:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Controller_Reset();
 120:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 121:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (!(USB_Options & USB_OPT_MANUAL_PLL))
 122:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 123:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#if defined(USB_SERIES_4_AVR)
 124:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
 112               		.loc 1 124 0
 113 001a 8AE4      		ldi r24,lo8(74)
 114 001c 82BF      		out 82-32,r24
 115               	.LBB64:
 116               	.LBB65:
 361:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = USB_PLL_PSC;
 117               		.loc 2 361 0
 118 001e 80E1      		ldi r24,lo8(16)
 119 0020 89BD      		out 73-32,r24
 362:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR |= (1 << PLLE);
 120               		.loc 2 362 0
 121 0022 89B5      		in r24,73-32
 122 0024 8260      		ori r24,lo8(2)
 123 0026 89BD      		out 73-32,r24
 124               	.L3:
 125               	.LBE65:
 126               	.LBE64:
 125:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#endif
 126:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 127:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_PLL_On();
 128:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		while (!(USB_PLL_IsReady()));
 127               		.loc 1 128 0 discriminator 1
 128 0028 09B4      		in __tmp_reg__,73-32
 129 002a 00FE      		sbrs __tmp_reg__,0
 130 002c 00C0      		rjmp .L3
 131               	.LBB66:
 132               	.LBB67:
 420:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << FRZCLK);
 133               		.loc 2 420 0
 134 002e 8091 D800 		lds r24,216
 135 0032 8F7D      		andi r24,lo8(-33)
 136 0034 8093 D800 		sts 216,r24
 137               	.LBE67:
 138               	.LBE66:
 139               	.LBB68:
 140               	.LBB69:
 129:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 130:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 131:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
 132:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (UIDModeSelectEnabled)
 133:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 134:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		UHWCON |= (1 << UIDE);
 135:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Enable(USB_INT_IDTI);
 136:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 137:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 138:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 139:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_CLK_Unfreeze();
 140:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 141:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (USB_CurrentMode == USB_MODE_Device)
 142:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 143:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#if defined(USB_CAN_BE_DEVICE)
 144:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 145:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		UHWCON |=  (1 << UIMOD);
 146:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#endif
 147:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 148:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_Init_Device();
 149:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#endif
 150:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 151:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	else if (USB_CurrentMode == USB_MODE_Host)
 152:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 153:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#if defined(USB_CAN_BE_HOST)
 154:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		UHWCON &= ~(1 << UIMOD);
 155:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_Init_Host();
 156:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#endif
 157:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 158:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 159:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 160:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_OTGPAD_On();
 161:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 162:../../LUFA/Drivers/USB/LowLevel/USBController.c **** }
 163:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 164:../../LUFA/Drivers/USB/LowLevel/USBController.c **** #if defined(USB_CAN_BE_DEVICE)
 165:../../LUFA/Drivers/USB/LowLevel/USBController.c **** static void USB_Init_Device(void)
 166:../../LUFA/Drivers/USB/LowLevel/USBController.c **** {
 167:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_DeviceState          = DEVICE_STATE_Unattached;
 141               		.loc 1 167 0
 142 0038 1EBA      		out 62-32,__zero_reg__
 168:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ConfigurationNumber  = 0;
 143               		.loc 1 168 0
 144 003a 1092 0000 		sts USB_ConfigurationNumber,__zero_reg__
 145               	.LBB70:
 146               	.LBB71:
 147               		.file 3 "../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h"
   1:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /*
   2:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
   5:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** */
   8:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
   9:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /*
  10:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  12:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  21:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****   this software.
  29:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** */
  30:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  31:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /** \file
  32:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  \brief USB device mode definitions.
  33:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  34:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  This file contains structures, function prototypes and macros related to USB device mode.
  35:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  36:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  38:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  */
  39:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  40:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** /** \ingroup Group_USB
  41:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  @defgroup Group_Device Device Management
  42:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  43:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  USB Device mode related macros and enums. This module contains macros and enums which are used 
  44:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  the USB controller is initialized in device mode.
  45:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *
  46:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  *  @{
  47:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h ****  */
  48:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  49:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** #ifndef __USBDEVICE_H__
  50:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** #define __USBDEVICE_H__
  51:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  52:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	/* Includes: */
  53:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include <avr/io.h>
  54:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include <avr/pgmspace.h>
  55:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include <avr/eeprom.h>
  56:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  57:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "../../../Common/Common.h"
  58:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "../HighLevel/StdDescriptors.h"
  59:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "USBInterrupt.h"
  60:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#include "Endpoint.h"
  61:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  62:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	/* Preprocessor Checks: */
  63:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  64:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  65:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#endif
  66:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  67:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  68:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  69:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		#endif
  70:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  71:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	/* Public Interface - May be used in end-application: */
  72:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Macros: */
  73:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  74:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  75:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  76:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *
  77:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  78:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *        \n
  79:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *
  80:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  81:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *        when running in low speed mode - refer to the USB 2.0 specification.
  82:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 */
  83:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  84:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#endif
  85:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  86:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  87:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  88:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 */
  89:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
  90:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
  91:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
  92:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
  93:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  be taken out of suspended mode, and communications should resume.
  94:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
  95:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
  96:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
  97:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
  98:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \note This macro should only be used if the device has indicated to the host that it
  99:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        supports the Remote Wakeup feature in the device descriptors, and should only be
 100:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        issued if the host is currently allowing remote wakeup events from the device (i.e.,
 101:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_RemoteWakeupEnabled flag is set). When the NO_DEVICE_REMOTE_WAKEUP compil
 102:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        time option is used, this macro is unavailable.
 103:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        \n\n
 104:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 105:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \note The USB clock must be running for this function to operate. If the stack is initialize
 106:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is runni
 107:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        before attempting to call this function.
 108:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 109:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \see \ref Group_Descriptors for more information on the RMWAKEUP feature and device descript
 110:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 */
 111:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			void USB_Device_SendRemoteWakeup(void);
 112:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 113:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Type Defines: */
 114:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			enum USB_Device_States_t
 115:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 116:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Unattached                   = 0, /**< Internally implemented by the library. This
 117:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is not currently connected 
 118:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 119:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Powered                      = 1, /**< Internally implemented by the library. This
 120:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is connected to a host, but
 121:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   yet begun.
 122:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 123:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Default                      = 2, /**< Internally implemented by the library. This
 124:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device's USB bus has been reset by
 125:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   now waiting for the host to begin the enume
 126:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 127:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Addressed                    = 3, /**< Internally implemented by the library. This
 128:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been addressed by the U
 129:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   yet configured.
 130:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 131:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Configured                   = 4, /**< May be implemented by the user project. Thi
 132:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been enumerated by the 
 133:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   for USB communications to begin.
 134:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 135:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Suspended                    = 5, /**< May be implemented by the user project. Thi
 136:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   that the USB bus has been suspended by the 
 137:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   should power down to a minimal power level 
 138:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                *   resumed.
 139:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				                                                */
 140:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			};
 141:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 142:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 143:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is 
 144:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  the frame number is incremented by one.
 145:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 */
 146:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void)
 147:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 148:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				return UDFNUM;
 149:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			}
 150:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 151:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#if !defined(NO_SOF_EVENTS)
 152:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				/** Enables the device mode Start Of Frame events. When enabled, this causes the
 153:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to th
 154:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  at the start of each USB frame when enumerated in device mode.
 155:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *
 156:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \note Not available when the NO_SOF_EVENTS compile time token is defined.
 157:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 */
 158:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 159:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				static inline void USB_Device_EnableSOFEvents(void)
 160:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				{
 161:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 					USB_INT_Enable(USB_INT_SOFI);
 162:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				}
 163:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 164:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				/** Disables the device mode Start Of Frame events. When disabled, this stops the firing of the
 165:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \ref EVENT_USB_Device_StartOfFrame() event when enumerated in device mode.
 166:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *
 167:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 *  \note Not available when the NO_SOF_EVENTS compile time token is defined.
 168:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				 */
 169:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				static inline void USB_Device_DisableSOFEvents(void) ATTR_ALWAYS_INLINE;
 170:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				static inline void USB_Device_DisableSOFEvents(void)
 171:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				{
 172:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 					USB_INT_Disable(USB_INT_SOFI);
 173:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				}
 174:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#endif
 175:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 176:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
 177:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			/** Function to retrieve a given descriptor's size and memory location from the given descriptor
 178:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  index and language ID. This function MUST be overridden in the user application (added with 
 179:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  prototype and name so that the library can call it to retrieve descriptor data.
 180:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 181:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \param[in] wValue               The type of the descriptor to retrieve in the upper byte, an
 182:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  lower byte (when more than one descriptor of the given type 
 183:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  case of string descriptors). The type may be one of the stan
 184:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  in the DescriptorTypes_t enum, or may be a class-specific de
 185:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \param[in] wIndex               The language ID of the string to return if the wValue type i
 186:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  otherwise zero for standard descriptors, or as defined in a 
 187:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  standards.
 188:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \param[out] DescriptorAddress   Pointer to the descriptor in memory. This should be set by t
 189:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  the address of the descriptor.
 190:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \param[out] MemoryAddressSpace  A value from the \ref USB_DescriptorMemorySpaces_t enum to i
 191:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  space in which the descriptor is stored. This parameter does
 192:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *                                  of the USE_*_DESCRIPTORS compile time options is used.
 193:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 194:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \note By default, the library expects all descriptors to be located in flash memory via the 
 195:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        If descriptors should be located in RAM or EEPROM instead (to speed up access in the c
 196:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        allow the descriptors to be changed dynamically at runtime) either the USE_RAM_DESCRIP
 197:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        USE_EEPROM_DESCRIPTORS tokens may be defined in the project makefile and passed to the
 198:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *        switch.
 199:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *
 200:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 *  \return Size in bytes of the descriptor if it exists, zero or \ref NO_DESCRIPTOR otherwise.
 201:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			 */
 202:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 203:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			                                    const uint8_t wIndex,
 204:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			                                    const void** const DescriptorAddress
 205:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESC
 206:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			                                    , uint8_t* MemoryAddressSpace
 207:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#endif
 208:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			                                    ) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(3);
 209:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 210:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	/* Private Interface - For use in library only: */
 211:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 	#if !defined(__DOXYGEN__)
 212:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 213:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 214:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetLowSpeed(void) ATTR_ALWAYS_INLINE;
 215:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetLowSpeed(void)
 216:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 217:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				UDCON |=  (1 << LSM);
 218:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			}
 219:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 
 220:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
 221:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_SetFullSpeed(void)
 222:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 			{
 223:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h **** 				UDCON &= ~(1 << LSM);
 148               		.loc 3 223 0
 149 003e 8091 E000 		lds r24,224
 150 0042 8B7F      		andi r24,lo8(-5)
 151 0044 8093 E000 		sts 224,r24
 152               	.LBE71:
 153               	.LBE70:
 169:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 170:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
 171:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_RemoteWakeupEnabled  = false;
 172:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 173:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 174:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if !defined(NO_DEVICE_SELF_POWER)
 175:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_CurrentlySelfPowered = false;
 176:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 177:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 178:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if !defined(FIXED_CONTROL_ENDPOINT_SIZE)
 179:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Descriptor_Device_t* DeviceDescriptorPtr;
 180:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 181:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIPT
 182:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 183:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#if defined(USE_RAM_DESCRIPTORS)
 184:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
 185:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#elif defined(USE_EEPROM_DESCRIPTORS)
 186:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
 187:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#else
 188:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
 189:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 		#endif
 190:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 191:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 192:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 193:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 194:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
 195:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_Device_SetLowSpeed();
 196:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	else
 197:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_Device_SetFullSpeed();
 198:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 199:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Enable(USB_INT_VBUS);
 154               		.loc 1 199 0
 155 0048 8091 D800 		lds r24,216
 156 004c 8160      		ori r24,lo8(1)
 157 004e 8093 D800 		sts 216,r24
 158               	.LVL2:
 159               	.LBB72:
 160               	.LBB73:
 161               		.file 4 "../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h"
   1:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /*
   2:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
   5:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** */
   8:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
   9:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /*
  10:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  12:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in
  15:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in
  18:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the
  19:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  21:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****   this software.
  29:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** */
  30:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  31:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \file
  32:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  34:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  37:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  40:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  41:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  42:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  43:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  44:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  45:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  46:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  47:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW
  48:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  49:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  50:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  from and to endpoints.
  52:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  53:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  54:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointManagement
  55:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  56:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  57:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  58:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  59:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  60:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_USB
  61:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  62:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  63:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  64:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  65:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  66:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *
  67:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  *  @{
  68:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h ****  */
  69:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  70:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  71:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  72:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  73:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Includes: */
  74:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/io.h>
  75:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include <stdbool.h>
  76:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  77:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  78:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  79:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  80:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  81:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  82:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  83:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			extern "C" {
  84:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  85:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  86:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  87:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  88:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  89:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  90:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  91:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Private Interface - For use in library only: */
  92:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	#if !defined(__DOXYGEN__)
  93:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
  94:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  95:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  96:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  97:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
  98:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  99:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
 100:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 101:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 102:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 103:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 104:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 105:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 106:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 107:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 108:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 109:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 110:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 111:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 112:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#else
 113:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 114:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 115:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  2
 116:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 117:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 118:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 119:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 120:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 121:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 122:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 123:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 124:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 125:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 126:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 127:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t  MaskVal    = 0;
 128:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				uint16_t CheckBytes = 8;
 129:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 130:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				while (CheckBytes < Bytes)
 131:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				{
 132:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					MaskVal++;
 133:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 					CheckBytes <<= 1;
 134:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				}
 135:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 136:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return (MaskVal << EPSIZE0);
 137:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			}
 138:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 139:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Function Prototypes: */
 140:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			void Endpoint_ClearEndpoints(void);
 141:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 142:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG0XData,
 143:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                    const uint8_t UECFG1XData);
 144:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 145:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	#endif
 146:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 147:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 148:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
 149:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 150:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 151:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 152:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                        (0 << EPDIR)
 153:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 154:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 155:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 156:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 157:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                         (1 << EPDIR)
 158:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 159:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 160:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 161:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 162:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank at the one time.
 163:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 164:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 165:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 166:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 167:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 168:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 169:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 170:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 171:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 172:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 173:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 174:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 175:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 176:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                      0
 177:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 178:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 179:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 180:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 181:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 */
 182:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 183:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 184:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 185:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 186:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 187:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 188:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                     0x07
 189:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 190:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 191:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 192:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 193:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                     0x80
 194:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 195:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 196:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank size in the device.
 197:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 198:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                    0x7F
 199:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 200:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 201:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 202:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 203:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 204:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 205:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 206:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the total number of banks supported by the given endpoint.
 207:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 208:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 209:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 210:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 211:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 212:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 213:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 214:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 215:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 216:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				 */
 217:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 218:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#else
 219:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 220:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 221:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 222:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Enums: */
 223:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 224:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 225:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 226:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 227:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 228:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 229:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 230:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 231:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 232:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 233:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 234:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 235:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 236:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 237:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 238:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 239:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 240:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 241:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 242:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 243:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 244:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			};
 245:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 
 246:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 247:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 248:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 249:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  on its direction.
 250:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 251:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 252:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 253:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 254:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Type       Type of endpoint to configure, a EP_TYPE_* mask. Not all endpoint type
 255:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 256:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 257:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 258:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 259:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 260:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 261:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 262:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 263:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 264:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        that the endpoint can handle.
 265:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 266:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an ENDPOINT_
 267:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 268:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 269:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 270:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints <b>must</b> be configured in ascending order, or bank corruption will occur.
 271:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 272:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 273:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Certain models of USB AVR's endpoints may have different maximum packet sizes based on
 274:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        index - refer to the chosen USB AVR's datasheet to determine the maximum bank size for
 275:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 276:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 277:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 278:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        it is automatically configured by the library internally.
 279:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 280:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 281:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 282:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *        which failed to reconfigure correctly will be selected.
 283:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *
 284:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the configuration succeeded, false otherwise.
 285:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			 */
 286:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 287:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 288:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 289:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 290:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 291:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 292:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Type,
 293:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Direction,
 294:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint16_t Size,
 295:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			                                              const uint8_t Banks)
 296:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 			{
 297:../../LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 162               		.loc 4 297 0
 163 0052 80E0      		ldi r24,lo8(0)
 164 0054 60E0      		ldi r22,lo8(0)
 165 0056 42E0      		ldi r20,lo8(2)
 166 0058 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 167               	.LBE73:
 168               	.LBE72:
 200:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 201:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 202:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
 203:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
 204:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 							   ENDPOINT_BANK_SINGLE);
 205:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 
 206:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Clear(USB_INT_SUSPI);
 169               		.loc 1 206 0
 170 005c 8091 E100 		lds r24,225
 171 0060 8E7F      		andi r24,lo8(-2)
 172 0062 8093 E100 		sts 225,r24
 207:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Enable(USB_INT_SUSPI);
 173               		.loc 1 207 0
 174 0066 8091 E200 		lds r24,226
 175 006a 8160      		ori r24,lo8(1)
 176 006c 8093 E200 		sts 226,r24
 208:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Enable(USB_INT_EORSTI);
 177               		.loc 1 208 0
 178 0070 8091 E200 		lds r24,226
 179 0074 8860      		ori r24,lo8(8)
 180 0076 8093 E200 		sts 226,r24
 181               	.LBB74:
 182               	.LBB75:
 222:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  &= ~(1 << DETACH);
 183               		.loc 2 222 0
 184 007a 8091 E000 		lds r24,224
 185 007e 8E7F      		andi r24,lo8(-2)
 186 0080 8093 E000 		sts 224,r24
 187               	.LBE75:
 188               	.LBE74:
 189               	.LBE69:
 190               	.LBE68:
 191               	.LBB76:
 192               	.LBB77:
 401:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << OTGPADE);
 193               		.loc 2 401 0
 194 0084 8091 D800 		lds r24,216
 195 0088 8061      		ori r24,lo8(16)
 196 008a 8093 D800 		sts 216,r24
 197               	/* epilogue start */
 198               	.LBE77:
 199               	.LBE76:
 162:../../LUFA/Drivers/USB/LowLevel/USBController.c **** }
 200               		.loc 1 162 0
 201 008e 0895      		ret
 202               		.cfi_endproc
 203               	.LFE72:
 205               		.section	.text.USB_Init,"ax",@progbits
 206               	.global	USB_Init
 208               	USB_Init:
 209               	.LFB70:
  58:../../LUFA/Drivers/USB/LowLevel/USBController.c **** {
 210               		.loc 1 58 0
 211               		.cfi_startproc
 212               	/* prologue: function */
 213               	/* frame size = 0 */
 214               	/* stack size = 0 */
 215               	.L__stack_usage = 0
 216               	.LBB78:
 217               	.LBB79:
 381:../../LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  |=  (1 << UVREGE);
 218               		.loc 2 381 0
 219 0000 E7ED      		ldi r30,lo8(215)
 220 0002 F0E0      		ldi r31,hi8(215)
 221 0004 8081      		ld r24,Z
 222 0006 8160      		ori r24,lo8(1)
 223 0008 8083      		st Z,r24
 224               	.LBE79:
 225               	.LBE78:
  81:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_IsInitialized = true;
 226               		.loc 1 81 0
 227 000a 81E0      		ldi r24,lo8(1)
 228 000c 8093 0000 		sts USB_IsInitialized,r24
  83:../../LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ResetInterface();
 229               		.loc 1 83 0
 230 0010 0E94 0000 		call USB_ResetInterface
 231               	/* epilogue start */
  84:../../LUFA/Drivers/USB/LowLevel/USBController.c **** }
 232               		.loc 1 84 0
 233 0014 0895      		ret
 234               		.cfi_endproc
 235               	.LFE70:
 237               		.text
 238               	.Letext0:
 239               		.file 5 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.6.2/../..
 240               		.file 6 "../../LUFA/Drivers/USB/LowLevel/../HighLevel/DeviceStandardReq.h"
 241               		.file 7 "../../LUFA/Drivers/USB/LowLevel/../HighLevel/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 USBController.c
C:\Users\Brian\AppData\Local\Temp\cc9aA5lS.s:2      *ABS*:0000003f __SREG__
C:\Users\Brian\AppData\Local\Temp\cc9aA5lS.s:3      *ABS*:0000003e __SP_H__
C:\Users\Brian\AppData\Local\Temp\cc9aA5lS.s:4      *ABS*:0000003d __SP_L__
C:\Users\Brian\AppData\Local\Temp\cc9aA5lS.s:5      *ABS*:00000034 __CCP__
C:\Users\Brian\AppData\Local\Temp\cc9aA5lS.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Brian\AppData\Local\Temp\cc9aA5lS.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Brian\AppData\Local\Temp\cc9aA5lS.s:16     .text.USB_ShutDown:00000000 USB_ShutDown
C:\Users\Brian\AppData\Local\Temp\cc9aA5lS.s:85     .text.USB_ResetInterface:00000000 USB_ResetInterface
C:\Users\Brian\AppData\Local\Temp\cc9aA5lS.s:208    .text.USB_Init:00000000 USB_Init

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
USB_INT_DisableAllInterrupts
USB_INT_ClearAllInterrupts
USB_IsInitialized
USB_ConfigurationNumber
Endpoint_ConfigureEndpoint_Prv
