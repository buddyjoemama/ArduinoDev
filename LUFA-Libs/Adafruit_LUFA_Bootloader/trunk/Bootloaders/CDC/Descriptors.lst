   1               		.file	"Descriptors.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  14               	.global	CALLBACK_USB_GetDescriptor
  16               	CALLBACK_USB_GetDescriptor:
  17               	.LFB71:
  18               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****       www.fourwalledcubicle.com
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** Device descriptor structure. This descriptor, located in SRAM memory, describes the overall
  41:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  42:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  43:Descriptors.c ****  *  process begins.
  44:Descriptors.c ****  */
  45:Descriptors.c **** USB_Descriptor_Device_t DeviceDescriptor =
  46:Descriptors.c **** {
  47:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  48:Descriptors.c **** 
  49:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  50:Descriptors.c **** 	.Class                  = 0x02,
  51:Descriptors.c **** 	.SubClass               = 0x00,
  52:Descriptors.c **** 	.Protocol               = 0x00,
  53:Descriptors.c **** 
  54:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  55:Descriptors.c **** 
  56:Descriptors.c **** 	.VendorID               = 0x239A,       // Adafruit VID for our use only, thanks!
  57:Descriptors.c ****  	.ProductID              = 0x0001,       // #1 is the USB CDC (bootloader)
  58:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(00.01),
  59:Descriptors.c **** 
  60:Descriptors.c **** 	.ManufacturerStrIndex   = NO_DESCRIPTOR,
  61:Descriptors.c **** 	.ProductStrIndex        = 0x01,
  62:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
  63:Descriptors.c **** 
  64:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  65:Descriptors.c **** };
  66:Descriptors.c **** 
  67:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in SRAM memory, describes the usag
  68:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  69:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  70:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  71:Descriptors.c ****  */
  72:Descriptors.c **** USB_Descriptor_Configuration_t ConfigurationDescriptor =
  73:Descriptors.c **** {
  74:Descriptors.c **** 	.Config =
  75:Descriptors.c **** 		{
  76:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  77:Descriptors.c **** 
  78:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  79:Descriptors.c **** 			.TotalInterfaces        = 2,
  80:Descriptors.c **** 
  81:Descriptors.c **** 			.ConfigurationNumber    = 1,
  82:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  83:Descriptors.c **** 
  84:Descriptors.c **** 			.ConfigAttributes       = USB_CONFIG_ATTR_BUSPOWERED,
  85:Descriptors.c **** 
  86:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
  87:Descriptors.c **** 		},
  88:Descriptors.c **** 
  89:Descriptors.c **** 	.CDC_CCI_Interface =
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.InterfaceNumber        = 0,
  94:Descriptors.c **** 			.AlternateSetting       = 0,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.TotalEndpoints         = 1,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.Class                  = 0x02,
  99:Descriptors.c **** 			.SubClass               = 0x02,
 100:Descriptors.c **** 			.Protocol               = 0x01,
 101:Descriptors.c **** 
 102:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 103:Descriptors.c **** 		},
 104:Descriptors.c **** 
 105:Descriptors.c **** 	.CDC_Functional_Header =
 106:Descriptors.c **** 		{
 107:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_CDC_FunctionalHeader_t), .Type = DTYPE_
 108:Descriptors.c **** 			.Subtype                = 0x00,
 109:Descriptors.c **** 
 110:Descriptors.c **** 			.CDCSpecification       = VERSION_BCD(01.10),
 111:Descriptors.c **** 		},
 112:Descriptors.c **** 
 113:Descriptors.c **** 	.CDC_Functional_ACM =
 114:Descriptors.c **** 		{
 115:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_CDC_FunctionalACM_t), .Type = DTYPE_CSI
 116:Descriptors.c **** 			.Subtype                = 0x02,
 117:Descriptors.c **** 
 118:Descriptors.c **** 			.Capabilities           = 0x04,
 119:Descriptors.c **** 		},
 120:Descriptors.c **** 
 121:Descriptors.c **** 	.CDC_Functional_Union =
 122:Descriptors.c **** 		{
 123:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_CDC_FunctionalUnion_t), .Type = DTYPE_C
 124:Descriptors.c **** 			.Subtype                = 0x06,
 125:Descriptors.c **** 
 126:Descriptors.c **** 			.MasterInterfaceNumber  = 0,
 127:Descriptors.c **** 			.SlaveInterfaceNumber   = 1,
 128:Descriptors.c **** 		},
 129:Descriptors.c **** 
 130:Descriptors.c **** 	.CDC_NotificationEndpoint =
 131:Descriptors.c **** 		{
 132:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 133:Descriptors.c **** 
 134:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_NOTIFICATION_EPNUM),
 135:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 136:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 137:Descriptors.c **** 			.PollingIntervalMS      = 0x02
 138:Descriptors.c **** 		},
 139:Descriptors.c **** 
 140:Descriptors.c **** 	.CDC_DCI_Interface =
 141:Descriptors.c **** 		{
 142:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 143:Descriptors.c **** 
 144:Descriptors.c **** 			.InterfaceNumber        = 1,
 145:Descriptors.c **** 			.AlternateSetting       = 0,
 146:Descriptors.c **** 
 147:Descriptors.c **** 			.TotalEndpoints         = 2,
 148:Descriptors.c **** 
 149:Descriptors.c **** 			.Class                  = 0x0A,
 150:Descriptors.c **** 			.SubClass               = 0x00,
 151:Descriptors.c **** 			.Protocol               = 0x00,
 152:Descriptors.c **** 
 153:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 154:Descriptors.c **** 		},
 155:Descriptors.c **** 
 156:Descriptors.c **** 	.CDC_DataOutEndpoint =
 157:Descriptors.c **** 		{
 158:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 159:Descriptors.c **** 
 160:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_OUT | CDC_RX_EPNUM),
 161:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 162:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 163:Descriptors.c **** 			.PollingIntervalMS      = 0x00
 164:Descriptors.c **** 		},
 165:Descriptors.c **** 
 166:Descriptors.c **** 	.CDC_DataInEndpoint =
 167:Descriptors.c **** 		{
 168:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 169:Descriptors.c **** 
 170:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_TX_EPNUM),
 171:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 172:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 173:Descriptors.c **** 			.PollingIntervalMS      = 0x00
 174:Descriptors.c **** 		}
 175:Descriptors.c **** };
 176:Descriptors.c **** 
 177:Descriptors.c **** /** Language descriptor structure. This descriptor, located in SRAM memory, is returned when the ho
 178:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 179:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 180:Descriptors.c ****  */
 181:Descriptors.c **** USB_Descriptor_String_t LanguageString =
 182:Descriptors.c **** {
 183:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 184:Descriptors.c **** 
 185:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 186:Descriptors.c **** };
 187:Descriptors.c **** 
 188:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 189:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 190:Descriptors.c ****  *  Descriptor.
 191:Descriptors.c ****  */
 192:Descriptors.c **** USB_Descriptor_String_t ProductString =
 193:Descriptors.c **** {
 194:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(18), .Type = DTYPE_String},
 195:Descriptors.c **** 
 196:Descriptors.c **** 	.UnicodeString          = L"AVR CDC Bootloader"
 197:Descriptors.c **** };
 198:Descriptors.c **** 
 199:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see LUFA li
 200:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 201:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 202:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 203:Descriptors.c ****  *  USB host.
 204:Descriptors.c ****  */
 205:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 206:Descriptors.c ****                                     const uint8_t wIndex,
 207:Descriptors.c ****                                     const void** const DescriptorAddress)
 208:Descriptors.c **** {
  19               		.loc 1 208 0
  20               		.cfi_startproc
  21               	.LVL0:
  22               	/* prologue: function */
  23               	/* frame size = 0 */
  24               	/* stack size = 0 */
  25               	.L__stack_usage = 0
 209:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
 210:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 211:Descriptors.c **** 
 212:Descriptors.c **** 	const void* Address = NULL;
 213:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 214:Descriptors.c **** 
 215:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 215 0
  27 0000 9230      		cpi r25,lo8(2)
  28 0002 01F0      		breq .L4
  29 0004 9330      		cpi r25,lo8(3)
  30 0006 01F0      		breq .L5
  31 0008 9130      		cpi r25,lo8(1)
  32 000a 01F0      		breq .L7
 213:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
  33               		.loc 1 213 0
  34 000c 80E0      		ldi r24,lo8(0)
  35 000e 90E0      		ldi r25,hi8(0)
  36               	.LVL1:
 212:Descriptors.c **** 	const void* Address = NULL;
  37               		.loc 1 212 0
  38 0010 20E0      		ldi r18,lo8(0)
  39 0012 30E0      		ldi r19,hi8(0)
  40 0014 00C0      		rjmp .L3
  41               	.LVL2:
  42               	.L4:
 216:Descriptors.c **** 	{
 217:Descriptors.c **** 		case DTYPE_Device:
 218:Descriptors.c **** 			Address = &DeviceDescriptor;
 219:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 220:Descriptors.c **** 			break;
 221:Descriptors.c **** 		case DTYPE_Configuration:
 222:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 223:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  43               		.loc 1 223 0
  44 0016 8EE3      		ldi r24,lo8(62)
  45 0018 90E0      		ldi r25,hi8(62)
  46               	.LVL3:
 222:Descriptors.c **** 			Address = &ConfigurationDescriptor;
  47               		.loc 1 222 0
  48 001a 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  49 001c 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 224:Descriptors.c **** 			break;
  50               		.loc 1 224 0
  51 001e 00C0      		rjmp .L3
  52               	.LVL4:
  53               	.L5:
 225:Descriptors.c **** 		case DTYPE_String:
 226:Descriptors.c **** 			if (!(DescriptorNumber))
  54               		.loc 1 226 0
  55 0020 8823      		tst r24
  56 0022 01F4      		brne .L6
  57               	.LVL5:
 227:Descriptors.c **** 			{
 228:Descriptors.c **** 				Address = &LanguageString;
 229:Descriptors.c **** 				Size    = LanguageString.Header.Size;
  58               		.loc 1 229 0
  59 0024 8091 0000 		lds r24,LanguageString
  60               	.LVL6:
  61 0028 90E0      		ldi r25,lo8(0)
  62               	.LVL7:
 228:Descriptors.c **** 				Address = &LanguageString;
  63               		.loc 1 228 0
  64 002a 20E0      		ldi r18,lo8(LanguageString)
  65 002c 30E0      		ldi r19,hi8(LanguageString)
  66 002e 00C0      		rjmp .L3
  67               	.LVL8:
  68               	.L6:
 230:Descriptors.c **** 			}
 231:Descriptors.c **** 			else
 232:Descriptors.c **** 			{
 233:Descriptors.c **** 				Address = &ProductString;
 234:Descriptors.c **** 				Size    = ProductString.Header.Size;
  69               		.loc 1 234 0
  70 0030 8091 0000 		lds r24,ProductString
  71               	.LVL9:
  72 0034 90E0      		ldi r25,lo8(0)
  73               	.LVL10:
 233:Descriptors.c **** 				Address = &ProductString;
  74               		.loc 1 233 0
  75 0036 20E0      		ldi r18,lo8(ProductString)
  76 0038 30E0      		ldi r19,hi8(ProductString)
  77 003a 00C0      		rjmp .L3
  78               	.LVL11:
  79               	.L7:
 219:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  80               		.loc 1 219 0
  81 003c 82E1      		ldi r24,lo8(18)
  82 003e 90E0      		ldi r25,hi8(18)
  83               	.LVL12:
 218:Descriptors.c **** 			Address = &DeviceDescriptor;
  84               		.loc 1 218 0
  85 0040 20E0      		ldi r18,lo8(DeviceDescriptor)
  86 0042 30E0      		ldi r19,hi8(DeviceDescriptor)
  87               	.LVL13:
  88               	.L3:
 235:Descriptors.c **** 			}
 236:Descriptors.c **** 
 237:Descriptors.c **** 			break;
 238:Descriptors.c **** 	}
 239:Descriptors.c **** 
 240:Descriptors.c **** 	*DescriptorAddress = Address;
  89               		.loc 1 240 0
  90 0044 FA01      		movw r30,r20
  91 0046 3183      		std Z+1,r19
  92 0048 2083      		st Z,r18
  93               	/* epilogue start */
 241:Descriptors.c **** 	return Size;
 242:Descriptors.c **** }
  94               		.loc 1 242 0
  95 004a 0895      		ret
  96               		.cfi_endproc
  97               	.LFE71:
  99               	.global	ProductString
 100               		.data
 103               	ProductString:
 104 0000 26        		.byte	38
 105 0001 03        		.byte	3
 106 0002 4100      		.string	"A"
 107 0004 5600      		.string	"V"
 108 0006 5200      		.string	"R"
 109 0008 2000      		.string	" "
 110 000a 4300      		.string	"C"
 111 000c 4400      		.string	"D"
 112 000e 4300      		.string	"C"
 113 0010 2000      		.string	" "
 114 0012 4200      		.string	"B"
 115 0014 6F00      		.string	"o"
 116 0016 6F00      		.string	"o"
 117 0018 7400      		.string	"t"
 118 001a 6C00      		.string	"l"
 119 001c 6F00      		.string	"o"
 120 001e 6100      		.string	"a"
 121 0020 6400      		.string	"d"
 122 0022 6500      		.string	"e"
 123 0024 7200      		.string	"r"
 124 0026 00        		.string	""
 125 0027 00        		.string	""
 126               	.global	LanguageString
 129               	LanguageString:
 130 0028 04        		.byte	4
 131 0029 03        		.byte	3
 132 002a 0904      		.word	1033
 133               	.global	ConfigurationDescriptor
 136               	ConfigurationDescriptor:
 137 002c 09        		.byte	9
 138 002d 02        		.byte	2
 139 002e 3E00      		.word	62
 140 0030 02        		.byte	2
 141 0031 01        		.byte	1
 142 0032 00        		.byte	0
 143 0033 80        		.byte	-128
 144 0034 32        		.byte	50
 145 0035 09        		.byte	9
 146 0036 04        		.byte	4
 147 0037 00        		.byte	0
 148 0038 00        		.byte	0
 149 0039 01        		.byte	1
 150 003a 02        		.byte	2
 151 003b 02        		.byte	2
 152 003c 01        		.byte	1
 153 003d 00        		.byte	0
 154 003e 05        		.byte	5
 155 003f 24        		.byte	36
 156 0040 00        		.byte	0
 157 0041 1001      		.word	272
 158 0043 04        		.byte	4
 159 0044 24        		.byte	36
 160 0045 02        		.byte	2
 161 0046 04        		.byte	4
 162 0047 05        		.byte	5
 163 0048 24        		.byte	36
 164 0049 06        		.byte	6
 165 004a 00        		.byte	0
 166 004b 01        		.byte	1
 167 004c 07        		.byte	7
 168 004d 05        		.byte	5
 169 004e 82        		.byte	-126
 170 004f 03        		.byte	3
 171 0050 0800      		.word	8
 172 0052 02        		.byte	2
 173 0053 09        		.byte	9
 174 0054 04        		.byte	4
 175 0055 01        		.byte	1
 176 0056 00        		.byte	0
 177 0057 02        		.byte	2
 178 0058 0A        		.byte	10
 179 0059 00        		.byte	0
 180 005a 00        		.byte	0
 181 005b 00        		.byte	0
 182 005c 07        		.byte	7
 183 005d 05        		.byte	5
 184 005e 04        		.byte	4
 185 005f 02        		.byte	2
 186 0060 1000      		.word	16
 187 0062 00        		.byte	0
 188 0063 07        		.byte	7
 189 0064 05        		.byte	5
 190 0065 83        		.byte	-125
 191 0066 02        		.byte	2
 192 0067 1000      		.word	16
 193 0069 00        		.byte	0
 194               	.global	DeviceDescriptor
 197               	DeviceDescriptor:
 198 006a 12        		.byte	18
 199 006b 01        		.byte	1
 200 006c 1001      		.word	272
 201 006e 02        		.byte	2
 202 006f 00        		.byte	0
 203 0070 00        		.byte	0
 204 0071 08        		.byte	8
 205 0072 9A23      		.word	9114
 206 0074 0100      		.word	1
 207 0076 0100      		.word	1
 208 0078 00        		.byte	0
 209 0079 01        		.byte	1
 210 007a 00        		.byte	0
 211 007b 01        		.byte	1
 212               		.text
 213               	.Letext0:
 214               		.file 2 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.6.2/../..
 215               		.file 3 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.6.2/inclu
 216               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 217               		.file 5 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Descriptors.c
C:\Users\Brian\AppData\Local\Temp\ccwnBp8f.s:2      *ABS*:0000003f __SREG__
C:\Users\Brian\AppData\Local\Temp\ccwnBp8f.s:3      *ABS*:0000003e __SP_H__
C:\Users\Brian\AppData\Local\Temp\ccwnBp8f.s:4      *ABS*:0000003d __SP_L__
C:\Users\Brian\AppData\Local\Temp\ccwnBp8f.s:5      *ABS*:00000034 __CCP__
C:\Users\Brian\AppData\Local\Temp\ccwnBp8f.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Brian\AppData\Local\Temp\ccwnBp8f.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Brian\AppData\Local\Temp\ccwnBp8f.s:16     .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
C:\Users\Brian\AppData\Local\Temp\ccwnBp8f.s:136    .data:0000002c ConfigurationDescriptor
C:\Users\Brian\AppData\Local\Temp\ccwnBp8f.s:129    .data:00000028 LanguageString
C:\Users\Brian\AppData\Local\Temp\ccwnBp8f.s:103    .data:00000000 ProductString
C:\Users\Brian\AppData\Local\Temp\ccwnBp8f.s:197    .data:0000006a DeviceDescriptor

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
