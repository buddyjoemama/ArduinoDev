
BootloaderCDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00007e10  00000ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e10  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080018c  0080018c  00000f30  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001af  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002f0  00000000  00000000  00001a38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003fa6  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000faf  00000000  00000000  00005cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002256  00000000  00000000  00006c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000808  00000000  00000000  00008ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a75  00000000  00000000  000096dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002777  00000000  00000000  0000b151  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  0000d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	6e c0       	rjmp	.+220    	; 0x70e2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	6c c0       	rjmp	.+216    	; 0x70e2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	6a c0       	rjmp	.+212    	; 0x70e2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	68 c0       	rjmp	.+208    	; 0x70e2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	66 c0       	rjmp	.+204    	; 0x70e2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	64 c0       	rjmp	.+200    	; 0x70e2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	62 c0       	rjmp	.+196    	; 0x70e2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	60 c0       	rjmp	.+192    	; 0x70e2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	5e c0       	rjmp	.+188    	; 0x70e2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	56 c4       	rjmp	.+2220   	; 0x78d6 <__vector_10>
    702a:	00 00       	nop
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	58 c0       	rjmp	.+176    	; 0x70e2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	56 c0       	rjmp	.+172    	; 0x70e2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	54 c0       	rjmp	.+168    	; 0x70e2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	50 c0       	rjmp	.+160    	; 0x70e2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	4e c0       	rjmp	.+156    	; 0x70e2 <__bad_interrupt>
    7046:	00 00       	nop
    7048:	4c c0       	rjmp	.+152    	; 0x70e2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	48 c0       	rjmp	.+144    	; 0x70e2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	46 c0       	rjmp	.+140    	; 0x70e2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	44 c0       	rjmp	.+136    	; 0x70e2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	42 c0       	rjmp	.+132    	; 0x70e2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	40 c0       	rjmp	.+128    	; 0x70e2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	3e c0       	rjmp	.+124    	; 0x70e2 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	3c c0       	rjmp	.+120    	; 0x70e2 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	3a c0       	rjmp	.+116    	; 0x70e2 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	38 c0       	rjmp	.+112    	; 0x70e2 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	36 c0       	rjmp	.+108    	; 0x70e2 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	34 c0       	rjmp	.+104    	; 0x70e2 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	32 c0       	rjmp	.+100    	; 0x70e2 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	30 c0       	rjmp	.+96     	; 0x70e2 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	2e c0       	rjmp	.+92     	; 0x70e2 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	2a c0       	rjmp	.+84     	; 0x70e2 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	26 c0       	rjmp	.+76     	; 0x70e2 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	24 c0       	rjmp	.+72     	; 0x70e2 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	22 c0       	rjmp	.+68     	; 0x70e2 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	20 c0       	rjmp	.+64     	; 0x70e2 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	1e c0       	rjmp	.+60     	; 0x70e2 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <__do_copy_data>:
    70b8:	11 e0       	ldi	r17, 0x01	; 1
    70ba:	a0 e0       	ldi	r26, 0x00	; 0
    70bc:	b1 e0       	ldi	r27, 0x01	; 1
    70be:	e0 e1       	ldi	r30, 0x10	; 16
    70c0:	fe e7       	ldi	r31, 0x7E	; 126
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <__do_copy_data+0x10>
    70c4:	05 90       	lpm	r0, Z+
    70c6:	0d 92       	st	X+, r0
    70c8:	ac 38       	cpi	r26, 0x8C	; 140
    70ca:	b1 07       	cpc	r27, r17
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <__do_copy_data+0xc>

000070ce <__do_clear_bss>:
    70ce:	11 e0       	ldi	r17, 0x01	; 1
    70d0:	ac e8       	ldi	r26, 0x8C	; 140
    70d2:	b1 e0       	ldi	r27, 0x01	; 1
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <.do_clear_bss_start>

000070d6 <.do_clear_bss_loop>:
    70d6:	1d 92       	st	X+, r1

000070d8 <.do_clear_bss_start>:
    70d8:	ad 39       	cpi	r26, 0x9D	; 157
    70da:	b1 07       	cpc	r27, r17
    70dc:	e1 f7       	brne	.-8      	; 0x70d6 <.do_clear_bss_loop>
    70de:	e1 d2       	rcall	.+1474   	; 0x76a2 <main>
    70e0:	95 c6       	rjmp	.+3370   	; 0x7e0c <_exit>

000070e2 <__bad_interrupt>:
    70e2:	8e cf       	rjmp	.-228    	; 0x7000 <__vectors>

000070e4 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    70e4:	84 e0       	ldi	r24, 0x04	; 4
    70e6:	80 93 e9 00 	sts	0x00E9, r24
    70ea:	0d c0       	rjmp	.+26     	; 0x7106 <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    70ec:	80 91 e8 00 	lds	r24, 0x00E8
    70f0:	8b 77       	andi	r24, 0x7B	; 123
    70f2:	80 93 e8 00 	sts	0x00E8, r24
    70f6:	03 c0       	rjmp	.+6      	; 0x70fe <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    70f8:	8e b3       	in	r24, 0x1e	; 30
    70fa:	88 23       	and	r24, r24
    70fc:	59 f0       	breq	.+22     	; 0x7114 <FetchNextCommandByte+0x30>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    70fe:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    7102:	82 ff       	sbrs	r24, 2
    7104:	f9 cf       	rjmp	.-14     	; 0x70f8 <FetchNextCommandByte+0x14>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7106:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    710a:	85 ff       	sbrs	r24, 5
    710c:	ef cf       	rjmp	.-34     	; 0x70ec <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    710e:	80 91 f1 00 	lds	r24, 0x00F1
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_Byte();
    7112:	08 95       	ret
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return 0;
    7114:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_Byte();
}
    7116:	08 95       	ret

00007118 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7118:	93 e0       	ldi	r25, 0x03	; 3
    711a:	90 93 e9 00 	sts	0x00E9, r25
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    711e:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    7122:	95 fd       	sbrc	r25, 5
    7124:	0d c0       	rjmp	.+26     	; 0x7140 <WriteNextResponseByte+0x28>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7126:	90 91 e8 00 	lds	r25, 0x00E8
    712a:	9e 77       	andi	r25, 0x7E	; 126
    712c:	90 93 e8 00 	sts	0x00E8, r25
    7130:	03 c0       	rjmp	.+6      	; 0x7138 <WriteNextResponseByte+0x20>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7132:	9e b3       	in	r25, 0x1e	; 30
    7134:	99 23       	and	r25, r25
    7136:	31 f0       	breq	.+12     	; 0x7144 <WriteNextResponseByte+0x2c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7138:	90 91 e8 00 	lds	r25, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    713c:	90 ff       	sbrs	r25, 0
    713e:	f9 cf       	rjmp	.-14     	; 0x7132 <WriteNextResponseByte+0x1a>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    7140:	80 93 f1 00 	sts	0x00F1, r24
    7144:	08 95       	ret

00007146 <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    7146:	84 b7       	in	r24, 0x34	; 52
    7148:	87 7f       	andi	r24, 0xF7	; 247
    714a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    714c:	88 e1       	ldi	r24, 0x18	; 24
    714e:	0f b6       	in	r0, 0x3f	; 63
    7150:	f8 94       	cli
    7152:	80 93 60 00 	sts	0x0060, r24
    7156:	10 92 60 00 	sts	0x0060, r1
    715a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    715c:	90 e0       	ldi	r25, 0x00	; 0
    715e:	80 e8       	ldi	r24, 0x80	; 128
    7160:	0f b6       	in	r0, 0x3f	; 63
    7162:	f8 94       	cli
    7164:	80 93 61 00 	sts	0x0061, r24
    7168:	90 93 61 00 	sts	0x0061, r25
    716c:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    716e:	81 e0       	ldi	r24, 0x01	; 1
    7170:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    7172:	82 e0       	ldi	r24, 0x02	; 2
    7174:	85 bf       	out	0x35, r24	; 53

	/* Initialize USB Subsystem */
	USB_Init();
    7176:	99 c3       	rjmp	.+1842   	; 0x78aa <USB_Init>

00007178 <EVENT_USB_Device_ConfigurationChanged>:
    7178:	82 e0       	ldi	r24, 0x02	; 2
}
    717a:	61 ec       	ldi	r22, 0xC1	; 193
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    717c:	42 e0       	ldi	r20, 0x02	; 2
    717e:	1e d3       	rcall	.+1596   	; 0x77bc <Endpoint_ConfigureEndpoint_Prv>
    7180:	83 e0       	ldi	r24, 0x03	; 3
    7182:	61 e8       	ldi	r22, 0x81	; 129
    7184:	42 e1       	ldi	r20, 0x12	; 18
    7186:	1a d3       	rcall	.+1588   	; 0x77bc <Endpoint_ConfigureEndpoint_Prv>
    7188:	84 e0       	ldi	r24, 0x04	; 4
    718a:	60 e8       	ldi	r22, 0x80	; 128
    718c:	42 e1       	ldi	r20, 0x12	; 18
    718e:	16 c3       	rjmp	.+1580   	; 0x77bc <Endpoint_ConfigureEndpoint_Prv>

00007190 <EVENT_USB_Device_UnhandledControlRequest>:
    7190:	80 91 96 01 	lds	r24, 0x0196
    7194:	80 32       	cpi	r24, 0x20	; 32
	                           ENDPOINT_BANK_SINGLE);

	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
	                           ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
	                           ENDPOINT_BANK_SINGLE);
}
    7196:	b1 f0       	breq	.+44     	; 0x71c4 <EVENT_USB_Device_UnhandledControlRequest+0x34>
 *  which are all issued via the control endpoint), so that they can be handled appropriately for the application.
 */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    7198:	81 32       	cpi	r24, 0x21	; 33
    719a:	39 f5       	brne	.+78     	; 0x71ea <EVENT_USB_Device_UnhandledControlRequest+0x5a>
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    719c:	80 91 95 01 	lds	r24, 0x0195
    71a0:	81 3a       	cpi	r24, 0xA1	; 161
    71a2:	19 f5       	brne	.+70     	; 0x71ea <EVENT_USB_Device_UnhandledControlRequest+0x5a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    71a4:	80 91 e8 00 	lds	r24, 0x00E8
    71a8:	87 7f       	andi	r24, 0xF7	; 247
    71aa:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_Line_Coding_t));
    71ae:	89 e0       	ldi	r24, 0x09	; 9
    71b0:	91 e0       	ldi	r25, 0x01	; 1
    71b2:	67 e0       	ldi	r22, 0x07	; 7
    71b4:	70 e0       	ldi	r23, 0x00	; 0
    71b6:	57 d5       	rcall	.+2734   	; 0x7c66 <Endpoint_Write_Control_Stream_LE>
    71b8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    71bc:	8b 77       	andi	r24, 0x7B	; 123
    71be:	80 93 e8 00 	sts	0x00E8, r24
    71c2:	08 95       	ret
    71c4:	80 91 95 01 	lds	r24, 0x0195
				Endpoint_ClearOUT();
			}

			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    71c8:	81 32       	cpi	r24, 0x21	; 33
    71ca:	79 f4       	brne	.+30     	; 0x71ea <EVENT_USB_Device_UnhandledControlRequest+0x5a>
    71cc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    71d0:	87 7f       	andi	r24, 0xF7	; 247
    71d2:	80 93 e8 00 	sts	0x00E8, r24
    71d6:	89 e0       	ldi	r24, 0x09	; 9
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_Line_Coding_t));
    71d8:	91 e0       	ldi	r25, 0x01	; 1
    71da:	67 e0       	ldi	r22, 0x07	; 7
    71dc:	70 e0       	ldi	r23, 0x00	; 0
    71de:	a2 d5       	rcall	.+2884   	; 0x7d24 <Endpoint_Read_Control_Stream_LE>
    71e0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    71e4:	8e 77       	andi	r24, 0x7E	; 126
    71e6:	80 93 e8 00 	sts	0x00E8, r24
    71ea:	08 95       	ret

000071ec <CDC_Task>:
    71ec:	4f 92       	push	r4
    71ee:	5f 92       	push	r5

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    71f0:	6f 92       	push	r6
    71f2:	7f 92       	push	r7
    71f4:	8f 92       	push	r8
    71f6:	9f 92       	push	r9
    71f8:	af 92       	push	r10
    71fa:	bf 92       	push	r11
    71fc:	cf 92       	push	r12
    71fe:	df 92       	push	r13
    7200:	ef 92       	push	r14
    7202:	ff 92       	push	r15
    7204:	0f 93       	push	r16
    7206:	1f 93       	push	r17
    7208:	cf 93       	push	r28
    720a:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    720c:	84 e0       	ldi	r24, 0x04	; 4
    720e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7212:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (Endpoint_IsOUTReceived())
    7216:	82 ff       	sbrs	r24, 2
    7218:	33 c2       	rjmp	.+1126   	; 0x7680 <CDC_Task+0x494>
	{
	  // adafruit mods - we are still processing data
	  boottimeout = 0;
    721a:	10 92 8e 01 	sts	0x018E, r1


		/* Read in the bootloader command (first byte sent from host) */
		uint8_t Command = FetchNextCommandByte();
    721e:	62 df       	rcall	.-316    	; 0x70e4 <FetchNextCommandByte>
    7220:	08 2f       	mov	r16, r24
    7222:	8c 34       	cpi	r24, 0x4C	; 76

		if ((Command == 'L') || (Command == 'P') || (Command == 'T') || (Command == 'E'))
    7224:	09 f4       	brne	.+2      	; 0x7228 <CDC_Task+0x3c>
    7226:	d9 c1       	rjmp	.+946    	; 0x75da <CDC_Task+0x3ee>
    7228:	80 35       	cpi	r24, 0x50	; 80
    722a:	09 f4       	brne	.+2      	; 0x722e <CDC_Task+0x42>
    722c:	d6 c1       	rjmp	.+940    	; 0x75da <CDC_Task+0x3ee>
    722e:	84 35       	cpi	r24, 0x54	; 84
    7230:	29 f0       	breq	.+10     	; 0x723c <CDC_Task+0x50>
    7232:	85 34       	cpi	r24, 0x45	; 69
    7234:	29 f4       	brne	.+10     	; 0x7240 <CDC_Task+0x54>
    7236:	10 92 08 01 	sts	0x0108, r1
		{
			if (Command == 'E')
			  RunBootloader = false;
    723a:	cf c1       	rjmp	.+926    	; 0x75da <CDC_Task+0x3ee>
    723c:	53 df       	rcall	.-346    	; 0x70e4 <FetchNextCommandByte>
			else if (Command == 'T')
			  FetchNextCommandByte();
    723e:	cd c1       	rjmp	.+922    	; 0x75da <CDC_Task+0x3ee>
    7240:	84 37       	cpi	r24, 0x74	; 116
    7242:	21 f4       	brne	.+8      	; 0x724c <CDC_Task+0x60>

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 't')
    7244:	84 e4       	ldi	r24, 0x44	; 68
    7246:	68 df       	rcall	.-304    	; 0x7118 <WriteNextResponseByte>
		{
			/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
			WriteNextResponseByte(0x44);
    7248:	80 e0       	ldi	r24, 0x00	; 0
    724a:	f0 c1       	rjmp	.+992    	; 0x762c <CDC_Task+0x440>
    724c:	81 36       	cpi	r24, 0x61	; 97
			WriteNextResponseByte(0x00);
    724e:	11 f4       	brne	.+4      	; 0x7254 <CDC_Task+0x68>
    7250:	89 e5       	ldi	r24, 0x59	; 89
		}
		else if (Command == 'a')
    7252:	ec c1       	rjmp	.+984    	; 0x762c <CDC_Task+0x440>
    7254:	81 34       	cpi	r24, 0x41	; 65
		{
			/* Indicate auto-address increment is supported */
			WriteNextResponseByte('Y');
    7256:	f1 f4       	brne	.+60     	; 0x7294 <CDC_Task+0xa8>
    7258:	45 df       	rcall	.-374    	; 0x70e4 <FetchNextCommandByte>
		}
		else if (Command == 'A')
    725a:	38 2f       	mov	r19, r24
    725c:	33 0f       	add	r19, r19
		{
			/* Set the current address to that given by the host */
			CurrAddress   = (FetchNextCommandByte() << 9);
    725e:	20 e0       	ldi	r18, 0x00	; 0
    7260:	69 01       	movw	r12, r18
    7262:	ee 24       	eor	r14, r14
    7264:	d7 fc       	sbrc	r13, 7
    7266:	e0 94       	com	r14
    7268:	fe 2c       	mov	r15, r14
    726a:	c0 92 8f 01 	sts	0x018F, r12
    726e:	d0 92 90 01 	sts	0x0190, r13
    7272:	e0 92 91 01 	sts	0x0191, r14
    7276:	f0 92 92 01 	sts	0x0192, r15
    727a:	34 df       	rcall	.-408    	; 0x70e4 <FetchNextCommandByte>
    727c:	90 e0       	ldi	r25, 0x00	; 0
    727e:	88 0f       	add	r24, r24
    7280:	99 1f       	adc	r25, r25
			CurrAddress  |= (FetchNextCommandByte() << 1);
    7282:	aa 27       	eor	r26, r26
    7284:	97 fd       	sbrc	r25, 7
    7286:	a0 95       	com	r26
    7288:	ba 2f       	mov	r27, r26
    728a:	8c 29       	or	r24, r12
    728c:	9d 29       	or	r25, r13
    728e:	ae 29       	or	r26, r14
    7290:	bf 29       	or	r27, r15
    7292:	9b c1       	rjmp	.+822    	; 0x75ca <CDC_Task+0x3de>
    7294:	80 37       	cpi	r24, 0x70	; 112
    7296:	11 f4       	brne	.+4      	; 0x729c <CDC_Task+0xb0>
    7298:	83 e5       	ldi	r24, 0x53	; 83
    729a:	c8 c1       	rjmp	.+912    	; 0x762c <CDC_Task+0x440>
    729c:	83 35       	cpi	r24, 0x53	; 83

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 'p')
    729e:	41 f4       	brne	.+16     	; 0x72b0 <CDC_Task+0xc4>
    72a0:	c0 e0       	ldi	r28, 0x00	; 0
		{
			/* Indicate serial programmer back to the host */
			WriteNextResponseByte('S');
    72a2:	d1 e0       	ldi	r29, 0x01	; 1
    72a4:	17 e0       	ldi	r17, 0x07	; 7
		}
		else if (Command == 'S')
    72a6:	89 91       	ld	r24, Y+
    72a8:	37 df       	rcall	.-402    	; 0x7118 <WriteNextResponseByte>
    72aa:	11 50       	subi	r17, 0x01	; 1
    72ac:	e1 f7       	brne	.-8      	; 0x72a6 <CDC_Task+0xba>
    72ae:	bf c1       	rjmp	.+894    	; 0x762e <CDC_Task+0x442>
		{
			/* Write the 7-byte software identifier to the endpoint */
			for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
			  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    72b0:	86 35       	cpi	r24, 0x56	; 86
    72b2:	21 f4       	brne	.+8      	; 0x72bc <CDC_Task+0xd0>
    72b4:	81 e3       	ldi	r24, 0x31	; 49
    72b6:	30 df       	rcall	.-416    	; 0x7118 <WriteNextResponseByte>
			WriteNextResponseByte('S');
		}
		else if (Command == 'S')
		{
			/* Write the 7-byte software identifier to the endpoint */
			for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    72b8:	80 e3       	ldi	r24, 0x30	; 48
    72ba:	b8 c1       	rjmp	.+880    	; 0x762c <CDC_Task+0x440>
			  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
		}
		else if (Command == 'V')
    72bc:	83 37       	cpi	r24, 0x73	; 115
    72be:	31 f4       	brne	.+12     	; 0x72cc <CDC_Task+0xe0>
		{
			WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    72c0:	87 e8       	ldi	r24, 0x87	; 135
    72c2:	2a df       	rcall	.-428    	; 0x7118 <WriteNextResponseByte>
    72c4:	85 e9       	ldi	r24, 0x95	; 149
			WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    72c6:	28 df       	rcall	.-432    	; 0x7118 <WriteNextResponseByte>
    72c8:	8e e1       	ldi	r24, 0x1E	; 30
		}
		else if (Command == 's')
    72ca:	b0 c1       	rjmp	.+864    	; 0x762c <CDC_Task+0x440>
    72cc:	82 36       	cpi	r24, 0x62	; 98
		{
			WriteNextResponseByte(AVR_SIGNATURE_3);
    72ce:	31 f4       	brne	.+12     	; 0x72dc <CDC_Task+0xf0>
    72d0:	89 e5       	ldi	r24, 0x59	; 89
    72d2:	22 df       	rcall	.-444    	; 0x7118 <WriteNextResponseByte>
			WriteNextResponseByte(AVR_SIGNATURE_2);
    72d4:	80 e0       	ldi	r24, 0x00	; 0
    72d6:	20 df       	rcall	.-448    	; 0x7118 <WriteNextResponseByte>
    72d8:	80 e8       	ldi	r24, 0x80	; 128
			WriteNextResponseByte(AVR_SIGNATURE_1);
    72da:	a8 c1       	rjmp	.+848    	; 0x762c <CDC_Task+0x440>
    72dc:	85 36       	cpi	r24, 0x65	; 101
		}
		else if (Command == 'b')
    72de:	b9 f4       	brne	.+46     	; 0x730e <CDC_Task+0x122>
    72e0:	e0 e0       	ldi	r30, 0x00	; 0
		{
			WriteNextResponseByte('Y');
    72e2:	f0 e0       	ldi	r31, 0x00	; 0
    72e4:	93 e0       	ldi	r25, 0x03	; 3
    72e6:	85 e0       	ldi	r24, 0x05	; 5

			/* Send block size to the host */
			WriteNextResponseByte(SPM_PAGESIZE >> 8);
    72e8:	90 93 57 00 	sts	0x0057, r25
    72ec:	e8 95       	spm
			WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    72ee:	07 b6       	in	r0, 0x37	; 55
    72f0:	00 fc       	sbrc	r0, 0
		}
		else if (Command == 'e')
    72f2:	fd cf       	rjmp	.-6      	; 0x72ee <CDC_Task+0x102>
    72f4:	80 93 57 00 	sts	0x0057, r24
    72f8:	e8 95       	spm
		{
			/* Clear the application section of flash */
			for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress++)
			{
				boot_page_erase(CurrFlashAddress);
    72fa:	07 b6       	in	r0, 0x37	; 55
				boot_spm_busy_wait();
				boot_page_write(CurrFlashAddress);
    72fc:	00 fc       	sbrc	r0, 0
		else if (Command == 'e')
		{
			/* Clear the application section of flash */
			for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress++)
			{
				boot_page_erase(CurrFlashAddress);
    72fe:	fd cf       	rjmp	.-6      	; 0x72fa <CDC_Task+0x10e>
    7300:	ef 57       	subi	r30, 0x7F	; 127
    7302:	ff 4f       	sbci	r31, 0xFF	; 255
				boot_spm_busy_wait();
    7304:	20 e7       	ldi	r18, 0x70	; 112
    7306:	ef 35       	cpi	r30, 0x5F	; 95
    7308:	f2 07       	cpc	r31, r18
				boot_page_write(CurrFlashAddress);
    730a:	71 f7       	brne	.-36     	; 0x72e8 <CDC_Task+0xfc>
    730c:	66 c1       	rjmp	.+716    	; 0x75da <CDC_Task+0x3ee>
    730e:	8c 36       	cpi	r24, 0x6C	; 108
				boot_spm_busy_wait();
    7310:	51 f4       	brne	.+20     	; 0x7326 <CDC_Task+0x13a>
    7312:	e8 de       	rcall	.-560    	; 0x70e4 <FetchNextCommandByte>
    7314:	80 95       	com	r24
    7316:	99 e0       	ldi	r25, 0x09	; 9
    7318:	e1 e0       	ldi	r30, 0x01	; 1
			WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
		}
		else if (Command == 'e')
		{
			/* Clear the application section of flash */
			for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress++)
    731a:	f0 e0       	ldi	r31, 0x00	; 0
    731c:	08 2e       	mov	r0, r24
    731e:	90 93 57 00 	sts	0x0057, r25
    7322:	e8 95       	spm
			}

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 'l')
    7324:	5a c1       	rjmp	.+692    	; 0x75da <CDC_Task+0x3ee>
    7326:	82 37       	cpi	r24, 0x72	; 114
		{
			/* Set the lock bits to those given by the host */
			boot_lock_bits_set(FetchNextCommandByte());
    7328:	19 f4       	brne	.+6      	; 0x7330 <CDC_Task+0x144>
    732a:	e1 e0       	ldi	r30, 0x01	; 1
    732c:	f0 e0       	ldi	r31, 0x00	; 0
    732e:	0e c0       	rjmp	.+28     	; 0x734c <CDC_Task+0x160>
    7330:	86 34       	cpi	r24, 0x46	; 70
    7332:	19 f4       	brne	.+6      	; 0x733a <CDC_Task+0x14e>
    7334:	e0 e0       	ldi	r30, 0x00	; 0
    7336:	f0 e0       	ldi	r31, 0x00	; 0
    7338:	09 c0       	rjmp	.+18     	; 0x734c <CDC_Task+0x160>
    733a:	8e 34       	cpi	r24, 0x4E	; 78
    733c:	19 f4       	brne	.+6      	; 0x7344 <CDC_Task+0x158>

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 'r')
    733e:	e3 e0       	ldi	r30, 0x03	; 3
    7340:	f0 e0       	ldi	r31, 0x00	; 0
		{
			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    7342:	04 c0       	rjmp	.+8      	; 0x734c <CDC_Task+0x160>
    7344:	81 35       	cpi	r24, 0x51	; 81
    7346:	39 f4       	brne	.+14     	; 0x7356 <CDC_Task+0x16a>
		}
		else if (Command == 'F')
    7348:	e2 e0       	ldi	r30, 0x02	; 2
    734a:	f0 e0       	ldi	r31, 0x00	; 0
		{
			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    734c:	89 e0       	ldi	r24, 0x09	; 9
    734e:	80 93 57 00 	sts	0x0057, r24
		}
		else if (Command == 'N')
    7352:	84 91       	lpm	r24, Z
    7354:	6b c1       	rjmp	.+726    	; 0x762c <CDC_Task+0x440>
		{
			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    7356:	83 34       	cpi	r24, 0x43	; 67
    7358:	71 f4       	brne	.+28     	; 0x7376 <CDC_Task+0x18a>
    735a:	c0 91 8f 01 	lds	r28, 0x018F
		}
		else if (Command == 'Q')
    735e:	d0 91 90 01 	lds	r29, 0x0190
		{
			WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    7362:	c0 de       	rcall	.-640    	; 0x70e4 <FetchNextCommandByte>
    7364:	90 e0       	ldi	r25, 0x00	; 0
    7366:	21 e0       	ldi	r18, 0x01	; 1
    7368:	fe 01       	movw	r30, r28
    736a:	0c 01       	movw	r0, r24
    736c:	20 93 57 00 	sts	0x0057, r18
		}
		else if (Command == 'C')
    7370:	e8 95       	spm
		{
			/* Write the high byte to the current flash page */
			boot_page_fill(CurrAddress, FetchNextCommandByte());
    7372:	11 24       	eor	r1, r1
    7374:	32 c1       	rjmp	.+612    	; 0x75da <CDC_Task+0x3ee>
    7376:	83 36       	cpi	r24, 0x63	; 99
    7378:	79 f4       	brne	.+30     	; 0x7398 <CDC_Task+0x1ac>
    737a:	c0 91 8f 01 	lds	r28, 0x018F
    737e:	d0 91 90 01 	lds	r29, 0x0190
    7382:	c1 60       	ori	r28, 0x01	; 1
    7384:	af de       	rcall	.-674    	; 0x70e4 <FetchNextCommandByte>
    7386:	90 e0       	ldi	r25, 0x00	; 0
    7388:	21 e0       	ldi	r18, 0x01	; 1
    738a:	fe 01       	movw	r30, r28
    738c:	0c 01       	movw	r0, r24
    738e:	20 93 57 00 	sts	0x0057, r18

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 'c')
    7392:	e8 95       	spm
		{
			/* Write the low byte to the current flash page */
			boot_page_fill(CurrAddress | 1, FetchNextCommandByte());
    7394:	11 24       	eor	r1, r1
    7396:	0e c1       	rjmp	.+540    	; 0x75b4 <CDC_Task+0x3c8>
    7398:	8d 36       	cpi	r24, 0x6D	; 109
    739a:	61 f4       	brne	.+24     	; 0x73b4 <CDC_Task+0x1c8>
    739c:	e0 91 8f 01 	lds	r30, 0x018F
    73a0:	f0 91 90 01 	lds	r31, 0x0190
    73a4:	85 e0       	ldi	r24, 0x05	; 5
    73a6:	80 93 57 00 	sts	0x0057, r24
    73aa:	e8 95       	spm
    73ac:	07 b6       	in	r0, 0x37	; 55
    73ae:	00 fc       	sbrc	r0, 0
    73b0:	fd cf       	rjmp	.-6      	; 0x73ac <CDC_Task+0x1c0>
    73b2:	13 c1       	rjmp	.+550    	; 0x75da <CDC_Task+0x3ee>
			CurrAddress += 2;

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if (Command == 'm')
    73b4:	82 34       	cpi	r24, 0x42	; 66
    73b6:	19 f0       	breq	.+6      	; 0x73be <CDC_Task+0x1d2>
		{
			/* Commit the flash page to memory */
			boot_page_write(CurrAddress);
    73b8:	87 36       	cpi	r24, 0x67	; 103
    73ba:	09 f0       	breq	.+2      	; 0x73be <CDC_Task+0x1d2>
    73bc:	dd c0       	rjmp	.+442    	; 0x7578 <CDC_Task+0x38c>
    73be:	92 de       	rcall	.-732    	; 0x70e4 <FetchNextCommandByte>
    73c0:	c8 2e       	mov	r12, r24
    73c2:	90 de       	rcall	.-736    	; 0x70e4 <FetchNextCommandByte>
    73c4:	c8 2f       	mov	r28, r24
    73c6:	8e de       	rcall	.-740    	; 0x70e4 <FetchNextCommandByte>

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    73c8:	18 2f       	mov	r17, r24
    73ca:	85 54       	subi	r24, 0x45	; 69
    73cc:	82 30       	cpi	r24, 0x02	; 2
    73ce:	08 f0       	brcs	.+2      	; 0x73d2 <CDC_Task+0x1e6>

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
		}
		else if ((Command == 'B') || (Command == 'g'))
    73d0:	2c c1       	rjmp	.+600    	; 0x762a <CDC_Task+0x43e>
    73d2:	3c 2d       	mov	r19, r12
    73d4:	20 e0       	ldi	r18, 0x00	; 0
    73d6:	d0 e0       	ldi	r29, 0x00	; 0
    73d8:	c2 2b       	or	r28, r18
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    73da:	d3 2b       	or	r29, r19
    73dc:	07 36       	cpi	r16, 0x67	; 103
    73de:	09 f0       	breq	.+2      	; 0x73e2 <CDC_Task+0x1f6>
	BlockSize |=  FetchNextCommandByte();
    73e0:	51 c0       	rjmp	.+162    	; 0x7484 <CDC_Task+0x298>
    73e2:	81 e1       	ldi	r24, 0x11	; 17
    73e4:	80 93 57 00 	sts	0x0057, r24

	MemoryType =  FetchNextCommandByte();
    73e8:	e8 95       	spm
    73ea:	00 e0       	ldi	r16, 0x00	; 0

	if ((MemoryType != 'E') && (MemoryType != 'F'))
    73ec:	cc 24       	eor	r12, r12
    73ee:	c3 94       	inc	r12
    73f0:	45 c0       	rjmp	.+138    	; 0x747c <CDC_Task+0x290>
    73f2:	16 34       	cpi	r17, 0x46	; 70
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    73f4:	09 f5       	brne	.+66     	; 0x7438 <CDC_Task+0x24c>
    73f6:	e0 2f       	mov	r30, r16
	BlockSize |=  FetchNextCommandByte();
    73f8:	f0 e0       	ldi	r31, 0x00	; 0
    73fa:	80 91 8f 01 	lds	r24, 0x018F

		return;
	}

	/* Check if command is to read memory */
	if (Command == 'g')
    73fe:	90 91 90 01 	lds	r25, 0x0190
    7402:	e8 2b       	or	r30, r24
	{
		/* Re-enable RWW section */
		boot_rww_enable();
    7404:	f9 2b       	or	r31, r25
    7406:	84 91       	lpm	r24, Z
    7408:	87 de       	rcall	.-754    	; 0x7118 <WriteNextResponseByte>
    740a:	00 23       	and	r16, r16
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
    740c:	99 f0       	breq	.+38     	; 0x7434 <CDC_Task+0x248>

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
    740e:	80 91 8f 01 	lds	r24, 0x018F
    7412:	90 91 90 01 	lds	r25, 0x0190
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    7416:	a0 91 91 01 	lds	r26, 0x0191
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    741a:	b0 91 92 01 	lds	r27, 0x0192
    741e:	02 96       	adiw	r24, 0x02	; 2
    7420:	a1 1d       	adc	r26, r1
    7422:	b1 1d       	adc	r27, r1
    7424:	80 93 8f 01 	sts	0x018F, r24
    7428:	90 93 90 01 	sts	0x0190, r25
    742c:	a0 93 91 01 	sts	0x0191, r26
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    7430:	b0 93 92 01 	sts	0x0192, r27
				  CurrAddress += 2;
    7434:	0c 25       	eor	r16, r12
    7436:	21 c0       	rjmp	.+66     	; 0x747a <CDC_Task+0x28e>
    7438:	80 91 8f 01 	lds	r24, 0x018F
    743c:	90 91 90 01 	lds	r25, 0x0190
    7440:	a0 91 91 01 	lds	r26, 0x0191
    7444:	b0 91 92 01 	lds	r27, 0x0192
    7448:	b6 95       	lsr	r27
    744a:	a7 95       	ror	r26
    744c:	97 95       	ror	r25
    744e:	87 95       	ror	r24
    7450:	c7 d4       	rcall	.+2446   	; 0x7de0 <__eerd_byte_m32u4>
    7452:	62 de       	rcall	.-828    	; 0x7118 <WriteNextResponseByte>
    7454:	80 91 8f 01 	lds	r24, 0x018F

				HighByte = !HighByte;
    7458:	90 91 90 01 	lds	r25, 0x0190
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    745c:	a0 91 91 01 	lds	r26, 0x0191
    7460:	b0 91 92 01 	lds	r27, 0x0192
    7464:	02 96       	adiw	r24, 0x02	; 2
    7466:	a1 1d       	adc	r26, r1
    7468:	b1 1d       	adc	r27, r1
    746a:	80 93 8f 01 	sts	0x018F, r24
    746e:	90 93 90 01 	sts	0x0190, r25
    7472:	a0 93 91 01 	sts	0x0191, r26
    7476:	b0 93 92 01 	sts	0x0192, r27
    747a:	21 97       	sbiw	r28, 0x01	; 1

				/* Increment the address counter after use */
				CurrAddress += 2;
    747c:	20 97       	sbiw	r28, 0x00	; 0
    747e:	09 f0       	breq	.+2      	; 0x7482 <CDC_Task+0x296>
    7480:	b8 cf       	rjmp	.-144    	; 0x73f2 <CDC_Task+0x206>
    7482:	d5 c0       	rjmp	.+426    	; 0x762e <CDC_Task+0x442>
    7484:	40 90 8f 01 	lds	r4, 0x018F
    7488:	50 90 90 01 	lds	r5, 0x0190
    748c:	60 90 91 01 	lds	r6, 0x0191
    7490:	70 90 92 01 	lds	r7, 0x0192
    7494:	16 34       	cpi	r17, 0x46	; 70
    7496:	09 f0       	breq	.+2      	; 0x749a <CDC_Task+0x2ae>
    7498:	5c c0       	rjmp	.+184    	; 0x7552 <CDC_Task+0x366>
    749a:	83 e0       	ldi	r24, 0x03	; 3
    749c:	f2 01       	movw	r30, r4
    749e:	80 93 57 00 	sts	0x0057, r24
    74a2:	e8 95       	spm
	if (Command == 'g')
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    74a4:	07 b6       	in	r0, 0x37	; 55
    74a6:	00 fc       	sbrc	r0, 0
    74a8:	fd cf       	rjmp	.-6      	; 0x74a4 <CDC_Task+0x2b8>
    74aa:	53 c0       	rjmp	.+166    	; 0x7552 <CDC_Task+0x366>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    74ac:	16 34       	cpi	r17, 0x46	; 70
    74ae:	61 f5       	brne	.+88     	; 0x7508 <CDC_Task+0x31c>
    74b0:	00 23       	and	r16, r16
    74b2:	31 f1       	breq	.+76     	; 0x7500 <CDC_Task+0x314>
    74b4:	c0 90 8f 01 	lds	r12, 0x018F
    74b8:	d0 90 90 01 	lds	r13, 0x0190

		if (MemoryType == 'F')
    74bc:	13 de       	rcall	.-986    	; 0x70e4 <FetchNextCommandByte>
    74be:	98 2e       	mov	r9, r24
    74c0:	88 24       	eor	r8, r8
		{
			boot_page_erase(PageStartAddress);
    74c2:	8b 2d       	mov	r24, r11
    74c4:	90 e0       	ldi	r25, 0x00	; 0
    74c6:	88 29       	or	r24, r8
    74c8:	99 29       	or	r25, r9
    74ca:	f6 01       	movw	r30, r12
			boot_spm_busy_wait();
    74cc:	0c 01       	movw	r0, r24
    74ce:	a0 92 57 00 	sts	0x0057, r10
    74d2:	e8 95       	spm
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    74d4:	11 24       	eor	r1, r1
    74d6:	80 91 8f 01 	lds	r24, 0x018F
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    74da:	90 91 90 01 	lds	r25, 0x0190
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    74de:	a0 91 91 01 	lds	r26, 0x0191
    74e2:	b0 91 92 01 	lds	r27, 0x0192
    74e6:	02 96       	adiw	r24, 0x02	; 2
    74e8:	a1 1d       	adc	r26, r1
    74ea:	b1 1d       	adc	r27, r1
    74ec:	80 93 8f 01 	sts	0x018F, r24
    74f0:	90 93 90 01 	sts	0x0190, r25
    74f4:	a0 93 91 01 	sts	0x0191, r26
    74f8:	b0 93 92 01 	sts	0x0192, r27
    74fc:	00 e0       	ldi	r16, 0x00	; 0
    74fe:	27 c0       	rjmp	.+78     	; 0x754e <CDC_Task+0x362>

					/* Increment the address counter after use */
					CurrAddress += 2;
    7500:	f1 dd       	rcall	.-1054   	; 0x70e4 <FetchNextCommandByte>
    7502:	b8 2e       	mov	r11, r24
    7504:	01 e0       	ldi	r16, 0x01	; 1
    7506:	23 c0       	rjmp	.+70     	; 0x754e <CDC_Task+0x362>
    7508:	c0 90 8f 01 	lds	r12, 0x018F
    750c:	d0 90 90 01 	lds	r13, 0x0190
    7510:	e0 90 91 01 	lds	r14, 0x0191
    7514:	f0 90 92 01 	lds	r15, 0x0192
    7518:	f6 94       	lsr	r15
    751a:	e7 94       	ror	r14
    751c:	d7 94       	ror	r13
    751e:	c7 94       	ror	r12
    7520:	e1 dd       	rcall	.-1086   	; 0x70e4 <FetchNextCommandByte>
    7522:	68 2f       	mov	r22, r24
    7524:	c6 01       	movw	r24, r12

					HighByte = false;
    7526:	64 d4       	rcall	.+2248   	; 0x7df0 <__eewr_byte_m32u4>
    7528:	80 91 8f 01 	lds	r24, 0x018F
				}
				else
				{
					LowByte = FetchNextCommandByte();
    752c:	90 91 90 01 	lds	r25, 0x0190

					HighByte = true;
    7530:	a0 91 91 01 	lds	r26, 0x0191
				}
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    7534:	b0 91 92 01 	lds	r27, 0x0192
    7538:	02 96       	adiw	r24, 0x02	; 2
    753a:	a1 1d       	adc	r26, r1
    753c:	b1 1d       	adc	r27, r1
    753e:	80 93 8f 01 	sts	0x018F, r24
    7542:	90 93 90 01 	sts	0x0190, r25
    7546:	a0 93 91 01 	sts	0x0191, r26
    754a:	b0 93 92 01 	sts	0x0192, r27
    754e:	21 97       	sbiw	r28, 0x01	; 1
    7550:	04 c0       	rjmp	.+8      	; 0x755a <CDC_Task+0x36e>
    7552:	bb 24       	eor	r11, r11
    7554:	00 e0       	ldi	r16, 0x00	; 0
    7556:	aa 24       	eor	r10, r10

				/* Increment the address counter after use */
				CurrAddress += 2;
    7558:	a3 94       	inc	r10
    755a:	20 97       	sbiw	r28, 0x00	; 0
    755c:	09 f0       	breq	.+2      	; 0x7560 <CDC_Task+0x374>
    755e:	a6 cf       	rjmp	.-180    	; 0x74ac <CDC_Task+0x2c0>
    7560:	16 34       	cpi	r17, 0x46	; 70
    7562:	09 f0       	breq	.+2      	; 0x7566 <CDC_Task+0x37a>
    7564:	3a c0       	rjmp	.+116    	; 0x75da <CDC_Task+0x3ee>
    7566:	85 e0       	ldi	r24, 0x05	; 5
    7568:	f2 01       	movw	r30, r4
    756a:	80 93 57 00 	sts	0x0057, r24
    756e:	e8 95       	spm
    7570:	07 b6       	in	r0, 0x37	; 55
    7572:	00 fc       	sbrc	r0, 0
    7574:	fd cf       	rjmp	.-6      	; 0x7570 <CDC_Task+0x384>
    7576:	31 c0       	rjmp	.+98     	; 0x75da <CDC_Task+0x3ee>
    7578:	82 35       	cpi	r24, 0x52	; 82
    757a:	51 f4       	brne	.+20     	; 0x7590 <CDC_Task+0x3a4>
    757c:	e0 91 8f 01 	lds	r30, 0x018F
    7580:	f0 91 90 01 	lds	r31, 0x0190
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == 'F')
    7584:	c5 91       	lpm	r28, Z+
				}
				else
				{
					LowByte = FetchNextCommandByte();

					HighByte = true;
    7586:	d4 91       	lpm	r29, Z
    7588:	8d 2f       	mov	r24, r29
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    758a:	c6 dd       	rcall	.-1140   	; 0x7118 <WriteNextResponseByte>
    758c:	8c 2f       	mov	r24, r28
    758e:	4e c0       	rjmp	.+156    	; 0x762c <CDC_Task+0x440>
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
    7590:	84 34       	cpi	r24, 0x44	; 68
    7592:	29 f5       	brne	.+74     	; 0x75de <CDC_Task+0x3f2>
    7594:	c0 90 8f 01 	lds	r12, 0x018F
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    7598:	d0 90 90 01 	lds	r13, 0x0190
    759c:	e0 90 91 01 	lds	r14, 0x0191

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    75a0:	f0 90 92 01 	lds	r15, 0x0192
    75a4:	f6 94       	lsr	r15
    75a6:	e7 94       	ror	r14
		else if ((Command == 'B') || (Command == 'g'))
		{
			/* Delegate the block write/read to a separate function for clarity */
			ReadWriteMemoryBlock(Command);
		}
		else if (Command == 'R')
    75a8:	d7 94       	ror	r13
    75aa:	c7 94       	ror	r12
		{
			#if (FLASHEND > 0xFFFF)
			uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
			#else
			uint16_t ProgramWord = pgm_read_word(CurrAddress);
    75ac:	9b dd       	rcall	.-1226   	; 0x70e4 <FetchNextCommandByte>
    75ae:	68 2f       	mov	r22, r24
    75b0:	c6 01       	movw	r24, r12
    75b2:	1e d4       	rcall	.+2108   	; 0x7df0 <__eewr_byte_m32u4>
    75b4:	80 91 8f 01 	lds	r24, 0x018F
			#endif

			WriteNextResponseByte(ProgramWord >> 8);
    75b8:	90 91 90 01 	lds	r25, 0x0190
    75bc:	a0 91 91 01 	lds	r26, 0x0191
			WriteNextResponseByte(ProgramWord & 0xFF);
    75c0:	b0 91 92 01 	lds	r27, 0x0192
		}
		else if (Command == 'D')
    75c4:	02 96       	adiw	r24, 0x02	; 2
		{
			/* Read the byte from the endpoint and write it to the EEPROM */
			eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    75c6:	a1 1d       	adc	r26, r1
    75c8:	b1 1d       	adc	r27, r1
    75ca:	80 93 8f 01 	sts	0x018F, r24
    75ce:	90 93 90 01 	sts	0x0190, r25
    75d2:	a0 93 91 01 	sts	0x0191, r26
    75d6:	b0 93 92 01 	sts	0x0192, r27
    75da:	8d e0       	ldi	r24, 0x0D	; 13
    75dc:	27 c0       	rjmp	.+78     	; 0x762c <CDC_Task+0x440>
    75de:	84 36       	cpi	r24, 0x64	; 100
    75e0:	11 f5       	brne	.+68     	; 0x7626 <CDC_Task+0x43a>
    75e2:	80 91 8f 01 	lds	r24, 0x018F
    75e6:	90 91 90 01 	lds	r25, 0x0190

			/* Increment the address after use */
			CurrAddress += 2;
    75ea:	a0 91 91 01 	lds	r26, 0x0191
    75ee:	b0 91 92 01 	lds	r27, 0x0192
    75f2:	b6 95       	lsr	r27
    75f4:	a7 95       	ror	r26
    75f6:	97 95       	ror	r25
    75f8:	87 95       	ror	r24
    75fa:	f2 d3       	rcall	.+2020   	; 0x7de0 <__eerd_byte_m32u4>
    75fc:	8d dd       	rcall	.-1254   	; 0x7118 <WriteNextResponseByte>
    75fe:	80 91 8f 01 	lds	r24, 0x018F
    7602:	90 91 90 01 	lds	r25, 0x0190
    7606:	a0 91 91 01 	lds	r26, 0x0191
    760a:	b0 91 92 01 	lds	r27, 0x0192
    760e:	02 96       	adiw	r24, 0x02	; 2

			/* Send confirmation byte back to the host */
			WriteNextResponseByte('\r');
    7610:	a1 1d       	adc	r26, r1
    7612:	b1 1d       	adc	r27, r1
		}
		else if (Command == 'd')
    7614:	80 93 8f 01 	sts	0x018F, r24
		{
			/* Read the EEPROM byte and write it to the endpoint */
			WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    7618:	90 93 90 01 	sts	0x0190, r25
    761c:	a0 93 91 01 	sts	0x0191, r26
    7620:	b0 93 92 01 	sts	0x0192, r27
    7624:	04 c0       	rjmp	.+8      	; 0x762e <CDC_Task+0x442>
    7626:	8b 31       	cpi	r24, 0x1B	; 27
    7628:	11 f0       	breq	.+4      	; 0x762e <CDC_Task+0x442>
    762a:	8f e3       	ldi	r24, 0x3F	; 63
    762c:	75 dd       	rcall	.-1302   	; 0x7118 <WriteNextResponseByte>
    762e:	83 e0       	ldi	r24, 0x03	; 3
    7630:	80 93 e9 00 	sts	0x00E9, r24
    7634:	90 91 e8 00 	lds	r25, 0x00E8

			/* Increment the address after use */
			CurrAddress += 2;
    7638:	80 91 e8 00 	lds	r24, 0x00E8
    763c:	8e 77       	andi	r24, 0x7E	; 126
    763e:	80 93 e8 00 	sts	0x00E8, r24
    7642:	95 ff       	sbrs	r25, 5
    7644:	04 c0       	rjmp	.+8      	; 0x764e <CDC_Task+0x462>
    7646:	10 c0       	rjmp	.+32     	; 0x7668 <CDC_Task+0x47c>
    7648:	8e b3       	in	r24, 0x1e	; 30
    764a:	88 23       	and	r24, r24
    764c:	c9 f0       	breq	.+50     	; 0x7680 <CDC_Task+0x494>
    764e:	80 91 e8 00 	lds	r24, 0x00E8
    7652:	80 ff       	sbrs	r24, 0
    7654:	f9 cf       	rjmp	.-14     	; 0x7648 <CDC_Task+0x45c>
    7656:	80 91 e8 00 	lds	r24, 0x00E8
    765a:	8e 77       	andi	r24, 0x7E	; 126
    765c:	80 93 e8 00 	sts	0x00E8, r24
		}
		else if (Command == 27)
    7660:	03 c0       	rjmp	.+6      	; 0x7668 <CDC_Task+0x47c>
    7662:	8e b3       	in	r24, 0x1e	; 30
			/* Escape is sync, ignore */
		}
		else
		{
			/* Unknown command, return fail code */
			WriteNextResponseByte('?');
    7664:	88 23       	and	r24, r24
    7666:	61 f0       	breq	.+24     	; 0x7680 <CDC_Task+0x494>
    7668:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    766c:	80 ff       	sbrs	r24, 0
    766e:	f9 cf       	rjmp	.-14     	; 0x7662 <CDC_Task+0x476>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7670:	84 e0       	ldi	r24, 0x04	; 4
    7672:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7676:	80 91 e8 00 	lds	r24, 0x00E8
    767a:	8b 77       	andi	r24, 0x7B	; 123
    767c:	80 93 e8 00 	sts	0x00E8, r24

		/* Send the endpoint data to the host */
		Endpoint_ClearIN();

		/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
		if (IsEndpointFull)
    7680:	df 91       	pop	r29
    7682:	cf 91       	pop	r28
		{
			while (!(Endpoint_IsINReady()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    7684:	1f 91       	pop	r17
    7686:	0f 91       	pop	r16
    7688:	ff 90       	pop	r15
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    768a:	ef 90       	pop	r14
    768c:	df 90       	pop	r13
		Endpoint_ClearIN();

		/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
		if (IsEndpointFull)
		{
			while (!(Endpoint_IsINReady()))
    768e:	cf 90       	pop	r12
    7690:	bf 90       	pop	r11
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7692:	af 90       	pop	r10
    7694:	9f 90       	pop	r9
    7696:	8f 90       	pop	r8
    7698:	7f 90       	pop	r7
    769a:	6f 90       	pop	r6
    769c:	5f 90       	pop	r5
		}

		/* Wait until the data has been sent to the host */
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    769e:	4f 90       	pop	r4
    76a0:	08 95       	ret

000076a2 <main>:
    76a2:	cf 93       	push	r28
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    76a4:	df 93       	push	r29
    76a6:	0f 92       	push	r0

			Endpoint_ClearIN();
		}

		/* Wait until the data has been sent to the host */
		while (!(Endpoint_IsINReady()))
    76a8:	cd b7       	in	r28, 0x3d	; 61
    76aa:	de b7       	in	r29, 0x3e	; 62
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    76ac:	84 b7       	in	r24, 0x34	; 52
    76ae:	14 be       	out	0x34, r1	; 52
    76b0:	90 91 60 00 	lds	r25, 0x0060
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    76b4:	98 61       	ori	r25, 0x18	; 24
    76b6:	90 93 60 00 	sts	0x0060, r25
    76ba:	10 92 60 00 	sts	0x0060, r1
		Endpoint_SelectEndpoint(CDC_RX_EPNUM);

		/* Acknowledge the command from the host */
		Endpoint_ClearOUT();
	}
}
    76be:	10 92 8e 01 	sts	0x018E, r1
    76c2:	90 e0       	ldi	r25, 0x00	; 0
    76c4:	fc 01       	movw	r30, r24
    76c6:	e2 70       	andi	r30, 0x02	; 2
    76c8:	f0 70       	andi	r31, 0x00	; 0
    76ca:	81 fd       	sbrc	r24, 1
    76cc:	0b c0       	rjmp	.+22     	; 0x76e4 <main+0x42>
    76ce:	85 91       	lpm	r24, Z+
    76d0:	94 91       	lpm	r25, Z
    76d2:	2f ef       	ldi	r18, 0xFF	; 255
    76d4:	8f 3f       	cpi	r24, 0xFF	; 255
    76d6:	92 07       	cpc	r25, r18
    76d8:	29 f0       	breq	.+10     	; 0x76e4 <main+0x42>
    76da:	e0 91 8c 01 	lds	r30, 0x018C

  boottimeout = 0;

  if (! (ch &  _BV(EXTRF)) &&  (pgm_read_word_near(0) != 0xFFFF)) {
    // if its a not an external reset...
    app_start();  // skip bootloader
    76de:	f0 91 8d 01 	lds	r31, 0x018D
    76e2:	09 95       	icall
  }

  /* End Adafruit Mods */

	/* Setup hardware required for the bootloader */
	SetupHardware();
    76e4:	30 dd       	rcall	.-1440   	; 0x7146 <SetupHardware>
    76e6:	6e 9a       	sbi	0x0d, 6	; 13

	// adafruit board - turn on the LED to indicate the bootloader is active 

	BOOTLOADERLED_DDR |= _BV( BOOTLOADERLED);
    76e8:	76 9a       	sbi	0x0e, 6	; 14
	BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);
    76ea:	78 94       	sei
	uint8_t brightness = 0; // for the LED pulsing
	int8_t pulsedirection = 1;
	// end adafruit mods

	/* Enable global interrupts so that the USB stack can function */
	sei();
    76ec:	81 e0       	ldi	r24, 0x01	; 1
	BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);

	uint16_t blinkycounter = 0;
	uint8_t pwmcounter = 0; // for the LED pulsing
	uint8_t brightness = 0; // for the LED pulsing
	int8_t pulsedirection = 1;
    76ee:	10 e0       	ldi	r17, 0x00	; 0
	BOOTLOADERLED_DDR |= _BV( BOOTLOADERLED);
	BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);

	uint16_t blinkycounter = 0;
	uint8_t pwmcounter = 0; // for the LED pulsing
	uint8_t brightness = 0; // for the LED pulsing
    76f0:	00 e0       	ldi	r16, 0x00	; 0

	BOOTLOADERLED_DDR |= _BV( BOOTLOADERLED);
	BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);

	uint16_t blinkycounter = 0;
	uint8_t pwmcounter = 0; // for the LED pulsing
    76f2:	e0 e0       	ldi	r30, 0x00	; 0
		} 
		
		// we took a long time, lets restart
		if (boottimeout >= BOOTLOADTIMEOUT) {
		  // check to see if we have any code loaded. if the first byte is blank, we shouldn't go
		  if (pgm_read_word_near(0) != 0xFFFF) {
    76f4:	f0 e0       	ldi	r31, 0x00	; 0
    76f6:	e5 90       	lpm	r14, Z+
    76f8:	f4 90       	lpm	r15, Z
    76fa:	25 c0       	rjmp	.+74     	; 0x7746 <main+0xa4>
	// end adafruit mods

	/* Enable global interrupts so that the USB stack can function */
	sei();

	while (RunBootloader)
    76fc:	89 83       	std	Y+1, r24	; 0x01
	{
		CDC_Task();
    76fe:	76 dd       	rcall	.-1300   	; 0x71ec <CDC_Task>
    7700:	5d d3       	rcall	.+1722   	; 0x7dbc <USB_USBTask>
    7702:	0f 5f       	subi	r16, 0xFF	; 255
		USB_USBTask();
    7704:	89 81       	ldd	r24, Y+1	; 0x01
    7706:	00 23       	and	r16, r16
		
		// Adafruit mods = we'll pulse an LED to indicate the bootloader is active
		pwmcounter++;
    7708:	11 f4       	brne	.+4      	; 0x770e <main+0x6c>
		
		// after each PWM cycle, increase/decrease the brightness
		if (pwmcounter == 0) {
    770a:	18 0f       	add	r17, r24
    770c:	76 9a       	sbi	0x0e, 6	; 14
    770e:	01 17       	cp	r16, r17
		  brightness += pulsedirection;
    7710:	09 f4       	brne	.+2      	; 0x7714 <main+0x72>
		  BOOTLOADERLED_PORT |= _BV( BOOTLOADERLED);
    7712:	76 98       	cbi	0x0e, 6	; 14
		}

		// PWM compare match
		if (pwmcounter == brightness) {
    7714:	1f 3f       	cpi	r17, 0xFF	; 255
    7716:	59 f0       	breq	.+22     	; 0x772e <main+0x8c>
		  BOOTLOADERLED_PORT &= ~_BV( BOOTLOADERLED);
    7718:	11 23       	and	r17, r17
		}

		// make the bootloade LED pulse up and down
		if (brightness == 255) {
    771a:	51 f4       	brne	.+20     	; 0x7730 <main+0x8e>
    771c:	81 30       	cpi	r24, 0x01	; 1
		  pulsedirection = -1;
		}
		if ((brightness == 0) && (pulsedirection != 1)) {
    771e:	41 f0       	breq	.+16     	; 0x7730 <main+0x8e>
    7720:	80 91 8e 01 	lds	r24, 0x018E
    7724:	8f 5f       	subi	r24, 0xFF	; 255
		  pulsedirection = 1;

		  // each full pulse takes about one second
		  boottimeout++;
    7726:	80 93 8e 01 	sts	0x018E, r24
    772a:	81 e0       	ldi	r24, 0x01	; 1
    772c:	01 c0       	rjmp	.+2      	; 0x7730 <main+0x8e>
    772e:	8f ef       	ldi	r24, 0xFF	; 255
		// make the bootloade LED pulse up and down
		if (brightness == 255) {
		  pulsedirection = -1;
		}
		if ((brightness == 0) && (pulsedirection != 1)) {
		  pulsedirection = 1;
    7730:	90 91 8e 01 	lds	r25, 0x018E
		  BOOTLOADERLED_PORT &= ~_BV( BOOTLOADERLED);
		}

		// make the bootloade LED pulse up and down
		if (brightness == 255) {
		  pulsedirection = -1;
    7734:	94 31       	cpi	r25, 0x14	; 20
		  // each full pulse takes about one second
		  boottimeout++;
		} 
		
		// we took a long time, lets restart
		if (boottimeout >= BOOTLOADTIMEOUT) {
    7736:	38 f0       	brcs	.+14     	; 0x7746 <main+0xa4>
    7738:	9f ef       	ldi	r25, 0xFF	; 255
    773a:	e9 16       	cp	r14, r25
    773c:	9f ef       	ldi	r25, 0xFF	; 255
		  // check to see if we have any code loaded. if the first byte is blank, we shouldn't go
		  if (pgm_read_word_near(0) != 0xFFFF) {
    773e:	f9 06       	cpc	r15, r25
    7740:	11 f0       	breq	.+4      	; 0x7746 <main+0xa4>
    7742:	10 92 08 01 	sts	0x0108, r1
    7746:	90 91 08 01 	lds	r25, 0x0108
		    // jump to code
		    RunBootloader = false;
    774a:	99 23       	and	r25, r25
	// end adafruit mods

	/* Enable global interrupts so that the USB stack can function */
	sei();

	while (RunBootloader)
    774c:	b9 f6       	brne	.-82     	; 0x76fc <main+0x5a>
    774e:	80 91 e0 00 	lds	r24, 0x00E0
    7752:	81 60       	ori	r24, 0x01	; 1
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    7754:	80 93 e0 00 	sts	0x00E0, r24
    7758:	2c e0       	ldi	r18, 0x0C	; 12
    775a:	88 e1       	ldi	r24, 0x18	; 24
    775c:	90 e0       	ldi	r25, 0x00	; 0

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
    775e:	0f b6       	in	r0, 0x3f	; 63
    7760:	f8 94       	cli
    7762:	a8 95       	wdr
    7764:	80 93 60 00 	sts	0x0060, r24
    7768:	0f be       	out	0x3f, r0	; 63
    776a:	20 93 60 00 	sts	0x0060, r18
    776e:	ff cf       	rjmp	.-2      	; 0x776e <main+0xcc>

00007770 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    7770:	92 30       	cpi	r25, 0x02	; 2
    7772:	49 f0       	breq	.+18     	; 0x7786 <CALLBACK_USB_GetDescriptor+0x16>
    7774:	93 30       	cpi	r25, 0x03	; 3
    7776:	61 f0       	breq	.+24     	; 0x7790 <CALLBACK_USB_GetDescriptor+0x20>
    7778:	91 30       	cpi	r25, 0x01	; 1
    777a:	c1 f0       	breq	.+48     	; 0x77ac <CALLBACK_USB_GetDescriptor+0x3c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    777c:	80 e0       	ldi	r24, 0x00	; 0
    777e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    7780:	20 e0       	ldi	r18, 0x00	; 0
    7782:	30 e0       	ldi	r19, 0x00	; 0
    7784:	17 c0       	rjmp	.+46     	; 0x77b4 <CALLBACK_USB_GetDescriptor+0x44>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    7786:	8e e3       	ldi	r24, 0x3E	; 62
    7788:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    778a:	2c e3       	ldi	r18, 0x3C	; 60
    778c:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    778e:	12 c0       	rjmp	.+36     	; 0x77b4 <CALLBACK_USB_GetDescriptor+0x44>
		case DTYPE_String:
			if (!(DescriptorNumber))
    7790:	88 23       	and	r24, r24
    7792:	31 f4       	brne	.+12     	; 0x77a0 <CALLBACK_USB_GetDescriptor+0x30>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    7794:	80 91 38 01 	lds	r24, 0x0138
    7798:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    779a:	28 e3       	ldi	r18, 0x38	; 56
    779c:	31 e0       	ldi	r19, 0x01	; 1
    779e:	0a c0       	rjmp	.+20     	; 0x77b4 <CALLBACK_USB_GetDescriptor+0x44>
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    77a0:	80 91 10 01 	lds	r24, 0x0110
    77a4:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else
			{
				Address = &ProductString;
    77a6:	20 e1       	ldi	r18, 0x10	; 16
    77a8:	31 e0       	ldi	r19, 0x01	; 1
    77aa:	04 c0       	rjmp	.+8      	; 0x77b4 <CALLBACK_USB_GetDescriptor+0x44>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    77ac:	82 e1       	ldi	r24, 0x12	; 18
    77ae:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    77b0:	2a e7       	ldi	r18, 0x7A	; 122
    77b2:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    77b4:	fa 01       	movw	r30, r20
    77b6:	31 83       	std	Z+1, r19	; 0x01
    77b8:	20 83       	st	Z, r18
	return Size;
}
    77ba:	08 95       	ret

000077bc <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    77bc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    77c0:	eb ee       	ldi	r30, 0xEB	; 235
    77c2:	f0 e0       	ldi	r31, 0x00	; 0
    77c4:	80 81       	ld	r24, Z
    77c6:	81 60       	ori	r24, 0x01	; 1
    77c8:	80 83       	st	Z, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    77ca:	ed ee       	ldi	r30, 0xED	; 237
    77cc:	f0 e0       	ldi	r31, 0x00	; 0
    77ce:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    77d0:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    77d4:	40 83       	st	Z, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    77d6:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
    77da:	88 1f       	adc	r24, r24
    77dc:	88 27       	eor	r24, r24
    77de:	88 1f       	adc	r24, r24
    77e0:	08 95       	ret

000077e2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    77e2:	80 91 95 01 	lds	r24, 0x0195
    77e6:	87 ff       	sbrs	r24, 7
    77e8:	11 c0       	rjmp	.+34     	; 0x780c <Endpoint_ClearStatusStage+0x2a>
    77ea:	03 c0       	rjmp	.+6      	; 0x77f2 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    77ec:	8e b3       	in	r24, 0x1e	; 30
    77ee:	88 23       	and	r24, r24
    77f0:	b1 f0       	breq	.+44     	; 0x781e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    77f2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    77f6:	82 ff       	sbrs	r24, 2
    77f8:	f9 cf       	rjmp	.-14     	; 0x77ec <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    77fa:	80 91 e8 00 	lds	r24, 0x00E8
    77fe:	8b 77       	andi	r24, 0x7B	; 123
    7800:	80 93 e8 00 	sts	0x00E8, r24
    7804:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7806:	8e b3       	in	r24, 0x1e	; 30
    7808:	88 23       	and	r24, r24
    780a:	49 f0       	breq	.+18     	; 0x781e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    780c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    7810:	80 ff       	sbrs	r24, 0
    7812:	f9 cf       	rjmp	.-14     	; 0x7806 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7814:	80 91 e8 00 	lds	r24, 0x00E8
    7818:	8e 77       	andi	r24, 0x7E	; 126
    781a:	80 93 e8 00 	sts	0x00E8, r24
    781e:	08 95       	ret

00007820 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    7820:	4d d0       	rcall	.+154    	; 0x78bc <USB_INT_DisableAllInterrupts>
    7822:	54 d0       	rcall	.+168    	; 0x78cc <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7824:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    7828:	98 2f       	mov	r25, r24
    782a:	9f 77       	andi	r25, 0x7F	; 127

				USBCON = (Temp & ~(1 << USBE));
    782c:	90 93 d8 00 	sts	0x00D8, r25
    7830:	80 68       	ori	r24, 0x80	; 128
    7832:	80 93 d8 00 	sts	0x00D8, r24
				USBCON = (Temp |  (1 << USBE));
    7836:	8a e4       	ldi	r24, 0x4A	; 74
    7838:	82 bf       	out	0x32, r24	; 50
	USB_Controller_Reset();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    783a:	80 e1       	ldi	r24, 0x10	; 16
    783c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    783e:	89 b5       	in	r24, 0x29	; 41
    7840:	82 60       	ori	r24, 0x02	; 2
				PLLCSR |= (1 << PLLE);
    7842:	89 bd       	out	0x29, r24	; 41
    7844:	09 b4       	in	r0, 0x29	; 41
    7846:	00 fe       	sbrs	r0, 0
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    7848:	fd cf       	rjmp	.-6      	; 0x7844 <USB_ResetInterface+0x24>
    784a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    784e:	8f 7d       	andi	r24, 0xDF	; 223
    7850:	80 93 d8 00 	sts	0x00D8, r24
    7854:	1e ba       	out	0x1e, r1	; 30
    7856:	10 92 93 01 	sts	0x0193, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
	USB_ConfigurationNumber  = 0;
    785a:	80 91 e0 00 	lds	r24, 0x00E0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    785e:	8b 7f       	andi	r24, 0xFB	; 251
    7860:	80 93 e0 00 	sts	0x00E0, r24
    7864:	80 91 d8 00 	lds	r24, 0x00D8
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
    7868:	81 60       	ori	r24, 0x01	; 1
    786a:	80 93 d8 00 	sts	0x00D8, r24
    786e:	80 e0       	ldi	r24, 0x00	; 0
    7870:	60 e0       	ldi	r22, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    7872:	42 e0       	ldi	r20, 0x02	; 2
    7874:	a3 df       	rcall	.-186    	; 0x77bc <Endpoint_ConfigureEndpoint_Prv>
    7876:	80 91 e1 00 	lds	r24, 0x00E1
    787a:	8e 7f       	andi	r24, 0xFE	; 254

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
    787c:	80 93 e1 00 	sts	0x00E1, r24
    7880:	80 91 e2 00 	lds	r24, 0x00E2
    7884:	81 60       	ori	r24, 0x01	; 1
	USB_INT_Enable(USB_INT_SUSPI);
    7886:	80 93 e2 00 	sts	0x00E2, r24
    788a:	80 91 e2 00 	lds	r24, 0x00E2
    788e:	88 60       	ori	r24, 0x08	; 8
	USB_INT_Enable(USB_INT_EORSTI);
    7890:	80 93 e2 00 	sts	0x00E2, r24
    7894:	80 91 e0 00 	lds	r24, 0x00E0
    7898:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    789a:	80 93 e0 00 	sts	0x00E0, r24
    789e:	80 91 d8 00 	lds	r24, 0x00D8
    78a2:	80 61       	ori	r24, 0x10	; 16

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    78a4:	80 93 d8 00 	sts	0x00D8, r24
    78a8:	08 95       	ret

000078aa <USB_Init>:
    78aa:	e7 ed       	ldi	r30, 0xD7	; 215
    78ac:	f0 e0       	ldi	r31, 0x00	; 0
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    78ae:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    78b0:	81 60       	ori	r24, 0x01	; 1
    78b2:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    78b4:	81 e0       	ldi	r24, 0x01	; 1
    78b6:	80 93 94 01 	sts	0x0194, r24

	USB_ResetInterface();
    78ba:	b2 cf       	rjmp	.-156    	; 0x7820 <USB_ResetInterface>

000078bc <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    78bc:	e8 ed       	ldi	r30, 0xD8	; 216
    78be:	f0 e0       	ldi	r31, 0x00	; 0
    78c0:	80 81       	ld	r24, Z
    78c2:	8e 7f       	andi	r24, 0xFE	; 254
    78c4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    78c6:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    78ca:	08 95       	ret

000078cc <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
    78cc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
    78d0:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    78d4:	08 95       	ret

000078d6 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    78d6:	1f 92       	push	r1
    78d8:	0f 92       	push	r0
    78da:	0f b6       	in	r0, 0x3f	; 63
    78dc:	0f 92       	push	r0
    78de:	11 24       	eor	r1, r1
    78e0:	2f 93       	push	r18
    78e2:	3f 93       	push	r19
    78e4:	4f 93       	push	r20
    78e6:	5f 93       	push	r21
    78e8:	6f 93       	push	r22
    78ea:	7f 93       	push	r23
    78ec:	8f 93       	push	r24
    78ee:	9f 93       	push	r25
    78f0:	af 93       	push	r26
    78f2:	bf 93       	push	r27
    78f4:	ef 93       	push	r30
    78f6:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
    78f8:	80 91 da 00 	lds	r24, 0x00DA
    78fc:	80 ff       	sbrs	r24, 0
    78fe:	13 c0       	rjmp	.+38     	; 0x7926 <__vector_10+0x50>
    7900:	80 91 d8 00 	lds	r24, 0x00D8
    7904:	80 ff       	sbrs	r24, 0
    7906:	0f c0       	rjmp	.+30     	; 0x7926 <__vector_10+0x50>
	{
		USB_INT_Clear(USB_INT_VBUS);
    7908:	80 91 da 00 	lds	r24, 0x00DA
    790c:	8e 7f       	andi	r24, 0xFE	; 254
    790e:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7912:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
    7916:	80 ff       	sbrs	r24, 0
    7918:	04 c0       	rjmp	.+8      	; 0x7922 <__vector_10+0x4c>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
    791a:	81 e0       	ldi	r24, 0x01	; 1
    791c:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    791e:	a2 d1       	rcall	.+836    	; 0x7c64 <USB_Event_Stub>
    7920:	02 c0       	rjmp	.+4      	; 0x7926 <__vector_10+0x50>
    7922:	1e ba       	out	0x1e, r1	; 30
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
    7924:	9f d1       	rcall	.+830    	; 0x7c64 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
    7926:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    792a:	80 ff       	sbrs	r24, 0
    792c:	1c c0       	rjmp	.+56     	; 0x7966 <__vector_10+0x90>
    792e:	80 91 e2 00 	lds	r24, 0x00E2
    7932:	80 ff       	sbrs	r24, 0
    7934:	18 c0       	rjmp	.+48     	; 0x7966 <__vector_10+0x90>
    7936:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_SUSPI);
    793a:	8e 7f       	andi	r24, 0xFE	; 254
    793c:	80 93 e1 00 	sts	0x00E1, r24
    7940:	80 91 e2 00 	lds	r24, 0x00E2

		USB_INT_Disable(USB_INT_SUSPI);
    7944:	8e 7f       	andi	r24, 0xFE	; 254
    7946:	80 93 e2 00 	sts	0x00E2, r24
    794a:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_WAKEUPI);
    794e:	80 61       	ori	r24, 0x10	; 16
    7950:	80 93 e2 00 	sts	0x00E2, r24
    7954:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    7958:	80 62       	ori	r24, 0x20	; 32
    795a:	80 93 d8 00 	sts	0x00D8, r24
    795e:	19 bc       	out	0x29, r1	; 41
    7960:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    7962:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7964:	7f d1       	rcall	.+766    	; 0x7c64 <USB_Event_Stub>
    7966:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    796a:	84 ff       	sbrs	r24, 4
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    796c:	2d c0       	rjmp	.+90     	; 0x79c8 <__vector_10+0xf2>
    796e:	80 91 e2 00 	lds	r24, 0x00E2
    7972:	84 ff       	sbrs	r24, 4
    7974:	29 c0       	rjmp	.+82     	; 0x79c8 <__vector_10+0xf2>
    7976:	80 e1       	ldi	r24, 0x10	; 16
    7978:	89 bd       	out	0x29, r24	; 41
    797a:	89 b5       	in	r24, 0x29	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    797c:	82 60       	ori	r24, 0x02	; 2
    797e:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    7980:	09 b4       	in	r0, 0x29	; 41
    7982:	00 fe       	sbrs	r0, 0
    7984:	fd cf       	rjmp	.-6      	; 0x7980 <__vector_10+0xaa>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7986:	80 91 d8 00 	lds	r24, 0x00D8
    798a:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    798c:	80 93 d8 00 	sts	0x00D8, r24
    7990:	80 91 e1 00 	lds	r24, 0x00E1
    7994:	8f 7e       	andi	r24, 0xEF	; 239
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
    7996:	80 93 e1 00 	sts	0x00E1, r24
    799a:	80 91 e2 00 	lds	r24, 0x00E2
    799e:	8f 7e       	andi	r24, 0xEF	; 239

		USB_INT_Disable(USB_INT_WAKEUPI);
    79a0:	80 93 e2 00 	sts	0x00E2, r24
    79a4:	80 91 e2 00 	lds	r24, 0x00E2
    79a8:	81 60       	ori	r24, 0x01	; 1
		USB_INT_Enable(USB_INT_SUSPI);
    79aa:	80 93 e2 00 	sts	0x00E2, r24
    79ae:	80 91 93 01 	lds	r24, 0x0193
    79b2:	88 23       	and	r24, r24

		if (USB_ConfigurationNumber)
    79b4:	21 f4       	brne	.+8      	; 0x79be <__vector_10+0xe8>
    79b6:	80 91 e3 00 	lds	r24, 0x00E3
    79ba:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    79bc:	02 c0       	rjmp	.+4      	; 0x79c2 <__vector_10+0xec>
    79be:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    79c0:	01 c0       	rjmp	.+2      	; 0x79c4 <__vector_10+0xee>
    79c2:	81 e0       	ldi	r24, 0x01	; 1
    79c4:	8e bb       	out	0x1e, r24	; 30
    79c6:	4e d1       	rcall	.+668    	; 0x7c64 <USB_Event_Stub>
    79c8:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    79cc:	83 ff       	sbrs	r24, 3
    79ce:	21 c0       	rjmp	.+66     	; 0x7a12 <__vector_10+0x13c>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    79d0:	80 91 e2 00 	lds	r24, 0x00E2
    79d4:	83 ff       	sbrs	r24, 3
    79d6:	1d c0       	rjmp	.+58     	; 0x7a12 <__vector_10+0x13c>
    79d8:	80 91 e1 00 	lds	r24, 0x00E1
    79dc:	87 7f       	andi	r24, 0xF7	; 247
    79de:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);
    79e2:	82 e0       	ldi	r24, 0x02	; 2
    79e4:	8e bb       	out	0x1e, r24	; 30
    79e6:	10 92 93 01 	sts	0x0193, r1

		USB_DeviceState         = DEVICE_STATE_Default;
    79ea:	80 91 e1 00 	lds	r24, 0x00E1
		USB_ConfigurationNumber = 0;
    79ee:	8e 7f       	andi	r24, 0xFE	; 254
    79f0:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Clear(USB_INT_SUSPI);
    79f4:	80 91 e2 00 	lds	r24, 0x00E2
    79f8:	8e 7f       	andi	r24, 0xFE	; 254
    79fa:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Disable(USB_INT_SUSPI);
    79fe:	80 91 e2 00 	lds	r24, 0x00E2
    7a02:	80 61       	ori	r24, 0x10	; 16
    7a04:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    7a08:	80 e0       	ldi	r24, 0x00	; 0
    7a0a:	60 e0       	ldi	r22, 0x00	; 0
    7a0c:	42 e0       	ldi	r20, 0x02	; 2
    7a0e:	d6 de       	rcall	.-596    	; 0x77bc <Endpoint_ConfigureEndpoint_Prv>
    7a10:	29 d1       	rcall	.+594    	; 0x7c64 <USB_Event_Stub>
    7a12:	80 91 e1 00 	lds	r24, 0x00E1
    7a16:	82 ff       	sbrs	r24, 2
    7a18:	0a c0       	rjmp	.+20     	; 0x7a2e <__vector_10+0x158>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7a1a:	80 91 e2 00 	lds	r24, 0x00E2
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    7a1e:	82 ff       	sbrs	r24, 2
    7a20:	06 c0       	rjmp	.+12     	; 0x7a2e <__vector_10+0x158>
    7a22:	80 91 e1 00 	lds	r24, 0x00E1
    7a26:	8b 7f       	andi	r24, 0xFB	; 251
    7a28:	80 93 e1 00 	sts	0x00E1, r24
    7a2c:	1b d1       	rcall	.+566    	; 0x7c64 <USB_Event_Stub>
	{
		USB_INT_Clear(USB_INT_SOFI);
    7a2e:	ff 91       	pop	r31
    7a30:	ef 91       	pop	r30
    7a32:	bf 91       	pop	r27
    7a34:	af 91       	pop	r26
    7a36:	9f 91       	pop	r25

		EVENT_USB_Device_StartOfFrame();
    7a38:	8f 91       	pop	r24
    7a3a:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7a3c:	6f 91       	pop	r22
    7a3e:	5f 91       	pop	r21
    7a40:	4f 91       	pop	r20
    7a42:	3f 91       	pop	r19
    7a44:	2f 91       	pop	r18
    7a46:	0f 90       	pop	r0
    7a48:	0f be       	out	0x3f, r0	; 63
    7a4a:	0f 90       	pop	r0
    7a4c:	1f 90       	pop	r1
    7a4e:	18 95       	reti

00007a50 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7a50:	0f 93       	push	r16
    7a52:	1f 93       	push	r17
    7a54:	cf 93       	push	r28
    7a56:	df 93       	push	r29
    7a58:	00 d0       	rcall	.+0      	; 0x7a5a <USB_Device_ProcessControlRequest+0xa>
    7a5a:	cd b7       	in	r28, 0x3d	; 61
    7a5c:	de b7       	in	r29, 0x3e	; 62
    7a5e:	88 e0       	ldi	r24, 0x08	; 8
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
    7a60:	e5 e9       	ldi	r30, 0x95	; 149
    7a62:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    7a64:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    7a68:	91 93       	st	Z+, r25
    7a6a:	81 50       	subi	r24, 0x01	; 1
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7a6c:	d9 f7       	brne	.-10     	; 0x7a64 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7a6e:	80 91 95 01 	lds	r24, 0x0195

	switch (USB_ControlRequest.bRequest)
    7a72:	90 91 96 01 	lds	r25, 0x0196
    7a76:	95 30       	cpi	r25, 0x05	; 5
    7a78:	09 f4       	brne	.+2      	; 0x7a7c <USB_Device_ProcessControlRequest+0x2c>
    7a7a:	6b c0       	rjmp	.+214    	; 0x7b52 <USB_Device_ProcessControlRequest+0x102>
    7a7c:	96 30       	cpi	r25, 0x06	; 6
    7a7e:	40 f4       	brcc	.+16     	; 0x7a90 <USB_Device_ProcessControlRequest+0x40>
    7a80:	91 30       	cpi	r25, 0x01	; 1
    7a82:	61 f1       	breq	.+88     	; 0x7adc <USB_Device_ProcessControlRequest+0x8c>
    7a84:	91 30       	cpi	r25, 0x01	; 1
    7a86:	70 f0       	brcs	.+28     	; 0x7aa4 <USB_Device_ProcessControlRequest+0x54>
    7a88:	93 30       	cpi	r25, 0x03	; 3
    7a8a:	09 f0       	breq	.+2      	; 0x7a8e <USB_Device_ProcessControlRequest+0x3e>
    7a8c:	d5 c0       	rjmp	.+426    	; 0x7c38 <USB_Device_ProcessControlRequest+0x1e8>
    7a8e:	26 c0       	rjmp	.+76     	; 0x7adc <USB_Device_ProcessControlRequest+0x8c>
    7a90:	98 30       	cpi	r25, 0x08	; 8
    7a92:	09 f4       	brne	.+2      	; 0x7a96 <USB_Device_ProcessControlRequest+0x46>
    7a94:	a3 c0       	rjmp	.+326    	; 0x7bdc <USB_Device_ProcessControlRequest+0x18c>
    7a96:	99 30       	cpi	r25, 0x09	; 9
    7a98:	09 f4       	brne	.+2      	; 0x7a9c <USB_Device_ProcessControlRequest+0x4c>
    7a9a:	b2 c0       	rjmp	.+356    	; 0x7c00 <USB_Device_ProcessControlRequest+0x1b0>
    7a9c:	96 30       	cpi	r25, 0x06	; 6
    7a9e:	09 f0       	breq	.+2      	; 0x7aa2 <USB_Device_ProcessControlRequest+0x52>
    7aa0:	cb c0       	rjmp	.+406    	; 0x7c38 <USB_Device_ProcessControlRequest+0x1e8>
    7aa2:	7c c0       	rjmp	.+248    	; 0x7b9c <USB_Device_ProcessControlRequest+0x14c>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7aa4:	80 38       	cpi	r24, 0x80	; 128
    7aa6:	09 f4       	brne	.+2      	; 0x7aaa <USB_Device_ProcessControlRequest+0x5a>
    7aa8:	c8 c0       	rjmp	.+400    	; 0x7c3a <USB_Device_ProcessControlRequest+0x1ea>
    7aaa:	82 38       	cpi	r24, 0x82	; 130
    7aac:	09 f0       	breq	.+2      	; 0x7ab0 <USB_Device_ProcessControlRequest+0x60>
    7aae:	c4 c0       	rjmp	.+392    	; 0x7c38 <USB_Device_ProcessControlRequest+0x1e8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7ab0:	80 91 99 01 	lds	r24, 0x0199
    7ab4:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7ab6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7aba:	90 91 eb 00 	lds	r25, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7abe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7ac2:	80 91 e8 00 	lds	r24, 0x00E8
    7ac6:	87 7f       	andi	r24, 0xF7	; 247
    7ac8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    7acc:	81 e0       	ldi	r24, 0x01	; 1
    7ace:	95 ff       	sbrs	r25, 5
    7ad0:	80 e0       	ldi	r24, 0x00	; 0
    7ad2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
    7ad6:	10 92 f1 00 	sts	0x00F1, r1
    7ada:	8b c0       	rjmp	.+278    	; 0x7bf2 <USB_Device_ProcessControlRequest+0x1a2>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7adc:	88 23       	and	r24, r24
    7ade:	19 f0       	breq	.+6      	; 0x7ae6 <USB_Device_ProcessControlRequest+0x96>
    7ae0:	82 30       	cpi	r24, 0x02	; 2
    7ae2:	09 f0       	breq	.+2      	; 0x7ae6 <USB_Device_ProcessControlRequest+0x96>
    7ae4:	a9 c0       	rjmp	.+338    	; 0x7c38 <USB_Device_ProcessControlRequest+0x1e8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7ae6:	8f 71       	andi	r24, 0x1F	; 31
    7ae8:	82 30       	cpi	r24, 0x02	; 2
    7aea:	09 f0       	breq	.+2      	; 0x7aee <USB_Device_ProcessControlRequest+0x9e>
    7aec:	a6 c0       	rjmp	.+332    	; 0x7c3a <USB_Device_ProcessControlRequest+0x1ea>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
    7aee:	80 91 97 01 	lds	r24, 0x0197
    7af2:	88 23       	and	r24, r24
    7af4:	41 f5       	brne	.+80     	; 0x7b46 <USB_Device_ProcessControlRequest+0xf6>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7af6:	20 91 99 01 	lds	r18, 0x0199
    7afa:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7afc:	09 f4       	brne	.+2      	; 0x7b00 <USB_Device_ProcessControlRequest+0xb0>
    7afe:	9d c0       	rjmp	.+314    	; 0x7c3a <USB_Device_ProcessControlRequest+0x1ea>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7b00:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7b04:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7b08:	80 ff       	sbrs	r24, 0
    7b0a:	1d c0       	rjmp	.+58     	; 0x7b46 <USB_Device_ProcessControlRequest+0xf6>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7b0c:	80 91 96 01 	lds	r24, 0x0196
    7b10:	83 30       	cpi	r24, 0x03	; 3
    7b12:	21 f4       	brne	.+8      	; 0x7b1c <USB_Device_ProcessControlRequest+0xcc>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7b14:	80 91 eb 00 	lds	r24, 0x00EB
    7b18:	80 62       	ori	r24, 0x20	; 32
    7b1a:	13 c0       	rjmp	.+38     	; 0x7b42 <USB_Device_ProcessControlRequest+0xf2>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7b1c:	80 91 eb 00 	lds	r24, 0x00EB
    7b20:	80 61       	ori	r24, 0x10	; 16
    7b22:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7b26:	81 e0       	ldi	r24, 0x01	; 1
    7b28:	90 e0       	ldi	r25, 0x00	; 0
    7b2a:	02 c0       	rjmp	.+4      	; 0x7b30 <USB_Device_ProcessControlRequest+0xe0>
    7b2c:	88 0f       	add	r24, r24
    7b2e:	99 1f       	adc	r25, r25
    7b30:	2a 95       	dec	r18
    7b32:	e2 f7       	brpl	.-8      	; 0x7b2c <USB_Device_ProcessControlRequest+0xdc>
    7b34:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    7b38:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7b3c:	80 91 eb 00 	lds	r24, 0x00EB
    7b40:	88 60       	ori	r24, 0x08	; 8
    7b42:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7b46:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7b4a:	80 91 e8 00 	lds	r24, 0x00E8
    7b4e:	87 7f       	andi	r24, 0xF7	; 247
    7b50:	53 c0       	rjmp	.+166    	; 0x7bf8 <USB_Device_ProcessControlRequest+0x1a8>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7b52:	88 23       	and	r24, r24
    7b54:	09 f0       	breq	.+2      	; 0x7b58 <USB_Device_ProcessControlRequest+0x108>
    7b56:	70 c0       	rjmp	.+224    	; 0x7c38 <USB_Device_ProcessControlRequest+0x1e8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    7b58:	10 91 97 01 	lds	r17, 0x0197
    7b5c:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7b5e:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7b60:	f8 94       	cli
    7b62:	80 91 e8 00 	lds	r24, 0x00E8
    7b66:	87 7f       	andi	r24, 0xF7	; 247
    7b68:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
    7b6c:	3a de       	rcall	.-908    	; 0x77e2 <Endpoint_ClearStatusStage>
    7b6e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7b72:	80 ff       	sbrs	r24, 0

		while (!(Endpoint_IsINReady()));
    7b74:	fc cf       	rjmp	.-8      	; 0x7b6e <USB_Device_ProcessControlRequest+0x11e>
    7b76:	11 23       	and	r17, r17

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7b78:	11 f0       	breq	.+4      	; 0x7b7e <USB_Device_ProcessControlRequest+0x12e>
    7b7a:	83 e0       	ldi	r24, 0x03	; 3
    7b7c:	01 c0       	rjmp	.+2      	; 0x7b80 <USB_Device_ProcessControlRequest+0x130>
    7b7e:	82 e0       	ldi	r24, 0x02	; 2
    7b80:	8e bb       	out	0x1e, r24	; 30
    7b82:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    7b86:	80 78       	andi	r24, 0x80	; 128
    7b88:	81 2b       	or	r24, r17
    7b8a:	80 93 e3 00 	sts	0x00E3, r24
    7b8e:	80 91 e3 00 	lds	r24, 0x00E3
				UDADDR |= (1 << ADDEN);
    7b92:	80 68       	ori	r24, 0x80	; 128
    7b94:	80 93 e3 00 	sts	0x00E3, r24
    7b98:	0f bf       	out	0x3f, r16	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7b9a:	4f c0       	rjmp	.+158    	; 0x7c3a <USB_Device_ProcessControlRequest+0x1ea>
    __asm__ volatile ("" ::: "memory");
    7b9c:	80 58       	subi	r24, 0x80	; 128
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7b9e:	82 30       	cpi	r24, 0x02	; 2
    7ba0:	08 f0       	brcs	.+2      	; 0x7ba4 <USB_Device_ProcessControlRequest+0x154>
    7ba2:	4a c0       	rjmp	.+148    	; 0x7c38 <USB_Device_ProcessControlRequest+0x1e8>
    7ba4:	80 91 97 01 	lds	r24, 0x0197
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7ba8:	90 91 98 01 	lds	r25, 0x0198
    7bac:	60 91 99 01 	lds	r22, 0x0199
    7bb0:	ae 01       	movw	r20, r28
    7bb2:	4f 5f       	subi	r20, 0xFF	; 255
    7bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    7bb6:	dc dd       	rcall	.-1096   	; 0x7770 <CALLBACK_USB_GetDescriptor>
    7bb8:	bc 01       	movw	r22, r24
    7bba:	00 97       	sbiw	r24, 0x00	; 0
    7bbc:	09 f4       	brne	.+2      	; 0x7bc0 <USB_Device_ProcessControlRequest+0x170>
    7bbe:	3d c0       	rjmp	.+122    	; 0x7c3a <USB_Device_ProcessControlRequest+0x1ea>
    7bc0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7bc4:	87 7f       	andi	r24, 0xF7	; 247
    7bc6:	80 93 e8 00 	sts	0x00E8, r24
    7bca:	89 81       	ldd	r24, Y+1	; 0x01
    7bcc:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7bce:	4b d0       	rcall	.+150    	; 0x7c66 <Endpoint_Write_Control_Stream_LE>
    7bd0:	80 91 e8 00 	lds	r24, 0x00E8
    7bd4:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7bd6:	80 93 e8 00 	sts	0x00E8, r24
    7bda:	2f c0       	rjmp	.+94     	; 0x7c3a <USB_Device_ProcessControlRequest+0x1ea>
    7bdc:	80 38       	cpi	r24, 0x80	; 128
    7bde:	61 f5       	brne	.+88     	; 0x7c38 <USB_Device_ProcessControlRequest+0x1e8>
    7be0:	80 91 e8 00 	lds	r24, 0x00E8
				RequestHandled = true;
			}

			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7be4:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7be6:	80 93 e8 00 	sts	0x00E8, r24
    7bea:	80 91 93 01 	lds	r24, 0x0193
    7bee:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    7bf2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    7bf6:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7bf8:	80 93 e8 00 	sts	0x00E8, r24
    7bfc:	f2 dd       	rcall	.-1052   	; 0x77e2 <Endpoint_ClearStatusStage>
    7bfe:	1d c0       	rjmp	.+58     	; 0x7c3a <USB_Device_ProcessControlRequest+0x1ea>
    7c00:	88 23       	and	r24, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7c02:	d1 f4       	brne	.+52     	; 0x7c38 <USB_Device_ProcessControlRequest+0x1e8>
    7c04:	90 91 97 01 	lds	r25, 0x0197
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7c08:	92 30       	cpi	r25, 0x02	; 2
    7c0a:	b8 f4       	brcc	.+46     	; 0x7c3a <USB_Device_ProcessControlRequest+0x1ea>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7c0c:	80 91 e8 00 	lds	r24, 0x00E8
    7c10:	87 7f       	andi	r24, 0xF7	; 247
    7c12:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c16:	90 93 93 01 	sts	0x0193, r25
    7c1a:	e3 dd       	rcall	.-1082   	; 0x77e2 <Endpoint_ClearStatusStage>
    7c1c:	80 91 93 01 	lds	r24, 0x0193
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7c20:	88 23       	and	r24, r24

	Endpoint_ClearStatusStage();
    7c22:	21 f4       	brne	.+8      	; 0x7c2c <USB_Device_ProcessControlRequest+0x1dc>
    7c24:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_ConfigurationNumber)
    7c28:	87 ff       	sbrs	r24, 7
    7c2a:	02 c0       	rjmp	.+4      	; 0x7c30 <USB_Device_ProcessControlRequest+0x1e0>
    7c2c:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7c2e:	01 c0       	rjmp	.+2      	; 0x7c32 <USB_Device_ProcessControlRequest+0x1e2>
    7c30:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7c32:	8e bb       	out	0x1e, r24	; 30
    7c34:	a1 da       	rcall	.-2750   	; 0x7178 <EVENT_USB_Device_ConfigurationChanged>
    7c36:	01 c0       	rjmp	.+2      	; 0x7c3a <USB_Device_ProcessControlRequest+0x1ea>
    7c38:	ab da       	rcall	.-2730   	; 0x7190 <EVENT_USB_Device_UnhandledControlRequest>
    7c3a:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    7c3e:	83 ff       	sbrs	r24, 3
    7c40:	0a c0       	rjmp	.+20     	; 0x7c56 <USB_Device_ProcessControlRequest+0x206>
    7c42:	80 91 eb 00 	lds	r24, 0x00EB

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
    7c46:	80 62       	ori	r24, 0x20	; 32
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c48:	80 93 eb 00 	sts	0x00EB, r24

	if (Endpoint_IsSETUPReceived())
    7c4c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7c50:	87 7f       	andi	r24, 0xF7	; 247
    7c52:	80 93 e8 00 	sts	0x00E8, r24
    7c56:	0f 90       	pop	r0
    7c58:	0f 90       	pop	r0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c5a:	df 91       	pop	r29
    7c5c:	cf 91       	pop	r28
    7c5e:	1f 91       	pop	r17
    7c60:	0f 91       	pop	r16
    7c62:	08 95       	ret

00007c64 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    7c64:	08 95       	ret

00007c66 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7c66:	40 91 9b 01 	lds	r20, 0x019B
    7c6a:	50 91 9c 01 	lds	r21, 0x019C
    7c6e:	46 17       	cp	r20, r22
    7c70:	57 07       	cpc	r21, r23
    7c72:	20 f4       	brcc	.+8      	; 0x7c7c <Endpoint_Write_Control_Stream_LE+0x16>
    7c74:	ba 01       	movw	r22, r20
    7c76:	fc 01       	movw	r30, r24
    7c78:	40 e0       	ldi	r20, 0x00	; 0
    7c7a:	3b c0       	rjmp	.+118    	; 0x7cf2 <Endpoint_Write_Control_Stream_LE+0x8c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7c7c:	61 15       	cp	r22, r1
    7c7e:	71 05       	cpc	r23, r1
    7c80:	d1 f7       	brne	.-12     	; 0x7c76 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7c82:	40 91 e8 00 	lds	r20, 0x00E8
    7c86:	4e 77       	andi	r20, 0x7E	; 126
    7c88:	40 93 e8 00 	sts	0x00E8, r20
    7c8c:	f4 cf       	rjmp	.-24     	; 0x7c76 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c8e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c90:	88 23       	and	r24, r24
    7c92:	09 f4       	brne	.+2      	; 0x7c96 <Endpoint_Write_Control_Stream_LE+0x30>
    7c94:	43 c0       	rjmp	.+134    	; 0x7d1c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c96:	85 30       	cpi	r24, 0x05	; 5
    7c98:	e9 f1       	breq	.+122    	; 0x7d14 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c9a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7c9e:	83 fd       	sbrc	r24, 3
    7ca0:	3b c0       	rjmp	.+118    	; 0x7d18 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7ca2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7ca6:	82 fd       	sbrc	r24, 2
    7ca8:	2f c0       	rjmp	.+94     	; 0x7d08 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7caa:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7cae:	80 ff       	sbrs	r24, 0
    7cb0:	20 c0       	rjmp	.+64     	; 0x7cf2 <Endpoint_Write_Control_Stream_LE+0x8c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7cb2:	90 91 f3 00 	lds	r25, 0x00F3
    7cb6:	80 91 f2 00 	lds	r24, 0x00F2
    7cba:	39 2f       	mov	r19, r25
    7cbc:	20 e0       	ldi	r18, 0x00	; 0
    7cbe:	90 e0       	ldi	r25, 0x00	; 0
    7cc0:	82 2b       	or	r24, r18
    7cc2:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    7cc4:	06 c0       	rjmp	.+12     	; 0x7cd2 <Endpoint_Write_Control_Stream_LE+0x6c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7cc6:	41 91       	ld	r20, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    7cc8:	40 93 f1 00 	sts	0x00F1, r20
				Length--;
    7ccc:	61 50       	subi	r22, 0x01	; 1
    7cce:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    7cd0:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    7cd2:	61 15       	cp	r22, r1
    7cd4:	71 05       	cpc	r23, r1
    7cd6:	19 f0       	breq	.+6      	; 0x7cde <Endpoint_Write_Control_Stream_LE+0x78>
    7cd8:	88 30       	cpi	r24, 0x08	; 8
    7cda:	91 05       	cpc	r25, r1
    7cdc:	a0 f3       	brcs	.-24     	; 0x7cc6 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    7cde:	41 e0       	ldi	r20, 0x01	; 1
    7ce0:	88 30       	cpi	r24, 0x08	; 8
    7ce2:	91 05       	cpc	r25, r1
    7ce4:	09 f0       	breq	.+2      	; 0x7ce8 <Endpoint_Write_Control_Stream_LE+0x82>
    7ce6:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7ce8:	80 91 e8 00 	lds	r24, 0x00E8
    7cec:	8e 77       	andi	r24, 0x7E	; 126
    7cee:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7cf2:	61 15       	cp	r22, r1
    7cf4:	71 05       	cpc	r23, r1
    7cf6:	59 f6       	brne	.-106    	; 0x7c8e <Endpoint_Write_Control_Stream_LE+0x28>
    7cf8:	44 23       	and	r20, r20
    7cfa:	49 f6       	brne	.-110    	; 0x7c8e <Endpoint_Write_Control_Stream_LE+0x28>
    7cfc:	05 c0       	rjmp	.+10     	; 0x7d08 <Endpoint_Write_Control_Stream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7cfe:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7d00:	88 23       	and	r24, r24
    7d02:	61 f0       	breq	.+24     	; 0x7d1c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7d04:	85 30       	cpi	r24, 0x05	; 5
    7d06:	61 f0       	breq	.+24     	; 0x7d20 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7d08:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7d0c:	82 ff       	sbrs	r24, 2
    7d0e:	f7 cf       	rjmp	.-18     	; 0x7cfe <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7d10:	80 e0       	ldi	r24, 0x00	; 0
    7d12:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7d14:	83 e0       	ldi	r24, 0x03	; 3
    7d16:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7d18:	81 e0       	ldi	r24, 0x01	; 1
    7d1a:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7d1c:	82 e0       	ldi	r24, 0x02	; 2
    7d1e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7d20:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7d22:	08 95       	ret

00007d24 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7d24:	61 15       	cp	r22, r1
    7d26:	71 05       	cpc	r23, r1
    7d28:	29 f4       	brne	.+10     	; 0x7d34 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7d2a:	40 91 e8 00 	lds	r20, 0x00E8
    7d2e:	4b 77       	andi	r20, 0x7B	; 123
    7d30:	40 93 e8 00 	sts	0x00E8, r20
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
    7d34:	58 2f       	mov	r21, r24
    7d36:	49 2f       	mov	r20, r25
    7d38:	2a c0       	rjmp	.+84     	; 0x7d8e <Endpoint_Read_Control_Stream_LE+0x6a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7d3a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7d3c:	88 23       	and	r24, r24
    7d3e:	d1 f1       	breq	.+116    	; 0x7db4 <Endpoint_Read_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7d40:	85 30       	cpi	r24, 0x05	; 5
    7d42:	a1 f1       	breq	.+104    	; 0x7dac <Endpoint_Read_Control_Stream_LE+0x88>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7d44:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7d48:	83 fd       	sbrc	r24, 3
    7d4a:	32 c0       	rjmp	.+100    	; 0x7db0 <Endpoint_Read_Control_Stream_LE+0x8c>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7d4c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7d50:	82 ff       	sbrs	r24, 2
    7d52:	f3 cf       	rjmp	.-26     	; 0x7d3a <Endpoint_Read_Control_Stream_LE+0x16>
    7d54:	e5 2f       	mov	r30, r21
    7d56:	f4 2f       	mov	r31, r20
    7d58:	08 c0       	rjmp	.+16     	; 0x7d6a <Endpoint_Read_Control_Stream_LE+0x46>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    7d5a:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7d5e:	81 93       	st	Z+, r24
    7d60:	5e 2f       	mov	r21, r30
    7d62:	4f 2f       	mov	r20, r31
				Length--;
    7d64:	61 50       	subi	r22, 0x01	; 1
    7d66:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    7d68:	69 f0       	breq	.+26     	; 0x7d84 <Endpoint_Read_Control_Stream_LE+0x60>
    7d6a:	5e 2f       	mov	r21, r30
    7d6c:	4f 2f       	mov	r20, r31
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7d6e:	90 91 f3 00 	lds	r25, 0x00F3
    7d72:	80 91 f2 00 	lds	r24, 0x00F2
    7d76:	39 2f       	mov	r19, r25
    7d78:	20 e0       	ldi	r18, 0x00	; 0
    7d7a:	90 e0       	ldi	r25, 0x00	; 0
    7d7c:	82 2b       	or	r24, r18
    7d7e:	93 2b       	or	r25, r19
    7d80:	00 97       	sbiw	r24, 0x00	; 0
    7d82:	59 f7       	brne	.-42     	; 0x7d5a <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7d84:	80 91 e8 00 	lds	r24, 0x00E8
    7d88:	8b 77       	andi	r24, 0x7B	; 123
    7d8a:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    7d8e:	61 15       	cp	r22, r1
    7d90:	71 05       	cpc	r23, r1
    7d92:	99 f6       	brne	.-90     	; 0x7d3a <Endpoint_Read_Control_Stream_LE+0x16>
    7d94:	05 c0       	rjmp	.+10     	; 0x7da0 <Endpoint_Read_Control_Stream_LE+0x7c>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7d96:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7d98:	88 23       	and	r24, r24
    7d9a:	61 f0       	breq	.+24     	; 0x7db4 <Endpoint_Read_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7d9c:	85 30       	cpi	r24, 0x05	; 5
    7d9e:	61 f0       	breq	.+24     	; 0x7db8 <Endpoint_Read_Control_Stream_LE+0x94>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7da0:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7da4:	80 ff       	sbrs	r24, 0
    7da6:	f7 cf       	rjmp	.-18     	; 0x7d96 <Endpoint_Read_Control_Stream_LE+0x72>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7da8:	80 e0       	ldi	r24, 0x00	; 0
    7daa:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7dac:	83 e0       	ldi	r24, 0x03	; 3
    7dae:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7db0:	81 e0       	ldi	r24, 0x01	; 1
    7db2:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7db4:	82 e0       	ldi	r24, 0x02	; 2
    7db6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7db8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7dba:	08 95       	ret

00007dbc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7dbc:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7dbe:	8e b3       	in	r24, 0x1e	; 30
    7dc0:	88 23       	and	r24, r24
    7dc2:	61 f0       	breq	.+24     	; 0x7ddc <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7dc4:	c0 91 e9 00 	lds	r28, 0x00E9
    7dc8:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7dca:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7dce:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7dd2:	83 ff       	sbrs	r24, 3
    7dd4:	01 c0       	rjmp	.+2      	; 0x7dd8 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    7dd6:	3c de       	rcall	.-904    	; 0x7a50 <USB_Device_ProcessControlRequest>
    7dd8:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7ddc:	cf 91       	pop	r28
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7dde:	08 95       	ret

00007de0 <__eerd_byte_m32u4>:
    7de0:	f9 99       	sbic	0x1f, 1	; 31
    7de2:	fe cf       	rjmp	.-4      	; 0x7de0 <__eerd_byte_m32u4>
    7de4:	92 bd       	out	0x22, r25	; 34
    7de6:	81 bd       	out	0x21, r24	; 33
    7de8:	f8 9a       	sbi	0x1f, 0	; 31
    7dea:	99 27       	eor	r25, r25
    7dec:	80 b5       	in	r24, 0x20	; 32
    7dee:	08 95       	ret

00007df0 <__eewr_byte_m32u4>:
    7df0:	26 2f       	mov	r18, r22

00007df2 <__eewr_r18_m32u4>:
    7df2:	f9 99       	sbic	0x1f, 1	; 31
    7df4:	fe cf       	rjmp	.-4      	; 0x7df2 <__eewr_r18_m32u4>
    7df6:	1f ba       	out	0x1f, r1	; 31
    7df8:	92 bd       	out	0x22, r25	; 34
    7dfa:	81 bd       	out	0x21, r24	; 33
    7dfc:	20 bd       	out	0x20, r18	; 32
    7dfe:	0f b6       	in	r0, 0x3f	; 63
    7e00:	f8 94       	cli
    7e02:	fa 9a       	sbi	0x1f, 2	; 31
    7e04:	f9 9a       	sbi	0x1f, 1	; 31
    7e06:	0f be       	out	0x3f, r0	; 63
    7e08:	01 96       	adiw	r24, 0x01	; 1
    7e0a:	08 95       	ret

00007e0c <_exit>:
    7e0c:	f8 94       	cli

00007e0e <__stop_program>:
    7e0e:	ff cf       	rjmp	.-2      	; 0x7e0e <__stop_program>
